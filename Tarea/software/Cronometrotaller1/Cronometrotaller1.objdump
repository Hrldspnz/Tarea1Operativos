
Cronometrotaller1.elf:     file format elf32-littlenios2
Cronometrotaller1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000180

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000c64 memsz 0x00000c64 flags r-x
    LOAD off    0x00002000 vaddr 0x00010000 paddr 0x00000c84 align 2**12
         filesz 0x00000004 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000b04  00000180  00000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  00010000  00000c88  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000004  00010000  00000c84  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  00010004  00000c88  00002004  2**2
                  ALLOC, SMALL_DATA
  6 .ROM          00000000  00000c88  00000c88  00002004  2**0
                  CONTENTS
  7 .RAM          00000000  00010128  00010128  00002004  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000238  00000000  00000000  00002028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00001846  00000000  00000000  00002260  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000b49  00000000  00000000  00003aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000ac4  00000000  00000000  000045ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000002d0  00000000  00000000  000050b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000c76  00000000  00000000  00005384  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000c36  00000000  00000000  00005ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00006c30  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000178  00000000  00000000  00006c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00007e86  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00007e89  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00007e8c  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00007e8d  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000004  00000000  00000000  00007e8e  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000004  00000000  00000000  00007e92  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000004  00000000  00000000  00007e96  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  00007e9a  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000058  00000000  00000000  00007ea2  2**0
                  CONTENTS, READONLY
 27 .jdi          000001f2  00000000  00000000  00007efa  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0006cec5  00000000  00000000  000080ec  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000180 l    d  .text	00000000 .text
00010000 l    d  .rodata	00000000 .rodata
00010000 l    d  .rwdata	00000000 .rwdata
00010004 l    d  .bss	00000000 .bss
00000c88 l    d  .ROM	00000000 .ROM
00010128 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Cronometrotaller1_bsp//obj/HAL/src/crt0.o
000001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000001bc l     F .text	00000194 timer_min_inter
00010008 l     O .bss	00000004 cont_min
00000350 l     F .text	000001cc timer_ms_inter
0001000c l     O .bss	00000004 cont_mseg
0000051c l     F .text	000001b0 timer_s_inter
00010010 l     O .bss	00000004 cont_seg
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00010024 g     O .bss	00000004 alt_instruction_exception_handler
00000bb0 g     F .text	0000002c alt_main
00010028 g     O .bss	00000100 alt_irq
00000c84 g       *ABS*	00000000 __flash_rwdata_start
00000c7c g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001001c g     O .bss	00000004 alt_argv
00018000 g       *ABS*	00000000 _gp
00000c08 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00000920 g     F .text	00000064 .hidden __udivsi3
00010128 g       *ABS*	00000000 __bss_end
00000a68 g     F .text	00000068 alt_iic_isr_register
00000000 g       *ABS*	00000000 __alt_mem_ROM
00000a50 g     F .text	00000018 alt_ic_irq_enabled
00010014 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000060 alt_irq_handler
00000c00 g     F .text	00000004 alt_dcache_flush_all
00010004 g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __ram_rodata_end
00000984 g     F .text	00000058 .hidden __umodsi3
00010128 g       *ABS*	00000000 end
0000015c g     F .exceptions	00000024 alt_instruction_exception_entry
00011000 g       *ABS*	00000000 __alt_stack_pointer
00000180 g     F .text	0000003c _start
00000bfc g     F .text	00000004 alt_sys_init
00010000 g       *ABS*	00000000 __ram_rwdata_start
00010000 g       *ABS*	00000000 __ram_rodata_start
00010128 g       *ABS*	00000000 __alt_stack_base
00010004 g     O .bss	00000004 init
00010004 g       *ABS*	00000000 __bss_start
000006cc g     F .text	0000015c main
00010000 g       *ABS*	00000000 __alt_mem_RAM
00010018 g     O .bss	00000004 alt_envp
00000828 g     F .text	00000084 .hidden __divsi3
00000c84 g       *ABS*	00000000 __flash_rodata_start
00000bdc g     F .text	00000020 alt_irq_init
00010020 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00000020 g       *ABS*	00000000 __ram_exceptions_start
000009dc g     F .text	00000004 alt_ic_isr_register
00010004 g       *ABS*	00000000 _edata
00010128 g       *ABS*	00000000 _end
00000180 g       *ABS*	00000000 __ram_exceptions_end
00000a18 g     F .text	00000038 alt_ic_irq_disable
000008ac g     F .text	00000074 .hidden __modsi3
00011000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000000c g       .entry	00000000 _exit
00000c04 g     F .text	00000004 alt_icache_flush_all
00010000 g     O .rwdata	00000004 alt_priority_mask
000009e0 g     F .text	00000038 alt_ic_irq_enable
00000ad0 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406014 	ori	at,at,384
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	000015c0 	call	15c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 10c:	04000074 	movhi	r16,1
 110:	84000a04 	addi	r16,r16,40

  active = alt_irq_pending ();

  do
  {
    i = 0;
 114:	0005883a 	mov	r2,zero
    mask = 1;
 118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	20ca703a 	and	r5,r4,r3
 120:	28000b26 	beq	r5,zero,150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 124:	100490fa 	slli	r2,r2,3
 128:	8085883a 	add	r2,r16,r2
 12c:	10c00017 	ldw	r3,0(r2)
 130:	11000117 	ldw	r4,4(r2)
 134:	183ee83a 	callr	r3
 138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 13c:	203ff51e 	bne	r4,zero,114 <_gp+0xfffe8114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 140:	dfc00117 	ldw	ra,4(sp)
 144:	dc000017 	ldw	r16,0(sp)
 148:	dec00204 	addi	sp,sp,8
 14c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 150:	18c7883a 	add	r3,r3,r3
      i++;
 154:	10800044 	addi	r2,r2,1

    } while (1);
 158:	003ff006 	br	11c <_gp+0xfffe811c>

0000015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 15c:	d0a00917 	ldw	r2,-32732(gp)
 160:	10000426 	beq	r2,zero,174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 164:	200b883a 	mov	r5,r4
 168:	000d883a 	mov	r6,zero
 16c:	013fffc4 	movi	r4,-1
 170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 178:	0005883a 	mov	r2,zero
 17c:	f800283a 	ret

Disassembly of section .text:

00000180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 180:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
 184:	dec40014 	ori	sp,sp,4096
    movhi gp, %hi(_gp)
 188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
 18c:	d6a00014 	ori	gp,gp,32768
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
 194:	10800114 	ori	r2,r2,4

    movhi r3, %hi(__bss_end)
 198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
 19c:	18c04a14 	ori	r3,r3,296

    beq r2, r3, 1f
 1a0:	10c00326 	beq	r2,r3,1b0 <_start+0x30>

0:
    stw zero, (r2)
 1a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1ac:	10fffd36 	bltu	r2,r3,1a4 <_gp+0xfffe81a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1b0:	0000ad00 	call	ad0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1b4:	0000bb00 	call	bb0 <alt_main>

000001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1b8:	003fff06 	br	1b8 <_gp+0xfffe81b8>

000001bc <timer_min_inter>:
}
// Funcion encargada del manejo de interrupciones del timer de los minutos
static void timer_min_inter(void *context)
{
    (void) context;
    cont_min ++;
 1bc:	d0a00217 	ldw	r2,-32760(gp)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_MS_BASE,0);

}
// Funcion encargada del manejo de interrupciones del timer de los minutos
static void timer_min_inter(void *context)
{
 1c0:	defffd04 	addi	sp,sp,-12
 1c4:	dfc00215 	stw	ra,8(sp)
 1c8:	dc400115 	stw	r17,4(sp)
 1cc:	dc000015 	stw	r16,0(sp)
    (void) context;
    cont_min ++;
 1d0:	10800044 	addi	r2,r2,1
    if (cont_min > 59){
 1d4:	00c00ec4 	movi	r3,59
 1d8:	18800216 	blt	r3,r2,1e4 <timer_min_inter+0x28>
}
// Funcion encargada del manejo de interrupciones del timer de los minutos
static void timer_min_inter(void *context)
{
    (void) context;
    cont_min ++;
 1dc:	d0a00215 	stw	r2,-32760(gp)
 1e0:	00000106 	br	1e8 <timer_min_inter+0x2c>
    if (cont_min > 59){
        cont_min = 0;
 1e4:	d0200215 	stw	zero,-32760(gp)
    }

    int digito1 = cont_min%10;
 1e8:	d4600217 	ldw	r17,-32760(gp)
 1ec:	01400284 	movi	r5,10
 1f0:	8809883a 	mov	r4,r17
 1f4:	00008ac0 	call	8ac <__modsi3>
    int digito2 = (int)((cont_min - (int)cont_min % 10)/10);
 1f8:	01400284 	movi	r5,10
 1fc:	8889c83a 	sub	r4,r17,r2
    cont_min ++;
    if (cont_min > 59){
        cont_min = 0;
    }

    int digito1 = cont_min%10;
 200:	1021883a 	mov	r16,r2
    int digito2 = (int)((cont_min - (int)cont_min % 10)/10);
 204:	00008280 	call	828 <__divsi3>
 208:	00c00044 	movi	r3,1
    unsigned Output1 = 0;
    unsigned Output2 = 0;


    if (digito1 == 0){Output1 = 1;}
 20c:	80001d26 	beq	r16,zero,284 <timer_min_inter+0xc8>
    else if (digito1 == 1){Output1 = 79;}
 210:	80c00f26 	beq	r16,r3,250 <timer_min_inter+0x94>
    else if (digito1 == 2){Output1 = 18;}
 214:	00c00084 	movi	r3,2
 218:	80c00f26 	beq	r16,r3,258 <timer_min_inter+0x9c>
    else if (digito1 == 3){Output1 = 6;}
 21c:	00c000c4 	movi	r3,3
 220:	80c00f26 	beq	r16,r3,260 <timer_min_inter+0xa4>
    else if (digito1 == 4){Output1 = 76;}
 224:	00c00104 	movi	r3,4
 228:	80c00f26 	beq	r16,r3,268 <timer_min_inter+0xac>
    else if (digito1 == 5){Output1 = 36;}
 22c:	00c00144 	movi	r3,5
 230:	80c00f26 	beq	r16,r3,270 <timer_min_inter+0xb4>
    else if (digito1 == 6){Output1 = 32;}
 234:	00c00184 	movi	r3,6
 238:	80c00f26 	beq	r16,r3,278 <timer_min_inter+0xbc>
    else if (digito1 == 7){Output1 = 15;}
 23c:	00c001c4 	movi	r3,7
 240:	80c00f26 	beq	r16,r3,280 <timer_min_inter+0xc4>
        cont_min = 0;
    }

    int digito1 = cont_min%10;
    int digito2 = (int)((cont_min - (int)cont_min % 10)/10);
    unsigned Output1 = 0;
 244:	80c00260 	cmpeqi	r3,r16,9
 248:	180690ba 	slli	r3,r3,2
 24c:	00000d06 	br	284 <timer_min_inter+0xc8>
    unsigned Output2 = 0;


    if (digito1 == 0){Output1 = 1;}
    else if (digito1 == 1){Output1 = 79;}
 250:	00c013c4 	movi	r3,79
 254:	00000b06 	br	284 <timer_min_inter+0xc8>
    else if (digito1 == 2){Output1 = 18;}
 258:	00c00484 	movi	r3,18
 25c:	00000906 	br	284 <timer_min_inter+0xc8>
    else if (digito1 == 3){Output1 = 6;}
 260:	00c00184 	movi	r3,6
 264:	00000706 	br	284 <timer_min_inter+0xc8>
    else if (digito1 == 4){Output1 = 76;}
 268:	00c01304 	movi	r3,76
 26c:	00000506 	br	284 <timer_min_inter+0xc8>
    else if (digito1 == 5){Output1 = 36;}
 270:	00c00904 	movi	r3,36
 274:	00000306 	br	284 <timer_min_inter+0xc8>
    else if (digito1 == 6){Output1 = 32;}
 278:	00c00804 	movi	r3,32
 27c:	00000106 	br	284 <timer_min_inter+0xc8>
    else if (digito1 == 7){Output1 = 15;}
 280:	00c003c4 	movi	r3,15
 284:	01000044 	movi	r4,1
    else if (digito1 == 8){Output1 = 0;}
    else if (digito1 == 9){Output1 = 4;}else{Output2 = 127;}

    if (digito2 == 0){Output2 = 1;}
 288:	10001326 	beq	r2,zero,2d8 <timer_min_inter+0x11c>
    else if (digito2 == 1){Output2 = 79;}
 28c:	11001426 	beq	r2,r4,2e0 <timer_min_inter+0x124>
    else if (digito2 == 2){Output2 = 18;}
 290:	01000084 	movi	r4,2
 294:	11001426 	beq	r2,r4,2e8 <timer_min_inter+0x12c>
    else if (digito2 == 3){Output2 = 6;}
 298:	010000c4 	movi	r4,3
 29c:	11001426 	beq	r2,r4,2f0 <timer_min_inter+0x134>
    else if (digito2 == 4){Output2 = 76;}
 2a0:	01000104 	movi	r4,4
 2a4:	11001426 	beq	r2,r4,2f8 <timer_min_inter+0x13c>
    else if (digito2 == 5){Output2 = 36;}
 2a8:	01000144 	movi	r4,5
 2ac:	11001426 	beq	r2,r4,300 <timer_min_inter+0x144>
    else if (digito2 == 6){Output2 = 32;}
 2b0:	01000184 	movi	r4,6
 2b4:	11001426 	beq	r2,r4,308 <timer_min_inter+0x14c>
    else if (digito2 == 7){Output2 = 15;}
 2b8:	010001c4 	movi	r4,7
 2bc:	11001426 	beq	r2,r4,310 <timer_min_inter+0x154>
    else if (digito2 == 8){Output2 = 0;}
 2c0:	01000204 	movi	r4,8
 2c4:	11001426 	beq	r2,r4,318 <timer_min_inter+0x15c>
    else if (digito2 == 9){Output2 = 4;}else{Output2 = 127;}
 2c8:	01000244 	movi	r4,9
 2cc:	11001426 	beq	r2,r4,320 <timer_min_inter+0x164>
 2d0:	00801fc4 	movi	r2,127
 2d4:	00001306 	br	324 <timer_min_inter+0x168>
    else if (digito1 == 6){Output1 = 32;}
    else if (digito1 == 7){Output1 = 15;}
    else if (digito1 == 8){Output1 = 0;}
    else if (digito1 == 9){Output1 = 4;}else{Output2 = 127;}

    if (digito2 == 0){Output2 = 1;}
 2d8:	2005883a 	mov	r2,r4
 2dc:	00001106 	br	324 <timer_min_inter+0x168>
    else if (digito2 == 1){Output2 = 79;}
 2e0:	008013c4 	movi	r2,79
 2e4:	00000f06 	br	324 <timer_min_inter+0x168>
    else if (digito2 == 2){Output2 = 18;}
 2e8:	00800484 	movi	r2,18
 2ec:	00000d06 	br	324 <timer_min_inter+0x168>
    else if (digito2 == 3){Output2 = 6;}
 2f0:	00800184 	movi	r2,6
 2f4:	00000b06 	br	324 <timer_min_inter+0x168>
    else if (digito2 == 4){Output2 = 76;}
 2f8:	00801304 	movi	r2,76
 2fc:	00000906 	br	324 <timer_min_inter+0x168>
    else if (digito2 == 5){Output2 = 36;}
 300:	00800904 	movi	r2,36
 304:	00000706 	br	324 <timer_min_inter+0x168>
    else if (digito2 == 6){Output2 = 32;}
 308:	00800804 	movi	r2,32
 30c:	00000506 	br	324 <timer_min_inter+0x168>
    else if (digito2 == 7){Output2 = 15;}
 310:	008003c4 	movi	r2,15
 314:	00000306 	br	324 <timer_min_inter+0x168>
    else if (digito2 == 8){Output2 = 0;}
 318:	0005883a 	mov	r2,zero
 31c:	00000106 	br	324 <timer_min_inter+0x168>
    else if (digito2 == 9){Output2 = 4;}else{Output2 = 127;}
 320:	00800104 	movi	r2,4


    // salida de los displays
    IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_1_BASE,Output2);
 324:	01000134 	movhi	r4,4
 328:	20800035 	stwio	r2,0(r4)
    IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_2_BASE,Output1);
 32c:	00800174 	movhi	r2,5
 330:	10c00035 	stwio	r3,0(r2)

    //fin de la interrupcion
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_MIN_BASE,0);
 334:	00800434 	movhi	r2,16
 338:	10000035 	stwio	zero,0(r2)

}
 33c:	dfc00217 	ldw	ra,8(sp)
 340:	dc400117 	ldw	r17,4(sp)
 344:	dc000017 	ldw	r16,0(sp)
 348:	dec00304 	addi	sp,sp,12
 34c:	f800283a 	ret

00000350 <timer_ms_inter>:
// Funcion encargada del manejo de interrupciones del timer de los milisegundos
static void timer_ms_inter(void *context)
{

    (void) context;
    cont_mseg ++;
 350:	d0a00317 	ldw	r2,-32756(gp)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_S_BASE,0);

}
// Funcion encargada del manejo de interrupciones del timer de los milisegundos
static void timer_ms_inter(void *context)
{
 354:	defffd04 	addi	sp,sp,-12
 358:	dfc00215 	stw	ra,8(sp)
 35c:	dc400115 	stw	r17,4(sp)
 360:	dc000015 	stw	r16,0(sp)

    (void) context;
    cont_mseg ++;
 364:	10800044 	addi	r2,r2,1
    if (cont_mseg > 999){
 368:	00c0f9c4 	movi	r3,999
 36c:	18800216 	blt	r3,r2,378 <timer_ms_inter+0x28>
// Funcion encargada del manejo de interrupciones del timer de los milisegundos
static void timer_ms_inter(void *context)
{

    (void) context;
    cont_mseg ++;
 370:	d0a00315 	stw	r2,-32756(gp)
 374:	00000106 	br	37c <timer_ms_inter+0x2c>
    if (cont_mseg > 999){
        cont_mseg = 0;
 378:	d0200315 	stw	zero,-32756(gp)
    }


    int digito1 = (int)((cont_mseg - (int)cont_mseg % 10)/10)%10;
 37c:	d4200317 	ldw	r16,-32756(gp)
 380:	01400284 	movi	r5,10
 384:	8009883a 	mov	r4,r16
 388:	00008ac0 	call	8ac <__modsi3>
 38c:	8089c83a 	sub	r4,r16,r2
 390:	01400284 	movi	r5,10
 394:	00008280 	call	828 <__divsi3>
 398:	01400284 	movi	r5,10
 39c:	1009883a 	mov	r4,r2
 3a0:	1023883a 	mov	r17,r2
 3a4:	00008ac0 	call	8ac <__modsi3>
    int digito2 = (int)(((cont_mseg - (int)cont_mseg % 10)/10)-digito1)/10;
 3a8:	01400284 	movi	r5,10
 3ac:	8889c83a 	sub	r4,r17,r2
    if (cont_mseg > 999){
        cont_mseg = 0;
    }


    int digito1 = (int)((cont_mseg - (int)cont_mseg % 10)/10)%10;
 3b0:	1021883a 	mov	r16,r2
    int digito2 = (int)(((cont_mseg - (int)cont_mseg % 10)/10)-digito1)/10;
 3b4:	00008280 	call	828 <__divsi3>
 3b8:	00c00044 	movi	r3,1
    unsigned Output1 = 0;
    unsigned Output2 = 0;


    if (digito1 == 0){Output1 = 1;}
 3bc:	80002426 	beq	r16,zero,450 <timer_ms_inter+0x100>
    else if (digito1 == 1){Output1 = 79;}
 3c0:	80c01226 	beq	r16,r3,40c <timer_ms_inter+0xbc>
    else if (digito1 == 2){Output1 = 18;}
 3c4:	00c00084 	movi	r3,2
 3c8:	80c01226 	beq	r16,r3,414 <timer_ms_inter+0xc4>
    else if (digito1 == 3){Output1 = 6;}
 3cc:	00c000c4 	movi	r3,3
 3d0:	80c01226 	beq	r16,r3,41c <timer_ms_inter+0xcc>
    else if (digito1 == 4){Output1 = 76;}
 3d4:	00c00104 	movi	r3,4
 3d8:	80c01226 	beq	r16,r3,424 <timer_ms_inter+0xd4>
    else if (digito1 == 5){Output1 = 36;}
 3dc:	00c00144 	movi	r3,5
 3e0:	80c01226 	beq	r16,r3,42c <timer_ms_inter+0xdc>
    else if (digito1 == 6){Output1 = 32;}
 3e4:	00c00184 	movi	r3,6
 3e8:	80c01226 	beq	r16,r3,434 <timer_ms_inter+0xe4>
    else if (digito1 == 7){Output1 = 15;}
 3ec:	00c001c4 	movi	r3,7
 3f0:	80c01226 	beq	r16,r3,43c <timer_ms_inter+0xec>
    else if (digito1 == 8){Output1 = 0;}
 3f4:	00c00204 	movi	r3,8
 3f8:	80c01226 	beq	r16,r3,444 <timer_ms_inter+0xf4>
    else if (digito1 == 9){Output1 = 4;}else{Output1 = 127;}
 3fc:	00c00244 	movi	r3,9
 400:	80c01226 	beq	r16,r3,44c <timer_ms_inter+0xfc>
 404:	00c01fc4 	movi	r3,127
 408:	00001106 	br	450 <timer_ms_inter+0x100>
    unsigned Output1 = 0;
    unsigned Output2 = 0;


    if (digito1 == 0){Output1 = 1;}
    else if (digito1 == 1){Output1 = 79;}
 40c:	00c013c4 	movi	r3,79
 410:	00000f06 	br	450 <timer_ms_inter+0x100>
    else if (digito1 == 2){Output1 = 18;}
 414:	00c00484 	movi	r3,18
 418:	00000d06 	br	450 <timer_ms_inter+0x100>
    else if (digito1 == 3){Output1 = 6;}
 41c:	00c00184 	movi	r3,6
 420:	00000b06 	br	450 <timer_ms_inter+0x100>
    else if (digito1 == 4){Output1 = 76;}
 424:	00c01304 	movi	r3,76
 428:	00000906 	br	450 <timer_ms_inter+0x100>
    else if (digito1 == 5){Output1 = 36;}
 42c:	00c00904 	movi	r3,36
 430:	00000706 	br	450 <timer_ms_inter+0x100>
    else if (digito1 == 6){Output1 = 32;}
 434:	00c00804 	movi	r3,32
 438:	00000506 	br	450 <timer_ms_inter+0x100>
    else if (digito1 == 7){Output1 = 15;}
 43c:	00c003c4 	movi	r3,15
 440:	00000306 	br	450 <timer_ms_inter+0x100>
    else if (digito1 == 8){Output1 = 0;}
 444:	0007883a 	mov	r3,zero
 448:	00000106 	br	450 <timer_ms_inter+0x100>
    else if (digito1 == 9){Output1 = 4;}else{Output1 = 127;}
 44c:	00c00104 	movi	r3,4
 450:	01000044 	movi	r4,1

    if (digito2 == 0){Output2 = 1;}
 454:	10001326 	beq	r2,zero,4a4 <timer_ms_inter+0x154>
    else if (digito2 == 1){Output2 = 79;}
 458:	11001426 	beq	r2,r4,4ac <timer_ms_inter+0x15c>
    else if (digito2 == 2){Output2 = 18;}
 45c:	01000084 	movi	r4,2
 460:	11001426 	beq	r2,r4,4b4 <timer_ms_inter+0x164>
    else if (digito2 == 3){Output2 = 6;}
 464:	010000c4 	movi	r4,3
 468:	11001426 	beq	r2,r4,4bc <timer_ms_inter+0x16c>
    else if (digito2 == 4){Output2 = 76;}
 46c:	01000104 	movi	r4,4
 470:	11001426 	beq	r2,r4,4c4 <timer_ms_inter+0x174>
    else if (digito2 == 5){Output2 = 36;}
 474:	01000144 	movi	r4,5
 478:	11001426 	beq	r2,r4,4cc <timer_ms_inter+0x17c>
    else if (digito2 == 6){Output2 = 32;}
 47c:	01000184 	movi	r4,6
 480:	11001426 	beq	r2,r4,4d4 <timer_ms_inter+0x184>
    else if (digito2 == 7){Output2 = 15;}
 484:	010001c4 	movi	r4,7
 488:	11001426 	beq	r2,r4,4dc <timer_ms_inter+0x18c>
    else if (digito2 == 8){Output2 = 0;}
 48c:	01000204 	movi	r4,8
 490:	11001426 	beq	r2,r4,4e4 <timer_ms_inter+0x194>
    else if (digito2 == 9){Output2 = 4;}else{Output2 = 127;}
 494:	01000244 	movi	r4,9
 498:	11001426 	beq	r2,r4,4ec <timer_ms_inter+0x19c>
 49c:	00801fc4 	movi	r2,127
 4a0:	00001306 	br	4f0 <timer_ms_inter+0x1a0>
    else if (digito1 == 6){Output1 = 32;}
    else if (digito1 == 7){Output1 = 15;}
    else if (digito1 == 8){Output1 = 0;}
    else if (digito1 == 9){Output1 = 4;}else{Output1 = 127;}

    if (digito2 == 0){Output2 = 1;}
 4a4:	2005883a 	mov	r2,r4
 4a8:	00001106 	br	4f0 <timer_ms_inter+0x1a0>
    else if (digito2 == 1){Output2 = 79;}
 4ac:	008013c4 	movi	r2,79
 4b0:	00000f06 	br	4f0 <timer_ms_inter+0x1a0>
    else if (digito2 == 2){Output2 = 18;}
 4b4:	00800484 	movi	r2,18
 4b8:	00000d06 	br	4f0 <timer_ms_inter+0x1a0>
    else if (digito2 == 3){Output2 = 6;}
 4bc:	00800184 	movi	r2,6
 4c0:	00000b06 	br	4f0 <timer_ms_inter+0x1a0>
    else if (digito2 == 4){Output2 = 76;}
 4c4:	00801304 	movi	r2,76
 4c8:	00000906 	br	4f0 <timer_ms_inter+0x1a0>
    else if (digito2 == 5){Output2 = 36;}
 4cc:	00800904 	movi	r2,36
 4d0:	00000706 	br	4f0 <timer_ms_inter+0x1a0>
    else if (digito2 == 6){Output2 = 32;}
 4d4:	00800804 	movi	r2,32
 4d8:	00000506 	br	4f0 <timer_ms_inter+0x1a0>
    else if (digito2 == 7){Output2 = 15;}
 4dc:	008003c4 	movi	r2,15
 4e0:	00000306 	br	4f0 <timer_ms_inter+0x1a0>
    else if (digito2 == 8){Output2 = 0;}
 4e4:	0005883a 	mov	r2,zero
 4e8:	00000106 	br	4f0 <timer_ms_inter+0x1a0>
    else if (digito2 == 9){Output2 = 4;}else{Output2 = 127;}
 4ec:	00800104 	movi	r2,4

    // salida de los displays
    IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_5_BASE,Output2);
 4f0:	01000474 	movhi	r4,17
 4f4:	20800035 	stwio	r2,0(r4)
    IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_6_BASE,Output1);
 4f8:	008004b4 	movhi	r2,18
 4fc:	10c00035 	stwio	r3,0(r2)

    //fin de la interrupcion
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_MS_BASE,0);
 500:	008000f4 	movhi	r2,3
 504:	10000035 	stwio	zero,0(r2)

}
 508:	dfc00217 	ldw	ra,8(sp)
 50c:	dc400117 	ldw	r17,4(sp)
 510:	dc000017 	ldw	r16,0(sp)
 514:	dec00304 	addi	sp,sp,12
 518:	f800283a 	ret

0000051c <timer_s_inter>:

// Funcion encargada del manejo de interrupciones del timer de los segundos
static void timer_s_inter(void *context)
{
    (void) context;
    cont_seg ++;
 51c:	d0a00417 	ldw	r2,-32752(gp)



// Funcion encargada del manejo de interrupciones del timer de los segundos
static void timer_s_inter(void *context)
{
 520:	defffd04 	addi	sp,sp,-12
 524:	dfc00215 	stw	ra,8(sp)
 528:	dc400115 	stw	r17,4(sp)
 52c:	dc000015 	stw	r16,0(sp)
    (void) context;
    cont_seg ++;
 530:	10800044 	addi	r2,r2,1
    if (cont_seg > 59){
 534:	00c00ec4 	movi	r3,59
 538:	18800216 	blt	r3,r2,544 <timer_s_inter+0x28>

// Funcion encargada del manejo de interrupciones del timer de los segundos
static void timer_s_inter(void *context)
{
    (void) context;
    cont_seg ++;
 53c:	d0a00415 	stw	r2,-32752(gp)
 540:	00000106 	br	548 <timer_s_inter+0x2c>
    if (cont_seg > 59){
        cont_seg = 0;
 544:	d0200415 	stw	zero,-32752(gp)
    }

    int digito1 = cont_seg%10;
 548:	d4600417 	ldw	r17,-32752(gp)
 54c:	01400284 	movi	r5,10
 550:	8809883a 	mov	r4,r17
 554:	00008ac0 	call	8ac <__modsi3>
    int digito2 = (int)((cont_seg - (int)cont_seg % 10)/10);
 558:	01400284 	movi	r5,10
 55c:	8889c83a 	sub	r4,r17,r2
    cont_seg ++;
    if (cont_seg > 59){
        cont_seg = 0;
    }

    int digito1 = cont_seg%10;
 560:	1021883a 	mov	r16,r2
    int digito2 = (int)((cont_seg - (int)cont_seg % 10)/10);
 564:	00008280 	call	828 <__divsi3>
 568:	00c00044 	movi	r3,1
    unsigned Output1 = 0;
    unsigned Output2 = 0;


    if (digito1 == 0){Output1 = 1;}
 56c:	80002426 	beq	r16,zero,600 <timer_s_inter+0xe4>
    else if (digito1 == 1){Output1 = 79;}
 570:	80c01226 	beq	r16,r3,5bc <timer_s_inter+0xa0>
    else if (digito1 == 2){Output1 = 18;}
 574:	00c00084 	movi	r3,2
 578:	80c01226 	beq	r16,r3,5c4 <timer_s_inter+0xa8>
    else if (digito1 == 3){Output1 = 6;}
 57c:	00c000c4 	movi	r3,3
 580:	80c01226 	beq	r16,r3,5cc <timer_s_inter+0xb0>
    else if (digito1 == 4){Output1 = 76;}
 584:	00c00104 	movi	r3,4
 588:	80c01226 	beq	r16,r3,5d4 <timer_s_inter+0xb8>
    else if (digito1 == 5){Output1 = 36;}
 58c:	00c00144 	movi	r3,5
 590:	80c01226 	beq	r16,r3,5dc <timer_s_inter+0xc0>
    else if (digito1 == 6){Output1 = 32;}
 594:	00c00184 	movi	r3,6
 598:	80c01226 	beq	r16,r3,5e4 <timer_s_inter+0xc8>
    else if (digito1 == 7){Output1 = 15;}
 59c:	00c001c4 	movi	r3,7
 5a0:	80c01226 	beq	r16,r3,5ec <timer_s_inter+0xd0>
    else if (digito1 == 8){Output1 = 0;}
 5a4:	00c00204 	movi	r3,8
 5a8:	80c01226 	beq	r16,r3,5f4 <timer_s_inter+0xd8>
    else if (digito1 == 9){Output1 = 4;}else{Output1 = 127;}
 5ac:	00c00244 	movi	r3,9
 5b0:	80c01226 	beq	r16,r3,5fc <timer_s_inter+0xe0>
 5b4:	00c01fc4 	movi	r3,127
 5b8:	00001106 	br	600 <timer_s_inter+0xe4>
    unsigned Output1 = 0;
    unsigned Output2 = 0;


    if (digito1 == 0){Output1 = 1;}
    else if (digito1 == 1){Output1 = 79;}
 5bc:	00c013c4 	movi	r3,79
 5c0:	00000f06 	br	600 <timer_s_inter+0xe4>
    else if (digito1 == 2){Output1 = 18;}
 5c4:	00c00484 	movi	r3,18
 5c8:	00000d06 	br	600 <timer_s_inter+0xe4>
    else if (digito1 == 3){Output1 = 6;}
 5cc:	00c00184 	movi	r3,6
 5d0:	00000b06 	br	600 <timer_s_inter+0xe4>
    else if (digito1 == 4){Output1 = 76;}
 5d4:	00c01304 	movi	r3,76
 5d8:	00000906 	br	600 <timer_s_inter+0xe4>
    else if (digito1 == 5){Output1 = 36;}
 5dc:	00c00904 	movi	r3,36
 5e0:	00000706 	br	600 <timer_s_inter+0xe4>
    else if (digito1 == 6){Output1 = 32;}
 5e4:	00c00804 	movi	r3,32
 5e8:	00000506 	br	600 <timer_s_inter+0xe4>
    else if (digito1 == 7){Output1 = 15;}
 5ec:	00c003c4 	movi	r3,15
 5f0:	00000306 	br	600 <timer_s_inter+0xe4>
    else if (digito1 == 8){Output1 = 0;}
 5f4:	0007883a 	mov	r3,zero
 5f8:	00000106 	br	600 <timer_s_inter+0xe4>
    else if (digito1 == 9){Output1 = 4;}else{Output1 = 127;}
 5fc:	00c00104 	movi	r3,4
 600:	01000044 	movi	r4,1

    if (digito2 == 0){Output2 = 1;}
 604:	10001326 	beq	r2,zero,654 <timer_s_inter+0x138>
    else if (digito2 == 1){Output2 = 79;}
 608:	11001426 	beq	r2,r4,65c <timer_s_inter+0x140>
    else if (digito2 == 2){Output2 = 18;}
 60c:	01000084 	movi	r4,2
 610:	11001426 	beq	r2,r4,664 <timer_s_inter+0x148>
    else if (digito2 == 3){Output2 = 6;}
 614:	010000c4 	movi	r4,3
 618:	11001426 	beq	r2,r4,66c <timer_s_inter+0x150>
    else if (digito2 == 4){Output2 = 76;}
 61c:	01000104 	movi	r4,4
 620:	11001426 	beq	r2,r4,674 <timer_s_inter+0x158>
    else if (digito2 == 5){Output2 = 36;}
 624:	01000144 	movi	r4,5
 628:	11001426 	beq	r2,r4,67c <timer_s_inter+0x160>
    else if (digito2 == 6){Output2 = 32;}
 62c:	01000184 	movi	r4,6
 630:	11001426 	beq	r2,r4,684 <timer_s_inter+0x168>
    else if (digito2 == 7){Output2 = 15;}
 634:	010001c4 	movi	r4,7
 638:	11001426 	beq	r2,r4,68c <timer_s_inter+0x170>
    else if (digito2 == 8){Output2 = 0;}
 63c:	01000204 	movi	r4,8
 640:	11001426 	beq	r2,r4,694 <timer_s_inter+0x178>
    else if (digito2 == 9){Output2 = 4;}else{Output2 = 127;}
 644:	01000244 	movi	r4,9
 648:	11001426 	beq	r2,r4,69c <timer_s_inter+0x180>
 64c:	00801fc4 	movi	r2,127
 650:	00001306 	br	6a0 <timer_s_inter+0x184>
    else if (digito1 == 6){Output1 = 32;}
    else if (digito1 == 7){Output1 = 15;}
    else if (digito1 == 8){Output1 = 0;}
    else if (digito1 == 9){Output1 = 4;}else{Output1 = 127;}

    if (digito2 == 0){Output2 = 1;}
 654:	2005883a 	mov	r2,r4
 658:	00001106 	br	6a0 <timer_s_inter+0x184>
    else if (digito2 == 1){Output2 = 79;}
 65c:	008013c4 	movi	r2,79
 660:	00000f06 	br	6a0 <timer_s_inter+0x184>
    else if (digito2 == 2){Output2 = 18;}
 664:	00800484 	movi	r2,18
 668:	00000d06 	br	6a0 <timer_s_inter+0x184>
    else if (digito2 == 3){Output2 = 6;}
 66c:	00800184 	movi	r2,6
 670:	00000b06 	br	6a0 <timer_s_inter+0x184>
    else if (digito2 == 4){Output2 = 76;}
 674:	00801304 	movi	r2,76
 678:	00000906 	br	6a0 <timer_s_inter+0x184>
    else if (digito2 == 5){Output2 = 36;}
 67c:	00800904 	movi	r2,36
 680:	00000706 	br	6a0 <timer_s_inter+0x184>
    else if (digito2 == 6){Output2 = 32;}
 684:	00800804 	movi	r2,32
 688:	00000506 	br	6a0 <timer_s_inter+0x184>
    else if (digito2 == 7){Output2 = 15;}
 68c:	008003c4 	movi	r2,15
 690:	00000306 	br	6a0 <timer_s_inter+0x184>
    else if (digito2 == 8){Output2 = 0;}
 694:	0005883a 	mov	r2,zero
 698:	00000106 	br	6a0 <timer_s_inter+0x184>
    else if (digito2 == 9){Output2 = 4;}else{Output2 = 127;}
 69c:	00800104 	movi	r2,4


    // salida de los displays
    IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_3_BASE,Output2);
 6a0:	010001b4 	movhi	r4,6
 6a4:	20800035 	stwio	r2,0(r4)
    IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_4_BASE,Output1);
 6a8:	008001f4 	movhi	r2,7
 6ac:	10c00035 	stwio	r3,0(r2)

    //fin de la interrupcion
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_S_BASE,0);
 6b0:	008000b4 	movhi	r2,2
 6b4:	10000035 	stwio	zero,0(r2)

}
 6b8:	dfc00217 	ldw	ra,8(sp)
 6bc:	dc400117 	ldw	r17,4(sp)
 6c0:	dc000017 	ldw	r16,0(sp)
 6c4:	dec00304 	addi	sp,sp,12
 6c8:	f800283a 	ret

000006cc <main>:

}


int main(void)
{ 
 6cc:	defffc04 	addi	sp,sp,-16
    unsigned modo = IORD_ALTERA_AVALON_PIO_DATA(SWITCHS_BASE);
 6d0:	00800234 	movhi	r2,8

}


int main(void)
{ 
 6d4:	dfc00315 	stw	ra,12(sp)
 6d8:	dc400215 	stw	r17,8(sp)
 6dc:	dc000115 	stw	r16,4(sp)
    unsigned modo = IORD_ALTERA_AVALON_PIO_DATA(SWITCHS_BASE);
 6e0:	14000037 	ldwio	r16,0(r2)
    int bandera=0;




            if (modo == 2){
 6e4:	00800084 	movi	r2,2
 6e8:	8080061e 	bne	r16,r2,704 <main+0x38>




                    alt_ic_isr_register(
 6ec:	01800034 	movhi	r6,0
 6f0:	d8000015 	stw	zero,0(sp)
 6f4:	000f883a 	mov	r7,zero
 6f8:	31814704 	addi	r6,r6,1308
 6fc:	000b883a 	mov	r5,zero
 700:	00001c06 	br	774 <main+0xa8>
                              );




            }else if(modo == 1){
 704:	04400044 	movi	r17,1
 708:	8440051e 	bne	r16,r17,720 <main+0x54>

                    alt_ic_isr_register(
 70c:	01800034 	movhi	r6,0
 710:	d8000015 	stw	zero,0(sp)
 714:	000f883a 	mov	r7,zero
 718:	3180d404 	addi	r6,r6,848
 71c:	00001406 	br	770 <main+0xa4>
                        TIMER_MS_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_MS_IRQ,timer_ms_inter,NULL,NULL
                          );

            }else if(modo ==3){
 720:	008000c4 	movi	r2,3
 724:	8080151e 	bne	r16,r2,77c <main+0xb0>

                    alt_ic_isr_register(
 728:	01800034 	movhi	r6,0
 72c:	000f883a 	mov	r7,zero
 730:	31814704 	addi	r6,r6,1308
 734:	000b883a 	mov	r5,zero
 738:	0009883a 	mov	r4,zero
 73c:	d8000015 	stw	zero,0(sp)
 740:	00009dc0 	call	9dc <alt_ic_isr_register>
                            TIMER_S_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_S_IRQ,timer_s_inter,NULL,NULL
                              );

                    alt_ic_isr_register(
 744:	01800034 	movhi	r6,0
 748:	000f883a 	mov	r7,zero
 74c:	3180d404 	addi	r6,r6,848
 750:	d8000015 	stw	zero,0(sp)
 754:	880b883a 	mov	r5,r17
 758:	0009883a 	mov	r4,zero
 75c:	00009dc0 	call	9dc <alt_ic_isr_register>
                            TIMER_MS_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_MS_IRQ,timer_ms_inter,NULL,NULL
                              );

                    alt_ic_isr_register(
 760:	01800034 	movhi	r6,0
 764:	d8000015 	stw	zero,0(sp)
 768:	000f883a 	mov	r7,zero
 76c:	31806f04 	addi	r6,r6,444
 770:	800b883a 	mov	r5,r16
 774:	0009883a 	mov	r4,zero
 778:	00009dc0 	call	9dc <alt_ic_isr_register>
            }


    //}

    IOWR_ALTERA_AVALON_TIMER_CONTROL(
 77c:	00c000b4 	movhi	r3,2
 780:	008000c4 	movi	r2,3
 784:	18c00104 	addi	r3,r3,4
 788:	18800035 	stwio	r2,0(r3)
            TIMER_S_BASE,ALTERA_AVALON_TIMER_CONTROL_ITO_MSK | ALTERA_AVALON_TIMER_CONTROL_CONT_MSK);

    IOWR_ALTERA_AVALON_TIMER_CONTROL(
 78c:	00c000f4 	movhi	r3,3
 790:	18c00104 	addi	r3,r3,4
 794:	18800035 	stwio	r2,0(r3)
            TIMER_MS_BASE,ALTERA_AVALON_TIMER_CONTROL_ITO_MSK | ALTERA_AVALON_TIMER_CONTROL_CONT_MSK);

    IOWR_ALTERA_AVALON_TIMER_CONTROL(
 798:	00c00434 	movhi	r3,16
 79c:	18c00104 	addi	r3,r3,4
 7a0:	18800035 	stwio	r2,0(r3)



  /* Event loop never exits. */
  while (1){
	  int edge_capture = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BASE);
 7a4:	04000274 	movhi	r16,9


int main(void)
{ 
    unsigned modo = IORD_ALTERA_AVALON_PIO_DATA(SWITCHS_BASE);
    int bandera=0;
 7a8:	0005883a 	mov	r2,zero



  /* Event loop never exits. */
  while (1){
	  int edge_capture = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BASE);
 7ac:	84000304 	addi	r16,r16,12
 7b0:	80c00037 	ldwio	r3,0(r16)

	  if (edge_capture != 0)
 7b4:	18000526 	beq	r3,zero,7cc <main+0x100>
	  	  	          {
	  	  		  if(bandera==0){
 7b8:	1000021e 	bne	r2,zero,7c4 <main+0xf8>
	  	  			  bandera = 1;
	  	  			  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BASE, 0x0);
 7bc:	80000035 	stwio	zero,0(r16)
 7c0:	00000e06 	br	7fc <main+0x130>
	  	  		  }else{
	  	  			  bandera = 0;
	  	  			  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BASE, 0x0);
 7c4:	80000035 	stwio	zero,0(r16)
 7c8:	00000106 	br	7d0 <main+0x104>
	  	  		  }


	    	          }

	  if(bandera==0){
 7cc:	10000b1e 	bne	r2,zero,7fc <main+0x130>
		  alt_ic_irq_disable(TIMER_S_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_S_IRQ);
 7d0:	000b883a 	mov	r5,zero
 7d4:	0009883a 	mov	r4,zero
 7d8:	0000a180 	call	a18 <alt_ic_irq_disable>
		  alt_ic_irq_disable(TIMER_MS_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_MS_IRQ);
 7dc:	01400044 	movi	r5,1
 7e0:	0009883a 	mov	r4,zero
 7e4:	0000a180 	call	a18 <alt_ic_irq_disable>
		  alt_ic_irq_disable(TIMER_MIN_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_MIN_IRQ);
 7e8:	014000c4 	movi	r5,3
 7ec:	0009883a 	mov	r4,zero
 7f0:	0000a180 	call	a18 <alt_ic_irq_disable>
 7f4:	0005883a 	mov	r2,zero
 7f8:	003fed06 	br	7b0 <_gp+0xfffe87b0>

	  }else{
		  alt_ic_irq_enable(TIMER_S_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_S_IRQ);
 7fc:	000b883a 	mov	r5,zero
 800:	0009883a 	mov	r4,zero
 804:	00009e00 	call	9e0 <alt_ic_irq_enable>
		  alt_ic_irq_enable(TIMER_MS_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_MS_IRQ);
 808:	01400044 	movi	r5,1
 80c:	0009883a 	mov	r4,zero
 810:	00009e00 	call	9e0 <alt_ic_irq_enable>
		  alt_ic_irq_enable(TIMER_MIN_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_MIN_IRQ);
 814:	014000c4 	movi	r5,3
 818:	0009883a 	mov	r4,zero
 81c:	00009e00 	call	9e0 <alt_ic_irq_enable>
 820:	00800044 	movi	r2,1
 824:	003fe206 	br	7b0 <_gp+0xfffe87b0>

00000828 <__divsi3>:
 828:	20001b16 	blt	r4,zero,898 <__divsi3+0x70>
 82c:	000f883a 	mov	r7,zero
 830:	28001616 	blt	r5,zero,88c <__divsi3+0x64>
 834:	200d883a 	mov	r6,r4
 838:	29001a2e 	bgeu	r5,r4,8a4 <__divsi3+0x7c>
 83c:	00800804 	movi	r2,32
 840:	00c00044 	movi	r3,1
 844:	00000106 	br	84c <__divsi3+0x24>
 848:	10000d26 	beq	r2,zero,880 <__divsi3+0x58>
 84c:	294b883a 	add	r5,r5,r5
 850:	10bfffc4 	addi	r2,r2,-1
 854:	18c7883a 	add	r3,r3,r3
 858:	293ffb36 	bltu	r5,r4,848 <_gp+0xfffe8848>
 85c:	0005883a 	mov	r2,zero
 860:	18000726 	beq	r3,zero,880 <__divsi3+0x58>
 864:	0005883a 	mov	r2,zero
 868:	31400236 	bltu	r6,r5,874 <__divsi3+0x4c>
 86c:	314dc83a 	sub	r6,r6,r5
 870:	10c4b03a 	or	r2,r2,r3
 874:	1806d07a 	srli	r3,r3,1
 878:	280ad07a 	srli	r5,r5,1
 87c:	183ffa1e 	bne	r3,zero,868 <_gp+0xfffe8868>
 880:	38000126 	beq	r7,zero,888 <__divsi3+0x60>
 884:	0085c83a 	sub	r2,zero,r2
 888:	f800283a 	ret
 88c:	014bc83a 	sub	r5,zero,r5
 890:	39c0005c 	xori	r7,r7,1
 894:	003fe706 	br	834 <_gp+0xfffe8834>
 898:	0109c83a 	sub	r4,zero,r4
 89c:	01c00044 	movi	r7,1
 8a0:	003fe306 	br	830 <_gp+0xfffe8830>
 8a4:	00c00044 	movi	r3,1
 8a8:	003fee06 	br	864 <_gp+0xfffe8864>

000008ac <__modsi3>:
 8ac:	20001716 	blt	r4,zero,90c <__modsi3+0x60>
 8b0:	000f883a 	mov	r7,zero
 8b4:	2005883a 	mov	r2,r4
 8b8:	28001216 	blt	r5,zero,904 <__modsi3+0x58>
 8bc:	2900162e 	bgeu	r5,r4,918 <__modsi3+0x6c>
 8c0:	01800804 	movi	r6,32
 8c4:	00c00044 	movi	r3,1
 8c8:	00000106 	br	8d0 <__modsi3+0x24>
 8cc:	30000a26 	beq	r6,zero,8f8 <__modsi3+0x4c>
 8d0:	294b883a 	add	r5,r5,r5
 8d4:	31bfffc4 	addi	r6,r6,-1
 8d8:	18c7883a 	add	r3,r3,r3
 8dc:	293ffb36 	bltu	r5,r4,8cc <_gp+0xfffe88cc>
 8e0:	18000526 	beq	r3,zero,8f8 <__modsi3+0x4c>
 8e4:	1806d07a 	srli	r3,r3,1
 8e8:	11400136 	bltu	r2,r5,8f0 <__modsi3+0x44>
 8ec:	1145c83a 	sub	r2,r2,r5
 8f0:	280ad07a 	srli	r5,r5,1
 8f4:	183ffb1e 	bne	r3,zero,8e4 <_gp+0xfffe88e4>
 8f8:	38000126 	beq	r7,zero,900 <__modsi3+0x54>
 8fc:	0085c83a 	sub	r2,zero,r2
 900:	f800283a 	ret
 904:	014bc83a 	sub	r5,zero,r5
 908:	003fec06 	br	8bc <_gp+0xfffe88bc>
 90c:	0109c83a 	sub	r4,zero,r4
 910:	01c00044 	movi	r7,1
 914:	003fe706 	br	8b4 <_gp+0xfffe88b4>
 918:	00c00044 	movi	r3,1
 91c:	003ff106 	br	8e4 <_gp+0xfffe88e4>

00000920 <__udivsi3>:
 920:	200d883a 	mov	r6,r4
 924:	2900152e 	bgeu	r5,r4,97c <__udivsi3+0x5c>
 928:	28001416 	blt	r5,zero,97c <__udivsi3+0x5c>
 92c:	00800804 	movi	r2,32
 930:	00c00044 	movi	r3,1
 934:	00000206 	br	940 <__udivsi3+0x20>
 938:	10000e26 	beq	r2,zero,974 <__udivsi3+0x54>
 93c:	28000516 	blt	r5,zero,954 <__udivsi3+0x34>
 940:	294b883a 	add	r5,r5,r5
 944:	10bfffc4 	addi	r2,r2,-1
 948:	18c7883a 	add	r3,r3,r3
 94c:	293ffa36 	bltu	r5,r4,938 <_gp+0xfffe8938>
 950:	18000826 	beq	r3,zero,974 <__udivsi3+0x54>
 954:	0005883a 	mov	r2,zero
 958:	31400236 	bltu	r6,r5,964 <__udivsi3+0x44>
 95c:	314dc83a 	sub	r6,r6,r5
 960:	10c4b03a 	or	r2,r2,r3
 964:	1806d07a 	srli	r3,r3,1
 968:	280ad07a 	srli	r5,r5,1
 96c:	183ffa1e 	bne	r3,zero,958 <_gp+0xfffe8958>
 970:	f800283a 	ret
 974:	0005883a 	mov	r2,zero
 978:	f800283a 	ret
 97c:	00c00044 	movi	r3,1
 980:	003ff406 	br	954 <_gp+0xfffe8954>

00000984 <__umodsi3>:
 984:	2005883a 	mov	r2,r4
 988:	2900122e 	bgeu	r5,r4,9d4 <__umodsi3+0x50>
 98c:	28001116 	blt	r5,zero,9d4 <__umodsi3+0x50>
 990:	01800804 	movi	r6,32
 994:	00c00044 	movi	r3,1
 998:	00000206 	br	9a4 <__umodsi3+0x20>
 99c:	30000c26 	beq	r6,zero,9d0 <__umodsi3+0x4c>
 9a0:	28000516 	blt	r5,zero,9b8 <__umodsi3+0x34>
 9a4:	294b883a 	add	r5,r5,r5
 9a8:	31bfffc4 	addi	r6,r6,-1
 9ac:	18c7883a 	add	r3,r3,r3
 9b0:	293ffa36 	bltu	r5,r4,99c <_gp+0xfffe899c>
 9b4:	18000626 	beq	r3,zero,9d0 <__umodsi3+0x4c>
 9b8:	1806d07a 	srli	r3,r3,1
 9bc:	11400136 	bltu	r2,r5,9c4 <__umodsi3+0x40>
 9c0:	1145c83a 	sub	r2,r2,r5
 9c4:	280ad07a 	srli	r5,r5,1
 9c8:	183ffb1e 	bne	r3,zero,9b8 <_gp+0xfffe89b8>
 9cc:	f800283a 	ret
 9d0:	f800283a 	ret
 9d4:	00c00044 	movi	r3,1
 9d8:	003ff706 	br	9b8 <_gp+0xfffe89b8>

000009dc <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 9dc:	0000a681 	jmpi	a68 <alt_iic_isr_register>

000009e0 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 9e0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 9e4:	00bfff84 	movi	r2,-2
 9e8:	2084703a 	and	r2,r4,r2
 9ec:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 9f0:	00c00044 	movi	r3,1
 9f4:	d0a00517 	ldw	r2,-32748(gp)
 9f8:	194a983a 	sll	r5,r3,r5
 9fc:	288ab03a 	or	r5,r5,r2
 a00:	d1600515 	stw	r5,-32748(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 a04:	d0a00517 	ldw	r2,-32748(gp)
 a08:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a0c:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 a10:	0005883a 	mov	r2,zero
 a14:	f800283a 	ret

00000a18 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a18:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a1c:	00bfff84 	movi	r2,-2
 a20:	2084703a 	and	r2,r4,r2
 a24:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
 a28:	00ffff84 	movi	r3,-2
 a2c:	d0a00517 	ldw	r2,-32748(gp)
 a30:	194a183a 	rol	r5,r3,r5
 a34:	288a703a 	and	r5,r5,r2
 a38:	d1600515 	stw	r5,-32748(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 a3c:	d0a00517 	ldw	r2,-32748(gp)
 a40:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a44:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 a48:	0005883a 	mov	r2,zero
 a4c:	f800283a 	ret

00000a50 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 a50:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
 a54:	00800044 	movi	r2,1
 a58:	1144983a 	sll	r2,r2,r5
 a5c:	10c4703a 	and	r2,r2,r3
}
 a60:	1004c03a 	cmpne	r2,r2,zero
 a64:	f800283a 	ret

00000a68 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 a68:	00c007c4 	movi	r3,31
 a6c:	19401616 	blt	r3,r5,ac8 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 a70:	defffe04 	addi	sp,sp,-8
 a74:	dfc00115 	stw	ra,4(sp)
 a78:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a7c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a80:	00ffff84 	movi	r3,-2
 a84:	80c6703a 	and	r3,r16,r3
 a88:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 a8c:	280490fa 	slli	r2,r5,3
 a90:	00c00074 	movhi	r3,1
 a94:	18c00a04 	addi	r3,r3,40
 a98:	1885883a 	add	r2,r3,r2
 a9c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
 aa0:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 aa4:	30000226 	beq	r6,zero,ab0 <alt_iic_isr_register+0x48>
 aa8:	00009e00 	call	9e0 <alt_ic_irq_enable>
 aac:	00000106 	br	ab4 <alt_iic_isr_register+0x4c>
 ab0:	0000a180 	call	a18 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 ab4:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 ab8:	dfc00117 	ldw	ra,4(sp)
 abc:	dc000017 	ldw	r16,0(sp)
 ac0:	dec00204 	addi	sp,sp,8
 ac4:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
 ac8:	00bffa84 	movi	r2,-22
 acc:	f800283a 	ret

00000ad0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 ad0:	deffff04 	addi	sp,sp,-4
 ad4:	01000074 	movhi	r4,1
 ad8:	01400034 	movhi	r5,0
 adc:	dfc00015 	stw	ra,0(sp)
 ae0:	21000004 	addi	r4,r4,0
 ae4:	29432104 	addi	r5,r5,3204

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 ae8:	2140061e 	bne	r4,r5,b04 <alt_load+0x34>
 aec:	01000034 	movhi	r4,0
 af0:	01400034 	movhi	r5,0
 af4:	21000804 	addi	r4,r4,32
 af8:	29400804 	addi	r5,r5,32
 afc:	2140121e 	bne	r4,r5,b48 <alt_load+0x78>
 b00:	00000b06 	br	b30 <alt_load+0x60>
 b04:	00c00074 	movhi	r3,1
 b08:	18c00104 	addi	r3,r3,4
 b0c:	1907c83a 	sub	r3,r3,r4
 b10:	0005883a 	mov	r2,zero
  {
    while( to != end )
 b14:	10fff526 	beq	r2,r3,aec <_gp+0xfffe8aec>
    {
      *to++ = *from++;
 b18:	114f883a 	add	r7,r2,r5
 b1c:	39c00017 	ldw	r7,0(r7)
 b20:	110d883a 	add	r6,r2,r4
 b24:	10800104 	addi	r2,r2,4
 b28:	31c00015 	stw	r7,0(r6)
 b2c:	003ff906 	br	b14 <_gp+0xfffe8b14>
 b30:	01000074 	movhi	r4,1
 b34:	01400034 	movhi	r5,0
 b38:	21000004 	addi	r4,r4,0
 b3c:	29432104 	addi	r5,r5,3204

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 b40:	2140101e 	bne	r4,r5,b84 <alt_load+0xb4>
 b44:	00000b06 	br	b74 <alt_load+0xa4>
 b48:	00c00034 	movhi	r3,0
 b4c:	18c06004 	addi	r3,r3,384
 b50:	1907c83a 	sub	r3,r3,r4
 b54:	0005883a 	mov	r2,zero
  {
    while( to != end )
 b58:	10fff526 	beq	r2,r3,b30 <_gp+0xfffe8b30>
    {
      *to++ = *from++;
 b5c:	114f883a 	add	r7,r2,r5
 b60:	39c00017 	ldw	r7,0(r7)
 b64:	110d883a 	add	r6,r2,r4
 b68:	10800104 	addi	r2,r2,4
 b6c:	31c00015 	stw	r7,0(r6)
 b70:	003ff906 	br	b58 <_gp+0xfffe8b58>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 b74:	0000c000 	call	c00 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 b78:	dfc00017 	ldw	ra,0(sp)
 b7c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 b80:	0000c041 	jmpi	c04 <alt_icache_flush_all>
 b84:	00c00074 	movhi	r3,1
 b88:	18c00004 	addi	r3,r3,0
 b8c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 b90:	0005883a 	mov	r2,zero
  {
    while( to != end )
 b94:	18bff726 	beq	r3,r2,b74 <_gp+0xfffe8b74>
    {
      *to++ = *from++;
 b98:	114f883a 	add	r7,r2,r5
 b9c:	39c00017 	ldw	r7,0(r7)
 ba0:	110d883a 	add	r6,r2,r4
 ba4:	10800104 	addi	r2,r2,4
 ba8:	31c00015 	stw	r7,0(r6)
 bac:	003ff906 	br	b94 <_gp+0xfffe8b94>

00000bb0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 bb0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 bb4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 bb8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 bbc:	0000bdc0 	call	bdc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 bc0:	0000bfc0 	call	bfc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 bc4:	d1a00617 	ldw	r6,-32744(gp)
 bc8:	d1600717 	ldw	r5,-32740(gp)
 bcc:	d1200817 	ldw	r4,-32736(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 bd0:	dfc00017 	ldw	ra,0(sp)
 bd4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 bd8:	00006cc1 	jmpi	6cc <main>

00000bdc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 bdc:	deffff04 	addi	sp,sp,-4
 be0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 be4:	0000c7c0 	call	c7c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 be8:	00800044 	movi	r2,1
 bec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 bf0:	dfc00017 	ldw	ra,0(sp)
 bf4:	dec00104 	addi	sp,sp,4
 bf8:	f800283a 	ret

00000bfc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 bfc:	f800283a 	ret

00000c00 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 c00:	f800283a 	ret

00000c04 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 c04:	f800283a 	ret

00000c08 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
 c08:	213ffe84 	addi	r4,r4,-6
 c0c:	008003c4 	movi	r2,15
 c10:	11001636 	bltu	r2,r4,c6c <alt_exception_cause_generated_bad_addr+0x64>
 c14:	200890ba 	slli	r4,r4,2
 c18:	00800034 	movhi	r2,0
 c1c:	10830b04 	addi	r2,r2,3116
 c20:	2089883a 	add	r4,r4,r2
 c24:	20800017 	ldw	r2,0(r4)
 c28:	1000683a 	jmp	r2
 c2c:	00000c74 	movhi	zero,49
 c30:	00000c74 	movhi	zero,49
 c34:	00000c6c 	andhi	zero,zero,49
 c38:	00000c6c 	andhi	zero,zero,49
 c3c:	00000c6c 	andhi	zero,zero,49
 c40:	00000c74 	movhi	zero,49
 c44:	00000c6c 	andhi	zero,zero,49
 c48:	00000c6c 	andhi	zero,zero,49
 c4c:	00000c74 	movhi	zero,49
 c50:	00000c74 	movhi	zero,49
 c54:	00000c6c 	andhi	zero,zero,49
 c58:	00000c74 	movhi	zero,49
 c5c:	00000c6c 	andhi	zero,zero,49
 c60:	00000c6c 	andhi	zero,zero,49
 c64:	00000c6c 	andhi	zero,zero,49
 c68:	00000c74 	movhi	zero,49
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 c6c:	0005883a 	mov	r2,zero
 c70:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 c74:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
 c78:	f800283a 	ret

00000c7c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 c7c:	000170fa 	wrctl	ienable,zero
 c80:	f800283a 	ret
