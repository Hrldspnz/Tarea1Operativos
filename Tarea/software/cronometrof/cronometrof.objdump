
cronometrof.elf:     file format elf32-littlenios2
cronometrof.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000180

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000bf4 memsz 0x00000bf4 flags r-x
    LOAD off    0x00002000 vaddr 0x00010000 paddr 0x00000c14 align 2**12
         filesz 0x00000004 memsz 0x0000012c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000a94  00000180  00000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  00010000  00000c18  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000004  00010000  00000c14  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  00010004  00000c18  00002004  2**2
                  ALLOC, SMALL_DATA
  6 .ROM          00000000  00000c18  00000c18  00002004  2**0
                  CONTENTS
  7 .RAM          00000000  0001012c  0001012c  00002004  2**0
                  CONTENTS
  8 .comment      0000002c  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000238  00000000  00000000  00002030  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00007495  00000000  00000000  00002268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001b37  00000000  00000000  000096fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001f06  00000000  00000000  0000b234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000002dc  00000000  00000000  0000d13c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000123a  00000000  00000000  0000d418  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00001030  00000000  00000000  0000e652  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0000f684  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000001f8  00000000  00000000  0000f698  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00010971  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00010974  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00010977  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00010978  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000004  00000000  00000000  00010979  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000004  00000000  00000000  0001097d  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000004  00000000  00000000  00010981  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  00010985  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000001e  00000000  00000000  0001098d  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006cec5  00000000  00000000  000109ab  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000180 l    d  .text	00000000 .text
00010000 l    d  .rodata	00000000 .rodata
00010000 l    d  .rwdata	00000000 .rwdata
00010004 l    d  .bss	00000000 .bss
00000c18 l    d  .ROM	00000000 .ROM
0001012c l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cronometrof_bsp//obj/HAL/src/crt0.o
000001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000001bc l     F .text	00000194 timer_min_inter
00010008 l     O .bss	00000004 cont_min
00000350 l     F .text	000001d4 timer_ms_inter
0001000c l     O .bss	00000004 cont_mseg
00000524 l     F .text	000001b0 timer_s_inter
00010010 l     O .bss	00000004 cont_seg
000006d4 l     F .text	00000018 handle_button_interrupts
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00010028 g     O .bss	00000004 alt_instruction_exception_handler
00000b44 g     F .text	0000002c alt_main
0001002c g     O .bss	00000100 alt_irq
00000c14 g       *ABS*	00000000 __flash_rwdata_start
00000c0c g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00010014 g     O .bss	00000004 edge_capture
00000020 g       *ABS*	00000000 __flash_exceptions_start
00010020 g     O .bss	00000004 alt_argv
00018000 g       *ABS*	00000000 _gp
00000b9c g     F .text	00000070 alt_exception_cause_generated_bad_addr
000008dc g     F .text	00000064 .hidden __udivsi3
0001012c g       *ABS*	00000000 __bss_end
00000a28 g     F .text	00000068 alt_iic_isr_register
00000000 g       *ABS*	00000000 __alt_mem_ROM
00000a10 g     F .text	00000018 alt_ic_irq_enabled
00010018 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000060 alt_irq_handler
00000b94 g     F .text	00000004 alt_dcache_flush_all
00010004 g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __ram_rodata_end
00000940 g     F .text	0000005c .hidden __umodsi3
0001012c g       *ABS*	00000000 end
0000015c g     F .exceptions	00000024 alt_instruction_exception_entry
00011000 g       *ABS*	00000000 __alt_stack_pointer
00000180 g     F .text	0000003c _start
00000b90 g     F .text	00000004 alt_sys_init
00010000 g       *ABS*	00000000 __ram_rwdata_start
00010000 g       *ABS*	00000000 __ram_rodata_start
0001012c g       *ABS*	00000000 __alt_stack_base
00010004 g     O .bss	00000004 init
00010004 g       *ABS*	00000000 __bss_start
000006ec g     F .text	000000fc main
00010000 g       *ABS*	00000000 __alt_mem_RAM
0001001c g     O .bss	00000004 alt_envp
000007e8 g     F .text	00000080 .hidden __divsi3
00000c14 g       *ABS*	00000000 __flash_rodata_start
00000b70 g     F .text	00000020 alt_irq_init
00010024 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000099c g     F .text	00000004 alt_ic_isr_register
00010004 g       *ABS*	00000000 _edata
0001012c g       *ABS*	00000000 _end
00000180 g       *ABS*	00000000 __ram_exceptions_end
000009d8 g     F .text	00000038 alt_ic_irq_disable
00000868 g     F .text	00000074 .hidden __modsi3
00011000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000000c g       .entry	00000000 _exit
00000b98 g     F .text	00000004 alt_icache_flush_all
00010000 g     O .rwdata	00000004 alt_priority_mask
000009a0 g     F .text	00000038 alt_ic_irq_enable
00000a90 g     F .text	000000b4 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406014 	ori	at,at,384
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	000015c0 	call	15c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 10c:	04000074 	movhi	r16,1
 110:	84000b04 	addi	r16,r16,44
    i = 0;
 114:	0005883a 	mov	r2,zero
    mask = 1;
 118:	00c00044 	movi	r3,1
      if (active & mask)
 11c:	20ca703a 	and	r5,r4,r3
 120:	28000b26 	beq	r5,zero,150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context); 
 124:	100490fa 	slli	r2,r2,3
 128:	8085883a 	add	r2,r16,r2
 12c:	10c00017 	ldw	r3,0(r2)
 130:	11000117 	ldw	r4,4(r2)
 134:	183ee83a 	callr	r3
 138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 13c:	203ff51e 	bne	r4,zero,114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 140:	dfc00117 	ldw	ra,4(sp)
 144:	dc000017 	ldw	r16,0(sp)
 148:	dec00204 	addi	sp,sp,8
 14c:	f800283a 	ret
      mask <<= 1;
 150:	1806907a 	slli	r3,r3,1
      i++;
 154:	10800044 	addi	r2,r2,1
      if (active & mask)
 158:	003ff006 	br	11c <alt_irq_handler+0x20>

0000015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 15c:	d0a00a17 	ldw	r2,-32728(gp)
{
 160:	200b883a 	mov	r5,r4
  if(alt_instruction_exception_handler) {
 164:	10000326 	beq	r2,zero,174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 168:	000d883a 	mov	r6,zero
 16c:	013fffc4 	movi	r4,-1
 170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 178:	0005883a 	mov	r2,zero
 17c:	f800283a 	ret

Disassembly of section .text:

00000180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 180:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
 184:	dec40014 	ori	sp,sp,4096
    movhi gp, %hi(_gp)
 188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
 18c:	d6a00014 	ori	gp,gp,32768
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
 194:	10800114 	ori	r2,r2,4

    movhi r3, %hi(__bss_end)
 198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
 19c:	18c04b14 	ori	r3,r3,300

    beq r2, r3, 1f
 1a0:	10c00326 	beq	r2,r3,1b0 <_start+0x30>

0:
    stw zero, (r2)
 1a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1ac:	10fffd36 	bltu	r2,r3,1a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1b0:	0000a900 	call	a90 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1b4:	0000b440 	call	b44 <alt_main>

000001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1b8:	003fff06 	br	1b8 <alt_after_alt_main>

000001bc <timer_min_inter>:
}
// Funcion encargada del manejo de interrupciones del timer de los minutos
static void timer_min_inter(void *context)
{
    (void) context;
    cont_min ++;
 1bc:	d0a00217 	ldw	r2,-32760(gp)
{
 1c0:	defffe04 	addi	sp,sp,-8
 1c4:	dfc00115 	stw	ra,4(sp)
    cont_min ++;
 1c8:	10800044 	addi	r2,r2,1
{
 1cc:	dc000015 	stw	r16,0(sp)
    if (cont_min > 59){
 1d0:	10c00f08 	cmpgei	r3,r2,60
 1d4:	1800381e 	bne	r3,zero,2b8 <timer_min_inter+0xfc>
    cont_min ++;
 1d8:	d0a00215 	stw	r2,-32760(gp)
        cont_min = 0;
    }

    int digito1 = cont_min%10;
 1dc:	d1200217 	ldw	r4,-32760(gp)
 1e0:	01400284 	movi	r5,10
 1e4:	00008680 	call	868 <__modsi3>
    int digito2 = (int)((cont_min - (int)cont_min % 10)/10);
 1e8:	d1200217 	ldw	r4,-32760(gp)
    int digito1 = cont_min%10;
 1ec:	1021883a 	mov	r16,r2
    int digito2 = (int)((cont_min - (int)cont_min % 10)/10);
 1f0:	01400284 	movi	r5,10
 1f4:	2089c83a 	sub	r4,r4,r2
 1f8:	00007e80 	call	7e8 <__divsi3>
    unsigned Output1 = 0;
    unsigned Output2 = 0;


    if (digito1 == 0){Output1 = 1;}
 1fc:	80003026 	beq	r16,zero,2c0 <timer_min_inter+0x104>
    else if (digito1 == 1){Output1 = 79;}
 200:	80c00060 	cmpeqi	r3,r16,1
 204:	1800301e 	bne	r3,zero,2c8 <timer_min_inter+0x10c>
    else if (digito1 == 2){Output1 = 18;}
 208:	80c000a0 	cmpeqi	r3,r16,2
 20c:	1800301e 	bne	r3,zero,2d0 <timer_min_inter+0x114>
    else if (digito1 == 3){Output1 = 6;}
 210:	80c000e0 	cmpeqi	r3,r16,3
 214:	1800301e 	bne	r3,zero,2d8 <timer_min_inter+0x11c>
    else if (digito1 == 4){Output1 = 76;}
 218:	80c00120 	cmpeqi	r3,r16,4
 21c:	1800301e 	bne	r3,zero,2e0 <timer_min_inter+0x124>
    else if (digito1 == 5){Output1 = 36;}
 220:	80c00160 	cmpeqi	r3,r16,5
 224:	1800301e 	bne	r3,zero,2e8 <timer_min_inter+0x12c>
    else if (digito1 == 6){Output1 = 32;}
 228:	80c001a0 	cmpeqi	r3,r16,6
 22c:	1800301e 	bne	r3,zero,2f0 <timer_min_inter+0x134>
    else if (digito1 == 7){Output1 = 15;}
 230:	80c001e0 	cmpeqi	r3,r16,7
 234:	1800301e 	bne	r3,zero,2f8 <timer_min_inter+0x13c>
    unsigned Output1 = 0;
 238:	80c00260 	cmpeqi	r3,r16,9
 23c:	180690ba 	slli	r3,r3,2
    else if (digito1 == 8){Output1 = 0;}
    else if (digito1 == 9){Output1 = 4;}else{Output2 = 127;}

    if (digito2 == 0){Output2 = 1;}
 240:	10002f26 	beq	r2,zero,300 <timer_min_inter+0x144>
    else if (digito2 == 1){Output2 = 79;}
 244:	11000060 	cmpeqi	r4,r2,1
 248:	20002f1e 	bne	r4,zero,308 <timer_min_inter+0x14c>
    else if (digito2 == 2){Output2 = 18;}
 24c:	110000a0 	cmpeqi	r4,r2,2
 250:	20002f1e 	bne	r4,zero,310 <timer_min_inter+0x154>
    else if (digito2 == 3){Output2 = 6;}
 254:	110000e0 	cmpeqi	r4,r2,3
 258:	20002f1e 	bne	r4,zero,318 <timer_min_inter+0x15c>
    else if (digito2 == 4){Output2 = 76;}
 25c:	11000120 	cmpeqi	r4,r2,4
 260:	20002f1e 	bne	r4,zero,320 <timer_min_inter+0x164>
    else if (digito2 == 5){Output2 = 36;}
 264:	11000160 	cmpeqi	r4,r2,5
 268:	20002f1e 	bne	r4,zero,328 <timer_min_inter+0x16c>
    else if (digito2 == 6){Output2 = 32;}
 26c:	110001a0 	cmpeqi	r4,r2,6
 270:	20002f1e 	bne	r4,zero,330 <timer_min_inter+0x174>
    else if (digito2 == 7){Output2 = 15;}
 274:	110001e0 	cmpeqi	r4,r2,7
 278:	20002f1e 	bne	r4,zero,338 <timer_min_inter+0x17c>
    else if (digito2 == 8){Output2 = 0;}
 27c:	11000220 	cmpeqi	r4,r2,8
 280:	20002f1e 	bne	r4,zero,340 <timer_min_inter+0x184>
    else if (digito2 == 9){Output2 = 4;}else{Output2 = 127;}
 284:	10800260 	cmpeqi	r2,r2,9
 288:	10002f1e 	bne	r2,zero,348 <timer_min_inter+0x18c>
 28c:	00801fc4 	movi	r2,127


    // salida de los displays
    IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_1_BASE,Output2);
 290:	01000134 	movhi	r4,4
 294:	20800035 	stwio	r2,0(r4)
    IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_2_BASE,Output1);
 298:	00800174 	movhi	r2,5
 29c:	10c00035 	stwio	r3,0(r2)

    //fin de la interrupcion
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_MIN_BASE,0);
 2a0:	00800434 	movhi	r2,16
 2a4:	10000035 	stwio	zero,0(r2)

}
 2a8:	dfc00117 	ldw	ra,4(sp)
 2ac:	dc000017 	ldw	r16,0(sp)
 2b0:	dec00204 	addi	sp,sp,8
 2b4:	f800283a 	ret
        cont_min = 0;
 2b8:	d0200215 	stw	zero,-32760(gp)
 2bc:	003fc706 	br	1dc <timer_min_inter+0x20>
    if (digito1 == 0){Output1 = 1;}
 2c0:	00c00044 	movi	r3,1
 2c4:	003fde06 	br	240 <timer_min_inter+0x84>
    else if (digito1 == 1){Output1 = 79;}
 2c8:	00c013c4 	movi	r3,79
 2cc:	003fdc06 	br	240 <timer_min_inter+0x84>
    else if (digito1 == 2){Output1 = 18;}
 2d0:	00c00484 	movi	r3,18
 2d4:	003fda06 	br	240 <timer_min_inter+0x84>
    else if (digito1 == 3){Output1 = 6;}
 2d8:	00c00184 	movi	r3,6
 2dc:	003fd806 	br	240 <timer_min_inter+0x84>
    else if (digito1 == 4){Output1 = 76;}
 2e0:	00c01304 	movi	r3,76
 2e4:	003fd606 	br	240 <timer_min_inter+0x84>
    else if (digito1 == 5){Output1 = 36;}
 2e8:	00c00904 	movi	r3,36
 2ec:	003fd406 	br	240 <timer_min_inter+0x84>
    else if (digito1 == 6){Output1 = 32;}
 2f0:	00c00804 	movi	r3,32
 2f4:	003fd206 	br	240 <timer_min_inter+0x84>
    else if (digito1 == 7){Output1 = 15;}
 2f8:	00c003c4 	movi	r3,15
 2fc:	003fd006 	br	240 <timer_min_inter+0x84>
    if (digito2 == 0){Output2 = 1;}
 300:	00800044 	movi	r2,1
 304:	003fe206 	br	290 <timer_min_inter+0xd4>
    else if (digito2 == 1){Output2 = 79;}
 308:	008013c4 	movi	r2,79
 30c:	003fe006 	br	290 <timer_min_inter+0xd4>
    else if (digito2 == 2){Output2 = 18;}
 310:	00800484 	movi	r2,18
 314:	003fde06 	br	290 <timer_min_inter+0xd4>
    else if (digito2 == 3){Output2 = 6;}
 318:	00800184 	movi	r2,6
 31c:	003fdc06 	br	290 <timer_min_inter+0xd4>
    else if (digito2 == 4){Output2 = 76;}
 320:	00801304 	movi	r2,76
 324:	003fda06 	br	290 <timer_min_inter+0xd4>
    else if (digito2 == 5){Output2 = 36;}
 328:	00800904 	movi	r2,36
 32c:	003fd806 	br	290 <timer_min_inter+0xd4>
    else if (digito2 == 6){Output2 = 32;}
 330:	00800804 	movi	r2,32
 334:	003fd606 	br	290 <timer_min_inter+0xd4>
    else if (digito2 == 7){Output2 = 15;}
 338:	008003c4 	movi	r2,15
 33c:	003fd406 	br	290 <timer_min_inter+0xd4>
    else if (digito2 == 8){Output2 = 0;}
 340:	0005883a 	mov	r2,zero
 344:	003fd206 	br	290 <timer_min_inter+0xd4>
    else if (digito2 == 9){Output2 = 4;}else{Output2 = 127;}
 348:	00800104 	movi	r2,4
 34c:	003fd006 	br	290 <timer_min_inter+0xd4>

00000350 <timer_ms_inter>:
    cont_mseg ++;
 350:	d0a00317 	ldw	r2,-32756(gp)
{
 354:	defffd04 	addi	sp,sp,-12
 358:	dfc00215 	stw	ra,8(sp)
    cont_mseg ++;
 35c:	10800044 	addi	r2,r2,1
{
 360:	dc400115 	stw	r17,4(sp)
 364:	dc000015 	stw	r16,0(sp)
    if (cont_mseg > 999){
 368:	10c0fa08 	cmpgei	r3,r2,1000
 36c:	1800431e 	bne	r3,zero,47c <timer_ms_inter+0x12c>
    cont_mseg ++;
 370:	d0a00315 	stw	r2,-32756(gp)
    int digito1 = (int)((cont_mseg - (int)cont_mseg % 10)/10)%10;
 374:	d1200317 	ldw	r4,-32756(gp)
 378:	01400284 	movi	r5,10
 37c:	00008680 	call	868 <__modsi3>
 380:	d1200317 	ldw	r4,-32756(gp)
 384:	01400284 	movi	r5,10
 388:	2089c83a 	sub	r4,r4,r2
 38c:	00007e80 	call	7e8 <__divsi3>
 390:	01400284 	movi	r5,10
 394:	1009883a 	mov	r4,r2
 398:	1023883a 	mov	r17,r2
 39c:	00008680 	call	868 <__modsi3>
 3a0:	1021883a 	mov	r16,r2
    int digito2 = (int)(((cont_mseg - (int)cont_mseg % 10)/10)-digito1)/10;
 3a4:	01400284 	movi	r5,10
 3a8:	8889c83a 	sub	r4,r17,r2
 3ac:	00007e80 	call	7e8 <__divsi3>
    if (digito1 == 0){Output1 = 1;}
 3b0:	80003426 	beq	r16,zero,484 <timer_ms_inter+0x134>
    else if (digito1 == 1){Output1 = 79;}
 3b4:	80c00060 	cmpeqi	r3,r16,1
 3b8:	1800341e 	bne	r3,zero,48c <timer_ms_inter+0x13c>
    else if (digito1 == 2){Output1 = 18;}
 3bc:	80c000a0 	cmpeqi	r3,r16,2
 3c0:	1800341e 	bne	r3,zero,494 <timer_ms_inter+0x144>
    else if (digito1 == 3){Output1 = 6;}
 3c4:	80c000e0 	cmpeqi	r3,r16,3
 3c8:	1800341e 	bne	r3,zero,49c <timer_ms_inter+0x14c>
    else if (digito1 == 4){Output1 = 76;}
 3cc:	80c00120 	cmpeqi	r3,r16,4
 3d0:	1800341e 	bne	r3,zero,4a4 <timer_ms_inter+0x154>
    else if (digito1 == 5){Output1 = 36;}
 3d4:	80c00160 	cmpeqi	r3,r16,5
 3d8:	1800341e 	bne	r3,zero,4ac <timer_ms_inter+0x15c>
    else if (digito1 == 6){Output1 = 32;}
 3dc:	80c001a0 	cmpeqi	r3,r16,6
 3e0:	1800341e 	bne	r3,zero,4b4 <timer_ms_inter+0x164>
    else if (digito1 == 7){Output1 = 15;}
 3e4:	80c001e0 	cmpeqi	r3,r16,7
 3e8:	1800341e 	bne	r3,zero,4bc <timer_ms_inter+0x16c>
    else if (digito1 == 8){Output1 = 0;}
 3ec:	80c00220 	cmpeqi	r3,r16,8
 3f0:	1800341e 	bne	r3,zero,4c4 <timer_ms_inter+0x174>
    else if (digito1 == 9){Output1 = 4;}else{Output1 = 127;}
 3f4:	84000260 	cmpeqi	r16,r16,9
 3f8:	8000341e 	bne	r16,zero,4cc <timer_ms_inter+0x17c>
 3fc:	00c01fc4 	movi	r3,127
    if (digito2 == 0){Output2 = 1;}
 400:	10003426 	beq	r2,zero,4d4 <timer_ms_inter+0x184>
    else if (digito2 == 1){Output2 = 79;}
 404:	11000060 	cmpeqi	r4,r2,1
 408:	2000341e 	bne	r4,zero,4dc <timer_ms_inter+0x18c>
    else if (digito2 == 2){Output2 = 18;}
 40c:	110000a0 	cmpeqi	r4,r2,2
 410:	2000341e 	bne	r4,zero,4e4 <timer_ms_inter+0x194>
    else if (digito2 == 3){Output2 = 6;}
 414:	110000e0 	cmpeqi	r4,r2,3
 418:	2000341e 	bne	r4,zero,4ec <timer_ms_inter+0x19c>
    else if (digito2 == 4){Output2 = 76;}
 41c:	11000120 	cmpeqi	r4,r2,4
 420:	2000341e 	bne	r4,zero,4f4 <timer_ms_inter+0x1a4>
    else if (digito2 == 5){Output2 = 36;}
 424:	11000160 	cmpeqi	r4,r2,5
 428:	2000341e 	bne	r4,zero,4fc <timer_ms_inter+0x1ac>
    else if (digito2 == 6){Output2 = 32;}
 42c:	110001a0 	cmpeqi	r4,r2,6
 430:	2000341e 	bne	r4,zero,504 <timer_ms_inter+0x1b4>
    else if (digito2 == 7){Output2 = 15;}
 434:	110001e0 	cmpeqi	r4,r2,7
 438:	2000341e 	bne	r4,zero,50c <timer_ms_inter+0x1bc>
    else if (digito2 == 8){Output2 = 0;}
 43c:	11000220 	cmpeqi	r4,r2,8
 440:	2000341e 	bne	r4,zero,514 <timer_ms_inter+0x1c4>
    else if (digito2 == 9){Output2 = 4;}else{Output2 = 127;}
 444:	10800260 	cmpeqi	r2,r2,9
 448:	1000341e 	bne	r2,zero,51c <timer_ms_inter+0x1cc>
 44c:	00801fc4 	movi	r2,127
    IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_5_BASE,Output2);
 450:	01000474 	movhi	r4,17
 454:	20800035 	stwio	r2,0(r4)
    IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_6_BASE,Output1);
 458:	008004b4 	movhi	r2,18
 45c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_MS_BASE,0);
 460:	008000f4 	movhi	r2,3
 464:	10000035 	stwio	zero,0(r2)
}
 468:	dfc00217 	ldw	ra,8(sp)
 46c:	dc400117 	ldw	r17,4(sp)
 470:	dc000017 	ldw	r16,0(sp)
 474:	dec00304 	addi	sp,sp,12
 478:	f800283a 	ret
        cont_mseg = 0;
 47c:	d0200315 	stw	zero,-32756(gp)
 480:	003fbc06 	br	374 <timer_ms_inter+0x24>
    if (digito1 == 0){Output1 = 1;}
 484:	00c00044 	movi	r3,1
 488:	003fdd06 	br	400 <timer_ms_inter+0xb0>
    else if (digito1 == 1){Output1 = 79;}
 48c:	00c013c4 	movi	r3,79
 490:	003fdb06 	br	400 <timer_ms_inter+0xb0>
    else if (digito1 == 2){Output1 = 18;}
 494:	00c00484 	movi	r3,18
 498:	003fd906 	br	400 <timer_ms_inter+0xb0>
    else if (digito1 == 3){Output1 = 6;}
 49c:	00c00184 	movi	r3,6
 4a0:	003fd706 	br	400 <timer_ms_inter+0xb0>
    else if (digito1 == 4){Output1 = 76;}
 4a4:	00c01304 	movi	r3,76
 4a8:	003fd506 	br	400 <timer_ms_inter+0xb0>
    else if (digito1 == 5){Output1 = 36;}
 4ac:	00c00904 	movi	r3,36
 4b0:	003fd306 	br	400 <timer_ms_inter+0xb0>
    else if (digito1 == 6){Output1 = 32;}
 4b4:	00c00804 	movi	r3,32
 4b8:	003fd106 	br	400 <timer_ms_inter+0xb0>
    else if (digito1 == 7){Output1 = 15;}
 4bc:	00c003c4 	movi	r3,15
 4c0:	003fcf06 	br	400 <timer_ms_inter+0xb0>
    else if (digito1 == 8){Output1 = 0;}
 4c4:	0007883a 	mov	r3,zero
 4c8:	003fcd06 	br	400 <timer_ms_inter+0xb0>
    else if (digito1 == 9){Output1 = 4;}else{Output1 = 127;}
 4cc:	00c00104 	movi	r3,4
 4d0:	003fcb06 	br	400 <timer_ms_inter+0xb0>
    if (digito2 == 0){Output2 = 1;}
 4d4:	00800044 	movi	r2,1
 4d8:	003fdd06 	br	450 <timer_ms_inter+0x100>
    else if (digito2 == 1){Output2 = 79;}
 4dc:	008013c4 	movi	r2,79
 4e0:	003fdb06 	br	450 <timer_ms_inter+0x100>
    else if (digito2 == 2){Output2 = 18;}
 4e4:	00800484 	movi	r2,18
 4e8:	003fd906 	br	450 <timer_ms_inter+0x100>
    else if (digito2 == 3){Output2 = 6;}
 4ec:	00800184 	movi	r2,6
 4f0:	003fd706 	br	450 <timer_ms_inter+0x100>
    else if (digito2 == 4){Output2 = 76;}
 4f4:	00801304 	movi	r2,76
 4f8:	003fd506 	br	450 <timer_ms_inter+0x100>
    else if (digito2 == 5){Output2 = 36;}
 4fc:	00800904 	movi	r2,36
 500:	003fd306 	br	450 <timer_ms_inter+0x100>
    else if (digito2 == 6){Output2 = 32;}
 504:	00800804 	movi	r2,32
 508:	003fd106 	br	450 <timer_ms_inter+0x100>
    else if (digito2 == 7){Output2 = 15;}
 50c:	008003c4 	movi	r2,15
 510:	003fcf06 	br	450 <timer_ms_inter+0x100>
    else if (digito2 == 8){Output2 = 0;}
 514:	0005883a 	mov	r2,zero
 518:	003fcd06 	br	450 <timer_ms_inter+0x100>
    else if (digito2 == 9){Output2 = 4;}else{Output2 = 127;}
 51c:	00800104 	movi	r2,4
 520:	003fcb06 	br	450 <timer_ms_inter+0x100>

00000524 <timer_s_inter>:
    cont_seg ++;
 524:	d0a00417 	ldw	r2,-32752(gp)
{
 528:	defffe04 	addi	sp,sp,-8
 52c:	dfc00115 	stw	ra,4(sp)
    cont_seg ++;
 530:	10800044 	addi	r2,r2,1
{
 534:	dc000015 	stw	r16,0(sp)
    if (cont_seg > 59){
 538:	10c00f08 	cmpgei	r3,r2,60
 53c:	18003b1e 	bne	r3,zero,62c <timer_s_inter+0x108>
    cont_seg ++;
 540:	d0a00415 	stw	r2,-32752(gp)
    int digito1 = cont_seg%10;
 544:	d1200417 	ldw	r4,-32752(gp)
 548:	01400284 	movi	r5,10
 54c:	00008680 	call	868 <__modsi3>
    int digito2 = (int)((cont_seg - (int)cont_seg % 10)/10);
 550:	d1200417 	ldw	r4,-32752(gp)
    int digito1 = cont_seg%10;
 554:	1021883a 	mov	r16,r2
    int digito2 = (int)((cont_seg - (int)cont_seg % 10)/10);
 558:	01400284 	movi	r5,10
 55c:	2089c83a 	sub	r4,r4,r2
 560:	00007e80 	call	7e8 <__divsi3>
    if (digito1 == 0){Output1 = 1;}
 564:	80003326 	beq	r16,zero,634 <timer_s_inter+0x110>
    else if (digito1 == 1){Output1 = 79;}
 568:	80c00060 	cmpeqi	r3,r16,1
 56c:	1800331e 	bne	r3,zero,63c <timer_s_inter+0x118>
    else if (digito1 == 2){Output1 = 18;}
 570:	80c000a0 	cmpeqi	r3,r16,2
 574:	1800331e 	bne	r3,zero,644 <timer_s_inter+0x120>
    else if (digito1 == 3){Output1 = 6;}
 578:	80c000e0 	cmpeqi	r3,r16,3
 57c:	1800331e 	bne	r3,zero,64c <timer_s_inter+0x128>
    else if (digito1 == 4){Output1 = 76;}
 580:	80c00120 	cmpeqi	r3,r16,4
 584:	1800331e 	bne	r3,zero,654 <timer_s_inter+0x130>
    else if (digito1 == 5){Output1 = 36;}
 588:	80c00160 	cmpeqi	r3,r16,5
 58c:	1800331e 	bne	r3,zero,65c <timer_s_inter+0x138>
    else if (digito1 == 6){Output1 = 32;}
 590:	80c001a0 	cmpeqi	r3,r16,6
 594:	1800331e 	bne	r3,zero,664 <timer_s_inter+0x140>
    else if (digito1 == 7){Output1 = 15;}
 598:	80c001e0 	cmpeqi	r3,r16,7
 59c:	1800331e 	bne	r3,zero,66c <timer_s_inter+0x148>
    else if (digito1 == 8){Output1 = 0;}
 5a0:	80c00220 	cmpeqi	r3,r16,8
 5a4:	1800331e 	bne	r3,zero,674 <timer_s_inter+0x150>
    else if (digito1 == 9){Output1 = 4;}else{Output1 = 127;}
 5a8:	84000260 	cmpeqi	r16,r16,9
 5ac:	8000331e 	bne	r16,zero,67c <timer_s_inter+0x158>
 5b0:	00c01fc4 	movi	r3,127
    if (digito2 == 0){Output2 = 1;}
 5b4:	10003326 	beq	r2,zero,684 <timer_s_inter+0x160>
    else if (digito2 == 1){Output2 = 79;}
 5b8:	11000060 	cmpeqi	r4,r2,1
 5bc:	2000331e 	bne	r4,zero,68c <timer_s_inter+0x168>
    else if (digito2 == 2){Output2 = 18;}
 5c0:	110000a0 	cmpeqi	r4,r2,2
 5c4:	2000331e 	bne	r4,zero,694 <timer_s_inter+0x170>
    else if (digito2 == 3){Output2 = 6;}
 5c8:	110000e0 	cmpeqi	r4,r2,3
 5cc:	2000331e 	bne	r4,zero,69c <timer_s_inter+0x178>
    else if (digito2 == 4){Output2 = 76;}
 5d0:	11000120 	cmpeqi	r4,r2,4
 5d4:	2000331e 	bne	r4,zero,6a4 <timer_s_inter+0x180>
    else if (digito2 == 5){Output2 = 36;}
 5d8:	11000160 	cmpeqi	r4,r2,5
 5dc:	2000331e 	bne	r4,zero,6ac <timer_s_inter+0x188>
    else if (digito2 == 6){Output2 = 32;}
 5e0:	110001a0 	cmpeqi	r4,r2,6
 5e4:	2000331e 	bne	r4,zero,6b4 <timer_s_inter+0x190>
    else if (digito2 == 7){Output2 = 15;}
 5e8:	110001e0 	cmpeqi	r4,r2,7
 5ec:	2000331e 	bne	r4,zero,6bc <timer_s_inter+0x198>
    else if (digito2 == 8){Output2 = 0;}
 5f0:	11000220 	cmpeqi	r4,r2,8
 5f4:	2000331e 	bne	r4,zero,6c4 <timer_s_inter+0x1a0>
    else if (digito2 == 9){Output2 = 4;}else{Output2 = 127;}
 5f8:	10800260 	cmpeqi	r2,r2,9
 5fc:	1000331e 	bne	r2,zero,6cc <timer_s_inter+0x1a8>
 600:	00801fc4 	movi	r2,127
    IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_3_BASE,Output2);
 604:	010001b4 	movhi	r4,6
 608:	20800035 	stwio	r2,0(r4)
    IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_4_BASE,Output1);
 60c:	008001f4 	movhi	r2,7
 610:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_S_BASE,0);
 614:	008000b4 	movhi	r2,2
 618:	10000035 	stwio	zero,0(r2)
}
 61c:	dfc00117 	ldw	ra,4(sp)
 620:	dc000017 	ldw	r16,0(sp)
 624:	dec00204 	addi	sp,sp,8
 628:	f800283a 	ret
        cont_seg = 0;
 62c:	d0200415 	stw	zero,-32752(gp)
 630:	003fc406 	br	544 <timer_s_inter+0x20>
    if (digito1 == 0){Output1 = 1;}
 634:	00c00044 	movi	r3,1
 638:	003fde06 	br	5b4 <timer_s_inter+0x90>
    else if (digito1 == 1){Output1 = 79;}
 63c:	00c013c4 	movi	r3,79
 640:	003fdc06 	br	5b4 <timer_s_inter+0x90>
    else if (digito1 == 2){Output1 = 18;}
 644:	00c00484 	movi	r3,18
 648:	003fda06 	br	5b4 <timer_s_inter+0x90>
    else if (digito1 == 3){Output1 = 6;}
 64c:	00c00184 	movi	r3,6
 650:	003fd806 	br	5b4 <timer_s_inter+0x90>
    else if (digito1 == 4){Output1 = 76;}
 654:	00c01304 	movi	r3,76
 658:	003fd606 	br	5b4 <timer_s_inter+0x90>
    else if (digito1 == 5){Output1 = 36;}
 65c:	00c00904 	movi	r3,36
 660:	003fd406 	br	5b4 <timer_s_inter+0x90>
    else if (digito1 == 6){Output1 = 32;}
 664:	00c00804 	movi	r3,32
 668:	003fd206 	br	5b4 <timer_s_inter+0x90>
    else if (digito1 == 7){Output1 = 15;}
 66c:	00c003c4 	movi	r3,15
 670:	003fd006 	br	5b4 <timer_s_inter+0x90>
    else if (digito1 == 8){Output1 = 0;}
 674:	0007883a 	mov	r3,zero
 678:	003fce06 	br	5b4 <timer_s_inter+0x90>
    else if (digito1 == 9){Output1 = 4;}else{Output1 = 127;}
 67c:	00c00104 	movi	r3,4
 680:	003fcc06 	br	5b4 <timer_s_inter+0x90>
    if (digito2 == 0){Output2 = 1;}
 684:	00800044 	movi	r2,1
 688:	003fde06 	br	604 <timer_s_inter+0xe0>
    else if (digito2 == 1){Output2 = 79;}
 68c:	008013c4 	movi	r2,79
 690:	003fdc06 	br	604 <timer_s_inter+0xe0>
    else if (digito2 == 2){Output2 = 18;}
 694:	00800484 	movi	r2,18
 698:	003fda06 	br	604 <timer_s_inter+0xe0>
    else if (digito2 == 3){Output2 = 6;}
 69c:	00800184 	movi	r2,6
 6a0:	003fd806 	br	604 <timer_s_inter+0xe0>
    else if (digito2 == 4){Output2 = 76;}
 6a4:	00801304 	movi	r2,76
 6a8:	003fd606 	br	604 <timer_s_inter+0xe0>
    else if (digito2 == 5){Output2 = 36;}
 6ac:	00800904 	movi	r2,36
 6b0:	003fd406 	br	604 <timer_s_inter+0xe0>
    else if (digito2 == 6){Output2 = 32;}
 6b4:	00800804 	movi	r2,32
 6b8:	003fd206 	br	604 <timer_s_inter+0xe0>
    else if (digito2 == 7){Output2 = 15;}
 6bc:	008003c4 	movi	r2,15
 6c0:	003fd006 	br	604 <timer_s_inter+0xe0>
    else if (digito2 == 8){Output2 = 0;}
 6c4:	0005883a 	mov	r2,zero
 6c8:	003fce06 	br	604 <timer_s_inter+0xe0>
    else if (digito2 == 9){Output2 = 4;}else{Output2 = 127;}
 6cc:	00800104 	movi	r2,4
 6d0:	003fcc06 	br	604 <timer_s_inter+0xe0>

000006d4 <handle_button_interrupts>:
    edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BASE);
 6d4:	00800274 	movhi	r2,9
 6d8:	10800337 	ldwio	r2,12(r2)
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BASE, 0);
 6dc:	00800274 	movhi	r2,9
 6e0:	10000335 	stwio	zero,12(r2)
    IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BASE);
 6e4:	10800337 	ldwio	r2,12(r2)
}
 6e8:	f800283a 	ret

000006ec <main>:


int main()
{ 
 6ec:	defffd04 	addi	sp,sp,-12
    unsigned modo = IORD_ALTERA_AVALON_PIO_DATA(SWITCHS_BASE);
 6f0:	00800234 	movhi	r2,8
{ 
 6f4:	dfc00215 	stw	ra,8(sp)
 6f8:	dc000115 	stw	r16,4(sp)
    unsigned modo = IORD_ALTERA_AVALON_PIO_DATA(SWITCHS_BASE);
 6fc:	14000037 	ldwio	r16,0(r2)
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_BASE, 0xf);
 700:	00c003c4 	movi	r3,15
 704:	00800274 	movhi	r2,9
 708:	10c00235 	stwio	r3,8(r2)
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BASE, 0x0);
 70c:	10000335 	stwio	zero,12(r2)
    alt_ic_isr_register(BUTTON_IRQ_INTERRUPT_CONTROLLER_ID, BUTTON_IRQ,
 710:	01800034 	movhi	r6,0
 714:	d8000015 	stw	zero,0(sp)
 718:	d1e00504 	addi	r7,gp,-32748
 71c:	3181b504 	addi	r6,r6,1748
 720:	01400084 	movi	r5,2
 724:	0009883a 	mov	r4,zero
 728:	000099c0 	call	99c <alt_ic_isr_register>
#ifdef BUTTON_BASE
		init_button_pio();
#endif


            if (modo == 2){
 72c:	80800098 	cmpnei	r2,r16,2
 730:	10000f1e 	bne	r2,zero,770 <main+0x84>

                    alt_ic_isr_register(
 734:	01800034 	movhi	r6,0
 738:	d8000015 	stw	zero,0(sp)
 73c:	000f883a 	mov	r7,zero
 740:	31814904 	addi	r6,r6,1316
 744:	000b883a 	mov	r5,zero

                    alt_ic_isr_register(
                            TIMER_MS_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_MS_IRQ,timer_ms_inter,NULL,NULL
                              );

                    alt_ic_isr_register(
 748:	0009883a 	mov	r4,zero
 74c:	000099c0 	call	99c <alt_ic_isr_register>
            }


    //}

    IOWR_ALTERA_AVALON_TIMER_CONTROL(
 750:	008000c4 	movi	r2,3
 754:	00c000b4 	movhi	r3,2
 758:	18800135 	stwio	r2,4(r3)
            TIMER_S_BASE,ALTERA_AVALON_TIMER_CONTROL_ITO_MSK | ALTERA_AVALON_TIMER_CONTROL_CONT_MSK);

    IOWR_ALTERA_AVALON_TIMER_CONTROL(
 75c:	00c000f4 	movhi	r3,3
 760:	18800135 	stwio	r2,4(r3)
            TIMER_MS_BASE,ALTERA_AVALON_TIMER_CONTROL_ITO_MSK | ALTERA_AVALON_TIMER_CONTROL_CONT_MSK);

    IOWR_ALTERA_AVALON_TIMER_CONTROL(
 764:	00c00434 	movhi	r3,16
 768:	18800135 	stwio	r2,4(r3)
            TIMER_MIN_BASE,ALTERA_AVALON_TIMER_CONTROL_ITO_MSK | ALTERA_AVALON_TIMER_CONTROL_CONT_MSK);



  /* Event loop never exits. */
  while (1);
 76c:	003fff06 	br	76c <main+0x80>
            }else if(modo == 1){
 770:	80800058 	cmpnei	r2,r16,1
 774:	1000061e 	bne	r2,zero,790 <main+0xa4>
                    alt_ic_isr_register(
 778:	01800034 	movhi	r6,0
 77c:	d8000015 	stw	zero,0(sp)
 780:	000f883a 	mov	r7,zero
 784:	3180d404 	addi	r6,r6,848
 788:	01400044 	movi	r5,1
 78c:	003fee06 	br	748 <main+0x5c>
            }else if(modo ==3){
 790:	840000d8 	cmpnei	r16,r16,3
 794:	803fee1e 	bne	r16,zero,750 <main+0x64>
                    alt_ic_isr_register(
 798:	01800034 	movhi	r6,0
 79c:	000f883a 	mov	r7,zero
 7a0:	31814904 	addi	r6,r6,1316
 7a4:	000b883a 	mov	r5,zero
 7a8:	0009883a 	mov	r4,zero
 7ac:	d8000015 	stw	zero,0(sp)
 7b0:	000099c0 	call	99c <alt_ic_isr_register>
                    alt_ic_isr_register(
 7b4:	01800034 	movhi	r6,0
 7b8:	000f883a 	mov	r7,zero
 7bc:	3180d404 	addi	r6,r6,848
 7c0:	01400044 	movi	r5,1
 7c4:	d8000015 	stw	zero,0(sp)
 7c8:	0009883a 	mov	r4,zero
 7cc:	000099c0 	call	99c <alt_ic_isr_register>
                    alt_ic_isr_register(
 7d0:	01800034 	movhi	r6,0
 7d4:	d8000015 	stw	zero,0(sp)
 7d8:	000f883a 	mov	r7,zero
 7dc:	31806f04 	addi	r6,r6,444
 7e0:	014000c4 	movi	r5,3
 7e4:	003fd806 	br	748 <main+0x5c>

000007e8 <__divsi3>:
 7e8:	20001a16 	blt	r4,zero,854 <__divsi3+0x6c>
 7ec:	000f883a 	mov	r7,zero
 7f0:	2800020e 	bge	r5,zero,7fc <__divsi3+0x14>
 7f4:	014bc83a 	sub	r5,zero,r5
 7f8:	39c0005c 	xori	r7,r7,1
 7fc:	200d883a 	mov	r6,r4
 800:	00c00044 	movi	r3,1
 804:	2900092e 	bgeu	r5,r4,82c <__divsi3+0x44>
 808:	00800804 	movi	r2,32
 80c:	00c00044 	movi	r3,1
 810:	00000106 	br	818 <__divsi3+0x30>
 814:	10001226 	beq	r2,zero,860 <__divsi3+0x78>
 818:	294b883a 	add	r5,r5,r5
 81c:	10bfffc4 	addi	r2,r2,-1
 820:	18c7883a 	add	r3,r3,r3
 824:	293ffb36 	bltu	r5,r4,814 <__divsi3+0x2c>
 828:	18000d26 	beq	r3,zero,860 <__divsi3+0x78>
 82c:	0005883a 	mov	r2,zero
 830:	31400236 	bltu	r6,r5,83c <__divsi3+0x54>
 834:	314dc83a 	sub	r6,r6,r5
 838:	10c4b03a 	or	r2,r2,r3
 83c:	1806d07a 	srli	r3,r3,1
 840:	280ad07a 	srli	r5,r5,1
 844:	183ffa1e 	bne	r3,zero,830 <__divsi3+0x48>
 848:	38000126 	beq	r7,zero,850 <__divsi3+0x68>
 84c:	0085c83a 	sub	r2,zero,r2
 850:	f800283a 	ret
 854:	0109c83a 	sub	r4,zero,r4
 858:	01c00044 	movi	r7,1
 85c:	003fe406 	br	7f0 <__divsi3+0x8>
 860:	0005883a 	mov	r2,zero
 864:	003ff806 	br	848 <__divsi3+0x60>

00000868 <__modsi3>:
 868:	20001916 	blt	r4,zero,8d0 <__modsi3+0x68>
 86c:	000f883a 	mov	r7,zero
 870:	2005883a 	mov	r2,r4
 874:	2800010e 	bge	r5,zero,87c <__modsi3+0x14>
 878:	014bc83a 	sub	r5,zero,r5
 87c:	00c00044 	movi	r3,1
 880:	2900092e 	bgeu	r5,r4,8a8 <__modsi3+0x40>
 884:	01800804 	movi	r6,32
 888:	00c00044 	movi	r3,1
 88c:	00000106 	br	894 <__modsi3+0x2c>
 890:	30000d26 	beq	r6,zero,8c8 <__modsi3+0x60>
 894:	294b883a 	add	r5,r5,r5
 898:	31bfffc4 	addi	r6,r6,-1
 89c:	18c7883a 	add	r3,r3,r3
 8a0:	293ffb36 	bltu	r5,r4,890 <__modsi3+0x28>
 8a4:	18000826 	beq	r3,zero,8c8 <__modsi3+0x60>
 8a8:	1806d07a 	srli	r3,r3,1
 8ac:	11400136 	bltu	r2,r5,8b4 <__modsi3+0x4c>
 8b0:	1145c83a 	sub	r2,r2,r5
 8b4:	280ad07a 	srli	r5,r5,1
 8b8:	183ffb1e 	bne	r3,zero,8a8 <__modsi3+0x40>
 8bc:	38000126 	beq	r7,zero,8c4 <__modsi3+0x5c>
 8c0:	0085c83a 	sub	r2,zero,r2
 8c4:	f800283a 	ret
 8c8:	2005883a 	mov	r2,r4
 8cc:	003ffb06 	br	8bc <__modsi3+0x54>
 8d0:	0109c83a 	sub	r4,zero,r4
 8d4:	01c00044 	movi	r7,1
 8d8:	003fe506 	br	870 <__modsi3+0x8>

000008dc <__udivsi3>:
 8dc:	200d883a 	mov	r6,r4
 8e0:	2900152e 	bgeu	r5,r4,938 <__udivsi3+0x5c>
 8e4:	28001416 	blt	r5,zero,938 <__udivsi3+0x5c>
 8e8:	00800804 	movi	r2,32
 8ec:	00c00044 	movi	r3,1
 8f0:	00000206 	br	8fc <__udivsi3+0x20>
 8f4:	10000e26 	beq	r2,zero,930 <__udivsi3+0x54>
 8f8:	28000516 	blt	r5,zero,910 <__udivsi3+0x34>
 8fc:	294b883a 	add	r5,r5,r5
 900:	10bfffc4 	addi	r2,r2,-1
 904:	18c7883a 	add	r3,r3,r3
 908:	293ffa36 	bltu	r5,r4,8f4 <__udivsi3+0x18>
 90c:	18000826 	beq	r3,zero,930 <__udivsi3+0x54>
 910:	0005883a 	mov	r2,zero
 914:	31400236 	bltu	r6,r5,920 <__udivsi3+0x44>
 918:	314dc83a 	sub	r6,r6,r5
 91c:	10c4b03a 	or	r2,r2,r3
 920:	1806d07a 	srli	r3,r3,1
 924:	280ad07a 	srli	r5,r5,1
 928:	183ffa1e 	bne	r3,zero,914 <__udivsi3+0x38>
 92c:	f800283a 	ret
 930:	0005883a 	mov	r2,zero
 934:	f800283a 	ret
 938:	00c00044 	movi	r3,1
 93c:	003ff406 	br	910 <__udivsi3+0x34>

00000940 <__umodsi3>:
 940:	2005883a 	mov	r2,r4
 944:	2900132e 	bgeu	r5,r4,994 <__umodsi3+0x54>
 948:	28001216 	blt	r5,zero,994 <__umodsi3+0x54>
 94c:	01800804 	movi	r6,32
 950:	00c00044 	movi	r3,1
 954:	00000206 	br	960 <__umodsi3+0x20>
 958:	30000c26 	beq	r6,zero,98c <__umodsi3+0x4c>
 95c:	28000516 	blt	r5,zero,974 <__umodsi3+0x34>
 960:	294b883a 	add	r5,r5,r5
 964:	31bfffc4 	addi	r6,r6,-1
 968:	18c7883a 	add	r3,r3,r3
 96c:	293ffa36 	bltu	r5,r4,958 <__umodsi3+0x18>
 970:	18000626 	beq	r3,zero,98c <__umodsi3+0x4c>
 974:	1806d07a 	srli	r3,r3,1
 978:	11400136 	bltu	r2,r5,980 <__umodsi3+0x40>
 97c:	1145c83a 	sub	r2,r2,r5
 980:	280ad07a 	srli	r5,r5,1
 984:	183ffb1e 	bne	r3,zero,974 <__umodsi3+0x34>
 988:	f800283a 	ret
 98c:	2005883a 	mov	r2,r4
 990:	f800283a 	ret
 994:	00c00044 	movi	r3,1
 998:	003ff606 	br	974 <__umodsi3+0x34>

0000099c <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 99c:	0000a281 	jmpi	a28 <alt_iic_isr_register>

000009a0 <alt_ic_irq_enable>:
  NIOS2_READ_STATUS (context);
 9a0:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 9a4:	00bfff84 	movi	r2,-2
 9a8:	1884703a 	and	r2,r3,r2
 9ac:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 9b0:	00800044 	movi	r2,1
 9b4:	d1200617 	ldw	r4,-32744(gp)
 9b8:	114a983a 	sll	r5,r2,r5
 9bc:	290ab03a 	or	r5,r5,r4
 9c0:	d1600615 	stw	r5,-32744(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 9c4:	d0a00617 	ldw	r2,-32744(gp)
 9c8:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
 9cc:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 9d0:	0005883a 	mov	r2,zero
 9d4:	f800283a 	ret

000009d8 <alt_ic_irq_disable>:
  NIOS2_READ_STATUS (context);
 9d8:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 9dc:	00bfff84 	movi	r2,-2
 9e0:	1884703a 	and	r2,r3,r2
 9e4:	1001703a 	wrctl	status,r2
  alt_irq_active &= ~(1 << id);
 9e8:	00bfff84 	movi	r2,-2
 9ec:	d1200617 	ldw	r4,-32744(gp)
 9f0:	114a183a 	rol	r5,r2,r5
 9f4:	290a703a 	and	r5,r5,r4
 9f8:	d1600615 	stw	r5,-32744(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 9fc:	d0a00617 	ldw	r2,-32744(gp)
 a00:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
 a04:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 a08:	0005883a 	mov	r2,zero
 a0c:	f800283a 	ret

00000a10 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 a10:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
 a14:	00800044 	movi	r2,1
 a18:	1144983a 	sll	r2,r2,r5
 a1c:	10c4703a 	and	r2,r2,r3
}
 a20:	1004c03a 	cmpne	r2,r2,zero
 a24:	f800283a 	ret

00000a28 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 a28:	28800808 	cmpgei	r2,r5,32
 a2c:	1000161e 	bne	r2,zero,a88 <alt_iic_isr_register+0x60>
{
 a30:	defffe04 	addi	sp,sp,-8
 a34:	dfc00115 	stw	ra,4(sp)
 a38:	dc000015 	stw	r16,0(sp)
  NIOS2_READ_STATUS (context);
 a3c:	0021303a 	rdctl	r16,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a40:	00bfff84 	movi	r2,-2
 a44:	8084703a 	and	r2,r16,r2
 a48:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 a4c:	280690fa 	slli	r3,r5,3
 a50:	00800074 	movhi	r2,1
 a54:	10800b04 	addi	r2,r2,44
 a58:	10c5883a 	add	r2,r2,r3
 a5c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
 a60:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 a64:	30000626 	beq	r6,zero,a80 <alt_iic_isr_register+0x58>
 a68:	00009a00 	call	9a0 <alt_ic_irq_enable>
  NIOS2_WRITE_STATUS (context);
 a6c:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 a70:	dfc00117 	ldw	ra,4(sp)
 a74:	dc000017 	ldw	r16,0(sp)
 a78:	dec00204 	addi	sp,sp,8
 a7c:	f800283a 	ret
    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 a80:	00009d80 	call	9d8 <alt_ic_irq_disable>
 a84:	003ff906 	br	a6c <alt_iic_isr_register+0x44>
  int rc = -EINVAL;  
 a88:	00bffa84 	movi	r2,-22
}
 a8c:	f800283a 	ret

00000a90 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 a90:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 a94:	00800074 	movhi	r2,1
 a98:	00c00034 	movhi	r3,0
 a9c:	dfc00015 	stw	ra,0(sp)
 aa0:	10800004 	addi	r2,r2,0
 aa4:	18c30504 	addi	r3,r3,3092
 aa8:	10c00326 	beq	r2,r3,ab8 <alt_load+0x28>
  {
    while( to != end )
 aac:	01000074 	movhi	r4,1
 ab0:	21000104 	addi	r4,r4,4
 ab4:	1100141e 	bne	r2,r4,b08 <alt_load+0x78>
  if (to != from)
 ab8:	00800034 	movhi	r2,0
 abc:	00c00034 	movhi	r3,0
 ac0:	10800804 	addi	r2,r2,32
 ac4:	18c00804 	addi	r3,r3,32
 ac8:	10c00326 	beq	r2,r3,ad8 <alt_load+0x48>
    while( to != end )
 acc:	01000034 	movhi	r4,0
 ad0:	21006004 	addi	r4,r4,384
 ad4:	1100111e 	bne	r2,r4,b1c <alt_load+0x8c>
  if (to != from)
 ad8:	00800074 	movhi	r2,1
 adc:	00c00034 	movhi	r3,0
 ae0:	10800004 	addi	r2,r2,0
 ae4:	18c30504 	addi	r3,r3,3092
 ae8:	10c00326 	beq	r2,r3,af8 <alt_load+0x68>
    while( to != end )
 aec:	01000074 	movhi	r4,1
 af0:	21000004 	addi	r4,r4,0
 af4:	11000e1e 	bne	r2,r4,b30 <alt_load+0xa0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 af8:	0000b940 	call	b94 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 afc:	dfc00017 	ldw	ra,0(sp)
 b00:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
 b04:	0000b981 	jmpi	b98 <alt_icache_flush_all>
    {
      *to++ = *from++;
 b08:	19400017 	ldw	r5,0(r3)
 b0c:	10800104 	addi	r2,r2,4
 b10:	18c00104 	addi	r3,r3,4
 b14:	117fff15 	stw	r5,-4(r2)
 b18:	003fe606 	br	ab4 <alt_load+0x24>
 b1c:	19400017 	ldw	r5,0(r3)
 b20:	10800104 	addi	r2,r2,4
 b24:	18c00104 	addi	r3,r3,4
 b28:	117fff15 	stw	r5,-4(r2)
 b2c:	003fe906 	br	ad4 <alt_load+0x44>
 b30:	19400017 	ldw	r5,0(r3)
 b34:	10800104 	addi	r2,r2,4
 b38:	18c00104 	addi	r3,r3,4
 b3c:	117fff15 	stw	r5,-4(r2)
 b40:	003fec06 	br	af4 <alt_load+0x64>

00000b44 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 b44:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 b48:	0009883a 	mov	r4,zero
{
 b4c:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
 b50:	0000b700 	call	b70 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 b54:	0000b900 	call	b90 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 b58:	d1a00717 	ldw	r6,-32740(gp)
 b5c:	d1600817 	ldw	r5,-32736(gp)
 b60:	d1200917 	ldw	r4,-32732(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 b64:	dfc00017 	ldw	ra,0(sp)
 b68:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
 b6c:	00006ec1 	jmpi	6ec <main>

00000b70 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 b70:	deffff04 	addi	sp,sp,-4
 b74:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 b78:	0000c0c0 	call	c0c <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 b7c:	00800044 	movi	r2,1
 b80:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 b84:	dfc00017 	ldw	ra,0(sp)
 b88:	dec00104 	addi	sp,sp,4
 b8c:	f800283a 	ret

00000b90 <alt_sys_init>:
void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_MIN, timer_min);
    ALTERA_AVALON_TIMER_INIT ( TIMER_MS, timer_MS);
    ALTERA_AVALON_TIMER_INIT ( TIMER_S, timer_S);
}
 b90:	f800283a 	ret

00000b94 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 b94:	f800283a 	ret

00000b98 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 b98:	f800283a 	ret

00000b9c <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
 b9c:	213ffe84 	addi	r4,r4,-6
 ba0:	20800428 	cmpgeui	r2,r4,16
 ba4:	1000151e 	bne	r2,zero,bfc <alt_exception_cause_generated_bad_addr+0x60>
 ba8:	200890ba 	slli	r4,r4,2
 bac:	00800034 	movhi	r2,0
 bb0:	2085883a 	add	r2,r4,r2
 bb4:	1082ef17 	ldw	r2,3004(r2)
 bb8:	1000683a 	jmp	r2
 bbc:	00000c04 	movi	zero,48
 bc0:	00000c04 	movi	zero,48
 bc4:	00000bfc 	xorhi	zero,zero,47
 bc8:	00000bfc 	xorhi	zero,zero,47
 bcc:	00000bfc 	xorhi	zero,zero,47
 bd0:	00000c04 	movi	zero,48
 bd4:	00000bfc 	xorhi	zero,zero,47
 bd8:	00000bfc 	xorhi	zero,zero,47
 bdc:	00000c04 	movi	zero,48
 be0:	00000c04 	movi	zero,48
 be4:	00000bfc 	xorhi	zero,zero,47
 be8:	00000c04 	movi	zero,48
 bec:	00000bfc 	xorhi	zero,zero,47
 bf0:	00000bfc 	xorhi	zero,zero,47
 bf4:	00000bfc 	xorhi	zero,zero,47
 bf8:	00000c04 	movi	zero,48
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 bfc:	0005883a 	mov	r2,zero
 c00:	f800283a 	ret
 c04:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
 c08:	f800283a 	ret

00000c0c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 c0c:	000170fa 	wrctl	ienable,zero
}
 c10:	f800283a 	ret
