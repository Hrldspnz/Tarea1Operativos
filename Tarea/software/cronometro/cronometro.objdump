
cronometro.elf:     file format elf32-littlenios2
cronometro.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000180

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000c2c memsz 0x00000c2c flags r-x
    LOAD off    0x00002000 vaddr 0x00010000 paddr 0x00000c4c align 2**12
         filesz 0x00000004 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000acc  00000180  00000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  00010000  00000c50  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000004  00010000  00000c4c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  00010004  00000c50  00002004  2**2
                  ALLOC, SMALL_DATA
  6 .ROM          00000000  00000c50  00000c50  00002004  2**0
                  CONTENTS
  7 .RAM          00000000  00010128  00010128  00002004  2**0
                  CONTENTS
  8 .comment      0000002c  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000238  00000000  00000000  00002030  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00007486  00000000  00000000  00002268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001b00  00000000  00000000  000096ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001f2a  00000000  00000000  0000b1ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000002d8  00000000  00000000  0000d118  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000011ff  00000000  00000000  0000d3f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00001028  00000000  00000000  0000e5ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0000f618  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000001f8  00000000  00000000  0000f628  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000108d5  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  000108d8  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000108db  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000108dc  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000004  00000000  00000000  000108dd  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000004  00000000  00000000  000108e1  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000004  00000000  00000000  000108e5  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  000108e9  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000001e  00000000  00000000  000108f1  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006cec2  00000000  00000000  0001090f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000180 l    d  .text	00000000 .text
00010000 l    d  .rodata	00000000 .rodata
00010000 l    d  .rwdata	00000000 .rwdata
00010004 l    d  .bss	00000000 .bss
00000c50 l    d  .ROM	00000000 .ROM
00010128 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cronometro_bsp//obj/HAL/src/crt0.o
000001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000001bc l     F .text	00000194 timer_min_inter
00010008 l     O .bss	00000004 cont_min
00000350 l     F .text	000001b0 timer_ms_inter
0001000c l     O .bss	00000004 cont_mseg
00000500 l     F .text	000001b0 timer_s_inter
00010010 l     O .bss	00000004 cont_seg
000006b0 l     F .text	00000024 play_btn
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00010024 g     O .bss	00000004 alt_instruction_exception_handler
00000b7c g     F .text	0000002c alt_main
00010028 g     O .bss	00000100 alt_irq
00000c4c g       *ABS*	00000000 __flash_rwdata_start
00000c44 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001001c g     O .bss	00000004 alt_argv
00018000 g       *ABS*	00000000 _gp
00000bd4 g     F .text	00000070 alt_exception_cause_generated_bad_addr
00000914 g     F .text	00000064 .hidden __udivsi3
00010128 g       *ABS*	00000000 __bss_end
00000a60 g     F .text	00000068 alt_iic_isr_register
00000000 g       *ABS*	00000000 __alt_mem_ROM
00000a48 g     F .text	00000018 alt_ic_irq_enabled
00010014 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000060 alt_irq_handler
00000bcc g     F .text	00000004 alt_dcache_flush_all
00010004 g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __ram_rodata_end
00000978 g     F .text	0000005c .hidden __umodsi3
00010128 g       *ABS*	00000000 end
0000015c g     F .exceptions	00000024 alt_instruction_exception_entry
00011000 g       *ABS*	00000000 __alt_stack_pointer
00000180 g     F .text	0000003c _start
00000bc8 g     F .text	00000004 alt_sys_init
00010000 g       *ABS*	00000000 __ram_rwdata_start
00010000 g       *ABS*	00000000 __ram_rodata_start
00010128 g       *ABS*	00000000 __alt_stack_base
00010004 g     O .bss	00000004 init
00010004 g       *ABS*	00000000 __bss_start
000006d4 g     F .text	0000014c main
00010000 g       *ABS*	00000000 __alt_mem_RAM
00010018 g     O .bss	00000004 alt_envp
00000820 g     F .text	00000080 .hidden __divsi3
00000c4c g       *ABS*	00000000 __flash_rodata_start
00000ba8 g     F .text	00000020 alt_irq_init
00010020 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00000020 g       *ABS*	00000000 __ram_exceptions_start
000009d4 g     F .text	00000004 alt_ic_isr_register
00010004 g       *ABS*	00000000 _edata
00010128 g       *ABS*	00000000 _end
00000180 g       *ABS*	00000000 __ram_exceptions_end
00000a10 g     F .text	00000038 alt_ic_irq_disable
000008a0 g     F .text	00000074 .hidden __modsi3
00011000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000000c g       .entry	00000000 _exit
00000bd0 g     F .text	00000004 alt_icache_flush_all
00010000 g     O .rwdata	00000004 alt_priority_mask
000009d8 g     F .text	00000038 alt_ic_irq_enable
00000ac8 g     F .text	000000b4 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406014 	ori	at,at,384
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	000015c0 	call	15c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 10c:	04000074 	movhi	r16,1
 110:	84000a04 	addi	r16,r16,40
    i = 0;
 114:	0005883a 	mov	r2,zero
    mask = 1;
 118:	00c00044 	movi	r3,1
      if (active & mask)
 11c:	20ca703a 	and	r5,r4,r3
 120:	28000b26 	beq	r5,zero,150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context); 
 124:	100490fa 	slli	r2,r2,3
 128:	8085883a 	add	r2,r16,r2
 12c:	10c00017 	ldw	r3,0(r2)
 130:	11000117 	ldw	r4,4(r2)
 134:	183ee83a 	callr	r3
 138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 13c:	203ff51e 	bne	r4,zero,114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 140:	dfc00117 	ldw	ra,4(sp)
 144:	dc000017 	ldw	r16,0(sp)
 148:	dec00204 	addi	sp,sp,8
 14c:	f800283a 	ret
      mask <<= 1;
 150:	1806907a 	slli	r3,r3,1
      i++;
 154:	10800044 	addi	r2,r2,1
      if (active & mask)
 158:	003ff006 	br	11c <alt_irq_handler+0x20>

0000015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 15c:	d0a00917 	ldw	r2,-32732(gp)
{
 160:	200b883a 	mov	r5,r4
  if(alt_instruction_exception_handler) {
 164:	10000326 	beq	r2,zero,174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 168:	000d883a 	mov	r6,zero
 16c:	013fffc4 	movi	r4,-1
 170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 178:	0005883a 	mov	r2,zero
 17c:	f800283a 	ret

Disassembly of section .text:

00000180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 180:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
 184:	dec40014 	ori	sp,sp,4096
    movhi gp, %hi(_gp)
 188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
 18c:	d6a00014 	ori	gp,gp,32768
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
 194:	10800114 	ori	r2,r2,4

    movhi r3, %hi(__bss_end)
 198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
 19c:	18c04a14 	ori	r3,r3,296

    beq r2, r3, 1f
 1a0:	10c00326 	beq	r2,r3,1b0 <_start+0x30>

0:
    stw zero, (r2)
 1a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1ac:	10fffd36 	bltu	r2,r3,1a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1b0:	0000ac80 	call	ac8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1b4:	0000b7c0 	call	b7c <alt_main>

000001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1b8:	003fff06 	br	1b8 <alt_after_alt_main>

000001bc <timer_min_inter>:

// Funcion encargada del manejo de interrupciones del timer de los minutos
static void timer_min_inter(void *context)
{
	(void) context;
	cont_min ++;
 1bc:	d0a00217 	ldw	r2,-32760(gp)
{
 1c0:	defffe04 	addi	sp,sp,-8
 1c4:	dfc00115 	stw	ra,4(sp)
	cont_min ++;
 1c8:	10800044 	addi	r2,r2,1
{
 1cc:	dc000015 	stw	r16,0(sp)
	if (cont_min > 59){
 1d0:	10c00f08 	cmpgei	r3,r2,60
 1d4:	1800381e 	bne	r3,zero,2b8 <timer_min_inter+0xfc>
	cont_min ++;
 1d8:	d0a00215 	stw	r2,-32760(gp)
		cont_min = 0;
	}

	int digito1 = cont_min%10;
 1dc:	d1200217 	ldw	r4,-32760(gp)
 1e0:	01400284 	movi	r5,10
 1e4:	00008a00 	call	8a0 <__modsi3>
	int digito2 = (int)((cont_min - (int)cont_min % 10)/10);
 1e8:	d1200217 	ldw	r4,-32760(gp)
	int digito1 = cont_min%10;
 1ec:	1021883a 	mov	r16,r2
	int digito2 = (int)((cont_min - (int)cont_min % 10)/10);
 1f0:	01400284 	movi	r5,10
 1f4:	2089c83a 	sub	r4,r4,r2
 1f8:	00008200 	call	820 <__divsi3>
	unsigned Output1 = 0;
	unsigned Output2 = 0;


	if (digito1 == 0){Output1 = 1;}
 1fc:	80003026 	beq	r16,zero,2c0 <timer_min_inter+0x104>
	else if (digito1 == 1){Output1 = 79;}
 200:	80c00060 	cmpeqi	r3,r16,1
 204:	1800301e 	bne	r3,zero,2c8 <timer_min_inter+0x10c>
	else if (digito1 == 2){Output1 = 18;}
 208:	80c000a0 	cmpeqi	r3,r16,2
 20c:	1800301e 	bne	r3,zero,2d0 <timer_min_inter+0x114>
	else if (digito1 == 3){Output1 = 6;}
 210:	80c000e0 	cmpeqi	r3,r16,3
 214:	1800301e 	bne	r3,zero,2d8 <timer_min_inter+0x11c>
	else if (digito1 == 4){Output1 = 76;}
 218:	80c00120 	cmpeqi	r3,r16,4
 21c:	1800301e 	bne	r3,zero,2e0 <timer_min_inter+0x124>
	else if (digito1 == 5){Output1 = 36;}
 220:	80c00160 	cmpeqi	r3,r16,5
 224:	1800301e 	bne	r3,zero,2e8 <timer_min_inter+0x12c>
	else if (digito1 == 6){Output1 = 32;}
 228:	80c001a0 	cmpeqi	r3,r16,6
 22c:	1800301e 	bne	r3,zero,2f0 <timer_min_inter+0x134>
	else if (digito1 == 7){Output1 = 15;}
 230:	80c001e0 	cmpeqi	r3,r16,7
 234:	1800301e 	bne	r3,zero,2f8 <timer_min_inter+0x13c>
	unsigned Output1 = 0;
 238:	80c00260 	cmpeqi	r3,r16,9
 23c:	180690ba 	slli	r3,r3,2
	else if (digito1 == 8){Output1 = 0;}
	else if (digito1 == 9){Output1 = 4;}else{Output2 = 127;}

	if (digito2 == 0){Output2 = 1;}
 240:	10002f26 	beq	r2,zero,300 <timer_min_inter+0x144>
	else if (digito2 == 1){Output2 = 79;}
 244:	11000060 	cmpeqi	r4,r2,1
 248:	20002f1e 	bne	r4,zero,308 <timer_min_inter+0x14c>
	else if (digito2 == 2){Output2 = 18;}
 24c:	110000a0 	cmpeqi	r4,r2,2
 250:	20002f1e 	bne	r4,zero,310 <timer_min_inter+0x154>
	else if (digito2 == 3){Output2 = 6;}
 254:	110000e0 	cmpeqi	r4,r2,3
 258:	20002f1e 	bne	r4,zero,318 <timer_min_inter+0x15c>
	else if (digito2 == 4){Output2 = 76;}
 25c:	11000120 	cmpeqi	r4,r2,4
 260:	20002f1e 	bne	r4,zero,320 <timer_min_inter+0x164>
	else if (digito2 == 5){Output2 = 36;}
 264:	11000160 	cmpeqi	r4,r2,5
 268:	20002f1e 	bne	r4,zero,328 <timer_min_inter+0x16c>
	else if (digito2 == 6){Output2 = 32;}
 26c:	110001a0 	cmpeqi	r4,r2,6
 270:	20002f1e 	bne	r4,zero,330 <timer_min_inter+0x174>
	else if (digito2 == 7){Output2 = 15;}
 274:	110001e0 	cmpeqi	r4,r2,7
 278:	20002f1e 	bne	r4,zero,338 <timer_min_inter+0x17c>
	else if (digito2 == 8){Output2 = 0;}
 27c:	11000220 	cmpeqi	r4,r2,8
 280:	20002f1e 	bne	r4,zero,340 <timer_min_inter+0x184>
	else if (digito2 == 9){Output2 = 4;}else{Output2 = 127;}
 284:	10800260 	cmpeqi	r2,r2,9
 288:	10002f1e 	bne	r2,zero,348 <timer_min_inter+0x18c>
 28c:	00801fc4 	movi	r2,127


	// salida de los displays
	IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_5_BASE,Output2);
 290:	01000474 	movhi	r4,17
 294:	20800035 	stwio	r2,0(r4)
	IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_6_BASE,Output1);
 298:	008004b4 	movhi	r2,18
 29c:	10c00035 	stwio	r3,0(r2)

	//fin de la interrupcion
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_MIN_BASE,0);
 2a0:	00800434 	movhi	r2,16
 2a4:	10000035 	stwio	zero,0(r2)

}
 2a8:	dfc00117 	ldw	ra,4(sp)
 2ac:	dc000017 	ldw	r16,0(sp)
 2b0:	dec00204 	addi	sp,sp,8
 2b4:	f800283a 	ret
		cont_min = 0;
 2b8:	d0200215 	stw	zero,-32760(gp)
 2bc:	003fc706 	br	1dc <timer_min_inter+0x20>
	if (digito1 == 0){Output1 = 1;}
 2c0:	00c00044 	movi	r3,1
 2c4:	003fde06 	br	240 <timer_min_inter+0x84>
	else if (digito1 == 1){Output1 = 79;}
 2c8:	00c013c4 	movi	r3,79
 2cc:	003fdc06 	br	240 <timer_min_inter+0x84>
	else if (digito1 == 2){Output1 = 18;}
 2d0:	00c00484 	movi	r3,18
 2d4:	003fda06 	br	240 <timer_min_inter+0x84>
	else if (digito1 == 3){Output1 = 6;}
 2d8:	00c00184 	movi	r3,6
 2dc:	003fd806 	br	240 <timer_min_inter+0x84>
	else if (digito1 == 4){Output1 = 76;}
 2e0:	00c01304 	movi	r3,76
 2e4:	003fd606 	br	240 <timer_min_inter+0x84>
	else if (digito1 == 5){Output1 = 36;}
 2e8:	00c00904 	movi	r3,36
 2ec:	003fd406 	br	240 <timer_min_inter+0x84>
	else if (digito1 == 6){Output1 = 32;}
 2f0:	00c00804 	movi	r3,32
 2f4:	003fd206 	br	240 <timer_min_inter+0x84>
	else if (digito1 == 7){Output1 = 15;}
 2f8:	00c003c4 	movi	r3,15
 2fc:	003fd006 	br	240 <timer_min_inter+0x84>
	if (digito2 == 0){Output2 = 1;}
 300:	00800044 	movi	r2,1
 304:	003fe206 	br	290 <timer_min_inter+0xd4>
	else if (digito2 == 1){Output2 = 79;}
 308:	008013c4 	movi	r2,79
 30c:	003fe006 	br	290 <timer_min_inter+0xd4>
	else if (digito2 == 2){Output2 = 18;}
 310:	00800484 	movi	r2,18
 314:	003fde06 	br	290 <timer_min_inter+0xd4>
	else if (digito2 == 3){Output2 = 6;}
 318:	00800184 	movi	r2,6
 31c:	003fdc06 	br	290 <timer_min_inter+0xd4>
	else if (digito2 == 4){Output2 = 76;}
 320:	00801304 	movi	r2,76
 324:	003fda06 	br	290 <timer_min_inter+0xd4>
	else if (digito2 == 5){Output2 = 36;}
 328:	00800904 	movi	r2,36
 32c:	003fd806 	br	290 <timer_min_inter+0xd4>
	else if (digito2 == 6){Output2 = 32;}
 330:	00800804 	movi	r2,32
 334:	003fd606 	br	290 <timer_min_inter+0xd4>
	else if (digito2 == 7){Output2 = 15;}
 338:	008003c4 	movi	r2,15
 33c:	003fd406 	br	290 <timer_min_inter+0xd4>
	else if (digito2 == 8){Output2 = 0;}
 340:	0005883a 	mov	r2,zero
 344:	003fd206 	br	290 <timer_min_inter+0xd4>
	else if (digito2 == 9){Output2 = 4;}else{Output2 = 127;}
 348:	00800104 	movi	r2,4
 34c:	003fd006 	br	290 <timer_min_inter+0xd4>

00000350 <timer_ms_inter>:
	cont_mseg ++;
 350:	d0a00317 	ldw	r2,-32756(gp)
{
 354:	defffe04 	addi	sp,sp,-8
 358:	dfc00115 	stw	ra,4(sp)
	cont_mseg ++;
 35c:	10800044 	addi	r2,r2,1
{
 360:	dc000015 	stw	r16,0(sp)
	if (cont_mseg > 59){
 364:	10c00f08 	cmpgei	r3,r2,60
 368:	18003b1e 	bne	r3,zero,458 <timer_ms_inter+0x108>
	cont_mseg ++;
 36c:	d0a00315 	stw	r2,-32756(gp)
	int digito1 = cont_mseg%10;
 370:	d1200317 	ldw	r4,-32756(gp)
 374:	01400284 	movi	r5,10
 378:	00008a00 	call	8a0 <__modsi3>
	int digito2 = (int)((cont_mseg - (int)cont_mseg % 10)/10);
 37c:	d1200317 	ldw	r4,-32756(gp)
	int digito1 = cont_mseg%10;
 380:	1021883a 	mov	r16,r2
	int digito2 = (int)((cont_mseg - (int)cont_mseg % 10)/10);
 384:	01400284 	movi	r5,10
 388:	2089c83a 	sub	r4,r4,r2
 38c:	00008200 	call	820 <__divsi3>
	if (digito1 == 0){Output1 = 1;}
 390:	80003326 	beq	r16,zero,460 <timer_ms_inter+0x110>
	else if (digito1 == 1){Output1 = 79;}
 394:	80c00060 	cmpeqi	r3,r16,1
 398:	1800331e 	bne	r3,zero,468 <timer_ms_inter+0x118>
	else if (digito1 == 2){Output1 = 18;}
 39c:	80c000a0 	cmpeqi	r3,r16,2
 3a0:	1800331e 	bne	r3,zero,470 <timer_ms_inter+0x120>
	else if (digito1 == 3){Output1 = 6;}
 3a4:	80c000e0 	cmpeqi	r3,r16,3
 3a8:	1800331e 	bne	r3,zero,478 <timer_ms_inter+0x128>
	else if (digito1 == 4){Output1 = 76;}
 3ac:	80c00120 	cmpeqi	r3,r16,4
 3b0:	1800331e 	bne	r3,zero,480 <timer_ms_inter+0x130>
	else if (digito1 == 5){Output1 = 36;}
 3b4:	80c00160 	cmpeqi	r3,r16,5
 3b8:	1800331e 	bne	r3,zero,488 <timer_ms_inter+0x138>
	else if (digito1 == 6){Output1 = 32;}
 3bc:	80c001a0 	cmpeqi	r3,r16,6
 3c0:	1800331e 	bne	r3,zero,490 <timer_ms_inter+0x140>
	else if (digito1 == 7){Output1 = 15;}
 3c4:	80c001e0 	cmpeqi	r3,r16,7
 3c8:	1800331e 	bne	r3,zero,498 <timer_ms_inter+0x148>
	else if (digito1 == 8){Output1 = 0;}
 3cc:	80c00220 	cmpeqi	r3,r16,8
 3d0:	1800331e 	bne	r3,zero,4a0 <timer_ms_inter+0x150>
	else if (digito1 == 9){Output1 = 4;}else{Output1 = 127;}
 3d4:	84000260 	cmpeqi	r16,r16,9
 3d8:	8000331e 	bne	r16,zero,4a8 <timer_ms_inter+0x158>
 3dc:	00c01fc4 	movi	r3,127
	if (digito2 == 0){Output2 = 1;}
 3e0:	10003326 	beq	r2,zero,4b0 <timer_ms_inter+0x160>
	else if (digito2 == 1){Output2 = 79;}
 3e4:	11000060 	cmpeqi	r4,r2,1
 3e8:	2000331e 	bne	r4,zero,4b8 <timer_ms_inter+0x168>
	else if (digito2 == 2){Output2 = 18;}
 3ec:	110000a0 	cmpeqi	r4,r2,2
 3f0:	2000331e 	bne	r4,zero,4c0 <timer_ms_inter+0x170>
	else if (digito2 == 3){Output2 = 6;}
 3f4:	110000e0 	cmpeqi	r4,r2,3
 3f8:	2000331e 	bne	r4,zero,4c8 <timer_ms_inter+0x178>
	else if (digito2 == 4){Output2 = 76;}
 3fc:	11000120 	cmpeqi	r4,r2,4
 400:	2000331e 	bne	r4,zero,4d0 <timer_ms_inter+0x180>
	else if (digito2 == 5){Output2 = 36;}
 404:	11000160 	cmpeqi	r4,r2,5
 408:	2000331e 	bne	r4,zero,4d8 <timer_ms_inter+0x188>
	else if (digito2 == 6){Output2 = 32;}
 40c:	110001a0 	cmpeqi	r4,r2,6
 410:	2000331e 	bne	r4,zero,4e0 <timer_ms_inter+0x190>
	else if (digito2 == 7){Output2 = 15;}
 414:	110001e0 	cmpeqi	r4,r2,7
 418:	2000331e 	bne	r4,zero,4e8 <timer_ms_inter+0x198>
	else if (digito2 == 8){Output2 = 0;}
 41c:	11000220 	cmpeqi	r4,r2,8
 420:	2000331e 	bne	r4,zero,4f0 <timer_ms_inter+0x1a0>
	else if (digito2 == 9){Output2 = 4;}else{Output2 = 127;}
 424:	10800260 	cmpeqi	r2,r2,9
 428:	1000331e 	bne	r2,zero,4f8 <timer_ms_inter+0x1a8>
 42c:	00801fc4 	movi	r2,127
	IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_1_BASE,Output2);
 430:	01000134 	movhi	r4,4
 434:	20800035 	stwio	r2,0(r4)
	IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_2_BASE,Output1);
 438:	00800174 	movhi	r2,5
 43c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_MS_BASE,0);
 440:	008000f4 	movhi	r2,3
 444:	10000035 	stwio	zero,0(r2)
}
 448:	dfc00117 	ldw	ra,4(sp)
 44c:	dc000017 	ldw	r16,0(sp)
 450:	dec00204 	addi	sp,sp,8
 454:	f800283a 	ret
		cont_mseg = 0;
 458:	d0200315 	stw	zero,-32756(gp)
 45c:	003fc406 	br	370 <timer_ms_inter+0x20>
	if (digito1 == 0){Output1 = 1;}
 460:	00c00044 	movi	r3,1
 464:	003fde06 	br	3e0 <timer_ms_inter+0x90>
	else if (digito1 == 1){Output1 = 79;}
 468:	00c013c4 	movi	r3,79
 46c:	003fdc06 	br	3e0 <timer_ms_inter+0x90>
	else if (digito1 == 2){Output1 = 18;}
 470:	00c00484 	movi	r3,18
 474:	003fda06 	br	3e0 <timer_ms_inter+0x90>
	else if (digito1 == 3){Output1 = 6;}
 478:	00c00184 	movi	r3,6
 47c:	003fd806 	br	3e0 <timer_ms_inter+0x90>
	else if (digito1 == 4){Output1 = 76;}
 480:	00c01304 	movi	r3,76
 484:	003fd606 	br	3e0 <timer_ms_inter+0x90>
	else if (digito1 == 5){Output1 = 36;}
 488:	00c00904 	movi	r3,36
 48c:	003fd406 	br	3e0 <timer_ms_inter+0x90>
	else if (digito1 == 6){Output1 = 32;}
 490:	00c00804 	movi	r3,32
 494:	003fd206 	br	3e0 <timer_ms_inter+0x90>
	else if (digito1 == 7){Output1 = 15;}
 498:	00c003c4 	movi	r3,15
 49c:	003fd006 	br	3e0 <timer_ms_inter+0x90>
	else if (digito1 == 8){Output1 = 0;}
 4a0:	0007883a 	mov	r3,zero
 4a4:	003fce06 	br	3e0 <timer_ms_inter+0x90>
	else if (digito1 == 9){Output1 = 4;}else{Output1 = 127;}
 4a8:	00c00104 	movi	r3,4
 4ac:	003fcc06 	br	3e0 <timer_ms_inter+0x90>
	if (digito2 == 0){Output2 = 1;}
 4b0:	00800044 	movi	r2,1
 4b4:	003fde06 	br	430 <timer_ms_inter+0xe0>
	else if (digito2 == 1){Output2 = 79;}
 4b8:	008013c4 	movi	r2,79
 4bc:	003fdc06 	br	430 <timer_ms_inter+0xe0>
	else if (digito2 == 2){Output2 = 18;}
 4c0:	00800484 	movi	r2,18
 4c4:	003fda06 	br	430 <timer_ms_inter+0xe0>
	else if (digito2 == 3){Output2 = 6;}
 4c8:	00800184 	movi	r2,6
 4cc:	003fd806 	br	430 <timer_ms_inter+0xe0>
	else if (digito2 == 4){Output2 = 76;}
 4d0:	00801304 	movi	r2,76
 4d4:	003fd606 	br	430 <timer_ms_inter+0xe0>
	else if (digito2 == 5){Output2 = 36;}
 4d8:	00800904 	movi	r2,36
 4dc:	003fd406 	br	430 <timer_ms_inter+0xe0>
	else if (digito2 == 6){Output2 = 32;}
 4e0:	00800804 	movi	r2,32
 4e4:	003fd206 	br	430 <timer_ms_inter+0xe0>
	else if (digito2 == 7){Output2 = 15;}
 4e8:	008003c4 	movi	r2,15
 4ec:	003fd006 	br	430 <timer_ms_inter+0xe0>
	else if (digito2 == 8){Output2 = 0;}
 4f0:	0005883a 	mov	r2,zero
 4f4:	003fce06 	br	430 <timer_ms_inter+0xe0>
	else if (digito2 == 9){Output2 = 4;}else{Output2 = 127;}
 4f8:	00800104 	movi	r2,4
 4fc:	003fcc06 	br	430 <timer_ms_inter+0xe0>

00000500 <timer_s_inter>:
	cont_seg ++;
 500:	d0a00417 	ldw	r2,-32752(gp)
{
 504:	defffe04 	addi	sp,sp,-8
 508:	dfc00115 	stw	ra,4(sp)
	cont_seg ++;
 50c:	10800044 	addi	r2,r2,1
{
 510:	dc000015 	stw	r16,0(sp)
	if (cont_seg > 59){
 514:	10c00f08 	cmpgei	r3,r2,60
 518:	18003b1e 	bne	r3,zero,608 <timer_s_inter+0x108>
	cont_seg ++;
 51c:	d0a00415 	stw	r2,-32752(gp)
	int digito1 = cont_seg%10;
 520:	d1200417 	ldw	r4,-32752(gp)
 524:	01400284 	movi	r5,10
 528:	00008a00 	call	8a0 <__modsi3>
	int digito2 = (int)((cont_seg - (int)cont_seg % 10)/10);
 52c:	d1200417 	ldw	r4,-32752(gp)
	int digito1 = cont_seg%10;
 530:	1021883a 	mov	r16,r2
	int digito2 = (int)((cont_seg - (int)cont_seg % 10)/10);
 534:	01400284 	movi	r5,10
 538:	2089c83a 	sub	r4,r4,r2
 53c:	00008200 	call	820 <__divsi3>
	if (digito1 == 0){Output1 = 1;}
 540:	80003326 	beq	r16,zero,610 <timer_s_inter+0x110>
	else if (digito1 == 1){Output1 = 79;}
 544:	80c00060 	cmpeqi	r3,r16,1
 548:	1800331e 	bne	r3,zero,618 <timer_s_inter+0x118>
	else if (digito1 == 2){Output1 = 18;}
 54c:	80c000a0 	cmpeqi	r3,r16,2
 550:	1800331e 	bne	r3,zero,620 <timer_s_inter+0x120>
	else if (digito1 == 3){Output1 = 6;}
 554:	80c000e0 	cmpeqi	r3,r16,3
 558:	1800331e 	bne	r3,zero,628 <timer_s_inter+0x128>
	else if (digito1 == 4){Output1 = 76;}
 55c:	80c00120 	cmpeqi	r3,r16,4
 560:	1800331e 	bne	r3,zero,630 <timer_s_inter+0x130>
	else if (digito1 == 5){Output1 = 36;}
 564:	80c00160 	cmpeqi	r3,r16,5
 568:	1800331e 	bne	r3,zero,638 <timer_s_inter+0x138>
	else if (digito1 == 6){Output1 = 32;}
 56c:	80c001a0 	cmpeqi	r3,r16,6
 570:	1800331e 	bne	r3,zero,640 <timer_s_inter+0x140>
	else if (digito1 == 7){Output1 = 15;}
 574:	80c001e0 	cmpeqi	r3,r16,7
 578:	1800331e 	bne	r3,zero,648 <timer_s_inter+0x148>
	else if (digito1 == 8){Output1 = 0;}
 57c:	80c00220 	cmpeqi	r3,r16,8
 580:	1800331e 	bne	r3,zero,650 <timer_s_inter+0x150>
	else if (digito1 == 9){Output1 = 4;}else{Output1 = 127;}
 584:	84000260 	cmpeqi	r16,r16,9
 588:	8000331e 	bne	r16,zero,658 <timer_s_inter+0x158>
 58c:	00c01fc4 	movi	r3,127
	if (digito2 == 0){Output2 = 1;}
 590:	10003326 	beq	r2,zero,660 <timer_s_inter+0x160>
	else if (digito2 == 1){Output2 = 79;}
 594:	11000060 	cmpeqi	r4,r2,1
 598:	2000331e 	bne	r4,zero,668 <timer_s_inter+0x168>
	else if (digito2 == 2){Output2 = 18;}
 59c:	110000a0 	cmpeqi	r4,r2,2
 5a0:	2000331e 	bne	r4,zero,670 <timer_s_inter+0x170>
	else if (digito2 == 3){Output2 = 6;}
 5a4:	110000e0 	cmpeqi	r4,r2,3
 5a8:	2000331e 	bne	r4,zero,678 <timer_s_inter+0x178>
	else if (digito2 == 4){Output2 = 76;}
 5ac:	11000120 	cmpeqi	r4,r2,4
 5b0:	2000331e 	bne	r4,zero,680 <timer_s_inter+0x180>
	else if (digito2 == 5){Output2 = 36;}
 5b4:	11000160 	cmpeqi	r4,r2,5
 5b8:	2000331e 	bne	r4,zero,688 <timer_s_inter+0x188>
	else if (digito2 == 6){Output2 = 32;}
 5bc:	110001a0 	cmpeqi	r4,r2,6
 5c0:	2000331e 	bne	r4,zero,690 <timer_s_inter+0x190>
	else if (digito2 == 7){Output2 = 15;}
 5c4:	110001e0 	cmpeqi	r4,r2,7
 5c8:	2000331e 	bne	r4,zero,698 <timer_s_inter+0x198>
	else if (digito2 == 8){Output2 = 0;}
 5cc:	11000220 	cmpeqi	r4,r2,8
 5d0:	2000331e 	bne	r4,zero,6a0 <timer_s_inter+0x1a0>
	else if (digito2 == 9){Output2 = 4;}else{Output2 = 127;}
 5d4:	10800260 	cmpeqi	r2,r2,9
 5d8:	1000331e 	bne	r2,zero,6a8 <timer_s_inter+0x1a8>
 5dc:	00801fc4 	movi	r2,127
	IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_3_BASE,Output2);
 5e0:	010001b4 	movhi	r4,6
 5e4:	20800035 	stwio	r2,0(r4)
	IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_4_BASE,Output1);
 5e8:	008001f4 	movhi	r2,7
 5ec:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_S_BASE,0);
 5f0:	008000b4 	movhi	r2,2
 5f4:	10000035 	stwio	zero,0(r2)
}
 5f8:	dfc00117 	ldw	ra,4(sp)
 5fc:	dc000017 	ldw	r16,0(sp)
 600:	dec00204 	addi	sp,sp,8
 604:	f800283a 	ret
		cont_seg = 0;
 608:	d0200415 	stw	zero,-32752(gp)
 60c:	003fc406 	br	520 <timer_s_inter+0x20>
	if (digito1 == 0){Output1 = 1;}
 610:	00c00044 	movi	r3,1
 614:	003fde06 	br	590 <timer_s_inter+0x90>
	else if (digito1 == 1){Output1 = 79;}
 618:	00c013c4 	movi	r3,79
 61c:	003fdc06 	br	590 <timer_s_inter+0x90>
	else if (digito1 == 2){Output1 = 18;}
 620:	00c00484 	movi	r3,18
 624:	003fda06 	br	590 <timer_s_inter+0x90>
	else if (digito1 == 3){Output1 = 6;}
 628:	00c00184 	movi	r3,6
 62c:	003fd806 	br	590 <timer_s_inter+0x90>
	else if (digito1 == 4){Output1 = 76;}
 630:	00c01304 	movi	r3,76
 634:	003fd606 	br	590 <timer_s_inter+0x90>
	else if (digito1 == 5){Output1 = 36;}
 638:	00c00904 	movi	r3,36
 63c:	003fd406 	br	590 <timer_s_inter+0x90>
	else if (digito1 == 6){Output1 = 32;}
 640:	00c00804 	movi	r3,32
 644:	003fd206 	br	590 <timer_s_inter+0x90>
	else if (digito1 == 7){Output1 = 15;}
 648:	00c003c4 	movi	r3,15
 64c:	003fd006 	br	590 <timer_s_inter+0x90>
	else if (digito1 == 8){Output1 = 0;}
 650:	0007883a 	mov	r3,zero
 654:	003fce06 	br	590 <timer_s_inter+0x90>
	else if (digito1 == 9){Output1 = 4;}else{Output1 = 127;}
 658:	00c00104 	movi	r3,4
 65c:	003fcc06 	br	590 <timer_s_inter+0x90>
	if (digito2 == 0){Output2 = 1;}
 660:	00800044 	movi	r2,1
 664:	003fde06 	br	5e0 <timer_s_inter+0xe0>
	else if (digito2 == 1){Output2 = 79;}
 668:	008013c4 	movi	r2,79
 66c:	003fdc06 	br	5e0 <timer_s_inter+0xe0>
	else if (digito2 == 2){Output2 = 18;}
 670:	00800484 	movi	r2,18
 674:	003fda06 	br	5e0 <timer_s_inter+0xe0>
	else if (digito2 == 3){Output2 = 6;}
 678:	00800184 	movi	r2,6
 67c:	003fd806 	br	5e0 <timer_s_inter+0xe0>
	else if (digito2 == 4){Output2 = 76;}
 680:	00801304 	movi	r2,76
 684:	003fd606 	br	5e0 <timer_s_inter+0xe0>
	else if (digito2 == 5){Output2 = 36;}
 688:	00800904 	movi	r2,36
 68c:	003fd406 	br	5e0 <timer_s_inter+0xe0>
	else if (digito2 == 6){Output2 = 32;}
 690:	00800804 	movi	r2,32
 694:	003fd206 	br	5e0 <timer_s_inter+0xe0>
	else if (digito2 == 7){Output2 = 15;}
 698:	008003c4 	movi	r2,15
 69c:	003fd006 	br	5e0 <timer_s_inter+0xe0>
	else if (digito2 == 8){Output2 = 0;}
 6a0:	0005883a 	mov	r2,zero
 6a4:	003fce06 	br	5e0 <timer_s_inter+0xe0>
	else if (digito2 == 9){Output2 = 4;}else{Output2 = 127;}
 6a8:	00800104 	movi	r2,4
 6ac:	003fcc06 	br	5e0 <timer_s_inter+0xe0>

000006b0 <play_btn>:
	if (init==0){init=1;}else{init=0;}
 6b0:	d0a00117 	ldw	r2,-32764(gp)
 6b4:	1000051e 	bne	r2,zero,6cc <play_btn+0x1c>
 6b8:	00800044 	movi	r2,1
 6bc:	d0a00115 	stw	r2,-32764(gp)
	IOWR_ALTERA_AVALON_TIMER_STATUS(BUTTON_BASE,0);
 6c0:	00800274 	movhi	r2,9
 6c4:	10000035 	stwio	zero,0(r2)
}
 6c8:	f800283a 	ret
	if (init==0){init=1;}else{init=0;}
 6cc:	d0200115 	stw	zero,-32764(gp)
 6d0:	003ffb06 	br	6c0 <play_btn+0x10>

000006d4 <main>:



int main()
{ 
 6d4:	defffe04 	addi	sp,sp,-8
	unsigned modo = IORD_ALTERA_AVALON_PIO_DATA(SWITCHS_BASE);
 6d8:	00800234 	movhi	r2,8
{ 
 6dc:	dfc00115 	stw	ra,4(sp)
	unsigned modo = IORD_ALTERA_AVALON_PIO_DATA(SWITCHS_BASE);
 6e0:	10800037 	ldwio	r2,0(r2)
					  );

	alt_ic_isr_register(
					TIMER_MIN_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_MIN_IRQ,timer_min_inter,NULL,NULL
			  	  	  );*/
		if (modo == 2){
 6e4:	10c00098 	cmpnei	r3,r2,2
 6e8:	18001b1e 	bne	r3,zero,758 <main+0x84>
				alt_ic_isr_register(
 6ec:	01800034 	movhi	r6,0
 6f0:	d8000015 	stw	zero,0(sp)
 6f4:	000f883a 	mov	r7,zero
 6f8:	3181ac04 	addi	r6,r6,1712
 6fc:	01400084 	movi	r5,2
 700:	0009883a 	mov	r4,zero
 704:	00009d40 	call	9d4 <alt_ic_isr_register>
						BUTTON_IRQ_INTERRUPT_CONTROLLER_ID,BUTTON_IRQ,play_btn,NULL,NULL
						  );
				if(init==1){
 708:	d0a00117 	ldw	r2,-32764(gp)
 70c:	10800060 	cmpeqi	r2,r2,1
 710:	10000726 	beq	r2,zero,730 <main+0x5c>
					alt_ic_isr_register(
 714:	01800034 	movhi	r6,0
 718:	d8000015 	stw	zero,0(sp)
 71c:	000f883a 	mov	r7,zero
 720:	31814004 	addi	r6,r6,1280
 724:	000b883a 	mov	r5,zero

				alt_ic_isr_register(
						TIMER_MS_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_MS_IRQ,timer_ms_inter,NULL,NULL
						  );

				alt_ic_isr_register(
 728:	0009883a 	mov	r4,zero
 72c:	00009d40 	call	9d4 <alt_ic_isr_register>
			}

		}
	//}

	IOWR_ALTERA_AVALON_TIMER_CONTROL(
 730:	008000c4 	movi	r2,3
 734:	00c000b4 	movhi	r3,2
 738:	18800135 	stwio	r2,4(r3)
			TIMER_S_BASE,ALTERA_AVALON_TIMER_CONTROL_ITO_MSK | ALTERA_AVALON_TIMER_CONTROL_CONT_MSK);

	IOWR_ALTERA_AVALON_TIMER_CONTROL(
 73c:	00c000f4 	movhi	r3,3
 740:	18800135 	stwio	r2,4(r3)
			TIMER_MS_BASE,ALTERA_AVALON_TIMER_CONTROL_ITO_MSK | ALTERA_AVALON_TIMER_CONTROL_CONT_MSK);

	IOWR_ALTERA_AVALON_TIMER_CONTROL(
 744:	00c00434 	movhi	r3,16
 748:	18800135 	stwio	r2,4(r3)
			TIMER_MIN_BASE,ALTERA_AVALON_TIMER_CONTROL_ITO_MSK | ALTERA_AVALON_TIMER_CONTROL_CONT_MSK);
	IOWR_ALTERA_AVALON_TIMER_CONTROL(
 74c:	00c00274 	movhi	r3,9
 750:	18800135 	stwio	r2,4(r3)
			BUTTON_BASE,ALTERA_AVALON_TIMER_CONTROL_ITO_MSK | ALTERA_AVALON_TIMER_CONTROL_CONT_MSK);



  /* Event loop never exits. */
  while (1);
 754:	003fff06 	br	754 <main+0x80>
		}else if(modo == 1){
 758:	10c00058 	cmpnei	r3,r2,1
 75c:	1800101e 	bne	r3,zero,7a0 <main+0xcc>
			alt_ic_isr_register(
 760:	01800034 	movhi	r6,0
 764:	d8000015 	stw	zero,0(sp)
 768:	000f883a 	mov	r7,zero
 76c:	3181ac04 	addi	r6,r6,1712
 770:	01400084 	movi	r5,2
 774:	0009883a 	mov	r4,zero
 778:	00009d40 	call	9d4 <alt_ic_isr_register>
			if(init==1){
 77c:	d0a00117 	ldw	r2,-32764(gp)
 780:	10800058 	cmpnei	r2,r2,1
 784:	103fea1e 	bne	r2,zero,730 <main+0x5c>
				alt_ic_isr_register(
 788:	01800034 	movhi	r6,0
 78c:	d1600117 	ldw	r5,-32764(gp)
 790:	d8000015 	stw	zero,0(sp)
 794:	000f883a 	mov	r7,zero
 798:	3180d404 	addi	r6,r6,848
 79c:	003fe206 	br	728 <main+0x54>
		}else if(modo ==3){
 7a0:	108000d8 	cmpnei	r2,r2,3
 7a4:	103fe21e 	bne	r2,zero,730 <main+0x5c>
			alt_ic_isr_register(
 7a8:	01800034 	movhi	r6,0
 7ac:	d8000015 	stw	zero,0(sp)
 7b0:	000f883a 	mov	r7,zero
 7b4:	3181ac04 	addi	r6,r6,1712
 7b8:	01400084 	movi	r5,2
 7bc:	0009883a 	mov	r4,zero
 7c0:	00009d40 	call	9d4 <alt_ic_isr_register>
			if(init==1){
 7c4:	d0a00117 	ldw	r2,-32764(gp)
 7c8:	10800058 	cmpnei	r2,r2,1
 7cc:	103fd81e 	bne	r2,zero,730 <main+0x5c>
				alt_ic_isr_register(
 7d0:	01800034 	movhi	r6,0
 7d4:	000f883a 	mov	r7,zero
 7d8:	31814004 	addi	r6,r6,1280
 7dc:	000b883a 	mov	r5,zero
 7e0:	0009883a 	mov	r4,zero
 7e4:	d8000015 	stw	zero,0(sp)
 7e8:	00009d40 	call	9d4 <alt_ic_isr_register>
				alt_ic_isr_register(
 7ec:	01800034 	movhi	r6,0
 7f0:	000f883a 	mov	r7,zero
 7f4:	3180d404 	addi	r6,r6,848
 7f8:	01400044 	movi	r5,1
 7fc:	d8000015 	stw	zero,0(sp)
 800:	0009883a 	mov	r4,zero
 804:	00009d40 	call	9d4 <alt_ic_isr_register>
				alt_ic_isr_register(
 808:	01800034 	movhi	r6,0
 80c:	d8000015 	stw	zero,0(sp)
 810:	000f883a 	mov	r7,zero
 814:	31806f04 	addi	r6,r6,444
 818:	014000c4 	movi	r5,3
 81c:	003fc206 	br	728 <main+0x54>

00000820 <__divsi3>:
 820:	20001a16 	blt	r4,zero,88c <__divsi3+0x6c>
 824:	000f883a 	mov	r7,zero
 828:	2800020e 	bge	r5,zero,834 <__divsi3+0x14>
 82c:	014bc83a 	sub	r5,zero,r5
 830:	39c0005c 	xori	r7,r7,1
 834:	200d883a 	mov	r6,r4
 838:	00c00044 	movi	r3,1
 83c:	2900092e 	bgeu	r5,r4,864 <__divsi3+0x44>
 840:	00800804 	movi	r2,32
 844:	00c00044 	movi	r3,1
 848:	00000106 	br	850 <__divsi3+0x30>
 84c:	10001226 	beq	r2,zero,898 <__divsi3+0x78>
 850:	294b883a 	add	r5,r5,r5
 854:	10bfffc4 	addi	r2,r2,-1
 858:	18c7883a 	add	r3,r3,r3
 85c:	293ffb36 	bltu	r5,r4,84c <__divsi3+0x2c>
 860:	18000d26 	beq	r3,zero,898 <__divsi3+0x78>
 864:	0005883a 	mov	r2,zero
 868:	31400236 	bltu	r6,r5,874 <__divsi3+0x54>
 86c:	314dc83a 	sub	r6,r6,r5
 870:	10c4b03a 	or	r2,r2,r3
 874:	1806d07a 	srli	r3,r3,1
 878:	280ad07a 	srli	r5,r5,1
 87c:	183ffa1e 	bne	r3,zero,868 <__divsi3+0x48>
 880:	38000126 	beq	r7,zero,888 <__divsi3+0x68>
 884:	0085c83a 	sub	r2,zero,r2
 888:	f800283a 	ret
 88c:	0109c83a 	sub	r4,zero,r4
 890:	01c00044 	movi	r7,1
 894:	003fe406 	br	828 <__divsi3+0x8>
 898:	0005883a 	mov	r2,zero
 89c:	003ff806 	br	880 <__divsi3+0x60>

000008a0 <__modsi3>:
 8a0:	20001916 	blt	r4,zero,908 <__modsi3+0x68>
 8a4:	000f883a 	mov	r7,zero
 8a8:	2005883a 	mov	r2,r4
 8ac:	2800010e 	bge	r5,zero,8b4 <__modsi3+0x14>
 8b0:	014bc83a 	sub	r5,zero,r5
 8b4:	00c00044 	movi	r3,1
 8b8:	2900092e 	bgeu	r5,r4,8e0 <__modsi3+0x40>
 8bc:	01800804 	movi	r6,32
 8c0:	00c00044 	movi	r3,1
 8c4:	00000106 	br	8cc <__modsi3+0x2c>
 8c8:	30000d26 	beq	r6,zero,900 <__modsi3+0x60>
 8cc:	294b883a 	add	r5,r5,r5
 8d0:	31bfffc4 	addi	r6,r6,-1
 8d4:	18c7883a 	add	r3,r3,r3
 8d8:	293ffb36 	bltu	r5,r4,8c8 <__modsi3+0x28>
 8dc:	18000826 	beq	r3,zero,900 <__modsi3+0x60>
 8e0:	1806d07a 	srli	r3,r3,1
 8e4:	11400136 	bltu	r2,r5,8ec <__modsi3+0x4c>
 8e8:	1145c83a 	sub	r2,r2,r5
 8ec:	280ad07a 	srli	r5,r5,1
 8f0:	183ffb1e 	bne	r3,zero,8e0 <__modsi3+0x40>
 8f4:	38000126 	beq	r7,zero,8fc <__modsi3+0x5c>
 8f8:	0085c83a 	sub	r2,zero,r2
 8fc:	f800283a 	ret
 900:	2005883a 	mov	r2,r4
 904:	003ffb06 	br	8f4 <__modsi3+0x54>
 908:	0109c83a 	sub	r4,zero,r4
 90c:	01c00044 	movi	r7,1
 910:	003fe506 	br	8a8 <__modsi3+0x8>

00000914 <__udivsi3>:
 914:	200d883a 	mov	r6,r4
 918:	2900152e 	bgeu	r5,r4,970 <__udivsi3+0x5c>
 91c:	28001416 	blt	r5,zero,970 <__udivsi3+0x5c>
 920:	00800804 	movi	r2,32
 924:	00c00044 	movi	r3,1
 928:	00000206 	br	934 <__udivsi3+0x20>
 92c:	10000e26 	beq	r2,zero,968 <__udivsi3+0x54>
 930:	28000516 	blt	r5,zero,948 <__udivsi3+0x34>
 934:	294b883a 	add	r5,r5,r5
 938:	10bfffc4 	addi	r2,r2,-1
 93c:	18c7883a 	add	r3,r3,r3
 940:	293ffa36 	bltu	r5,r4,92c <__udivsi3+0x18>
 944:	18000826 	beq	r3,zero,968 <__udivsi3+0x54>
 948:	0005883a 	mov	r2,zero
 94c:	31400236 	bltu	r6,r5,958 <__udivsi3+0x44>
 950:	314dc83a 	sub	r6,r6,r5
 954:	10c4b03a 	or	r2,r2,r3
 958:	1806d07a 	srli	r3,r3,1
 95c:	280ad07a 	srli	r5,r5,1
 960:	183ffa1e 	bne	r3,zero,94c <__udivsi3+0x38>
 964:	f800283a 	ret
 968:	0005883a 	mov	r2,zero
 96c:	f800283a 	ret
 970:	00c00044 	movi	r3,1
 974:	003ff406 	br	948 <__udivsi3+0x34>

00000978 <__umodsi3>:
 978:	2005883a 	mov	r2,r4
 97c:	2900132e 	bgeu	r5,r4,9cc <__umodsi3+0x54>
 980:	28001216 	blt	r5,zero,9cc <__umodsi3+0x54>
 984:	01800804 	movi	r6,32
 988:	00c00044 	movi	r3,1
 98c:	00000206 	br	998 <__umodsi3+0x20>
 990:	30000c26 	beq	r6,zero,9c4 <__umodsi3+0x4c>
 994:	28000516 	blt	r5,zero,9ac <__umodsi3+0x34>
 998:	294b883a 	add	r5,r5,r5
 99c:	31bfffc4 	addi	r6,r6,-1
 9a0:	18c7883a 	add	r3,r3,r3
 9a4:	293ffa36 	bltu	r5,r4,990 <__umodsi3+0x18>
 9a8:	18000626 	beq	r3,zero,9c4 <__umodsi3+0x4c>
 9ac:	1806d07a 	srli	r3,r3,1
 9b0:	11400136 	bltu	r2,r5,9b8 <__umodsi3+0x40>
 9b4:	1145c83a 	sub	r2,r2,r5
 9b8:	280ad07a 	srli	r5,r5,1
 9bc:	183ffb1e 	bne	r3,zero,9ac <__umodsi3+0x34>
 9c0:	f800283a 	ret
 9c4:	2005883a 	mov	r2,r4
 9c8:	f800283a 	ret
 9cc:	00c00044 	movi	r3,1
 9d0:	003ff606 	br	9ac <__umodsi3+0x34>

000009d4 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 9d4:	0000a601 	jmpi	a60 <alt_iic_isr_register>

000009d8 <alt_ic_irq_enable>:
  NIOS2_READ_STATUS (context);
 9d8:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 9dc:	00bfff84 	movi	r2,-2
 9e0:	1884703a 	and	r2,r3,r2
 9e4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 9e8:	00800044 	movi	r2,1
 9ec:	d1200517 	ldw	r4,-32748(gp)
 9f0:	114a983a 	sll	r5,r2,r5
 9f4:	290ab03a 	or	r5,r5,r4
 9f8:	d1600515 	stw	r5,-32748(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 9fc:	d0a00517 	ldw	r2,-32748(gp)
 a00:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
 a04:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 a08:	0005883a 	mov	r2,zero
 a0c:	f800283a 	ret

00000a10 <alt_ic_irq_disable>:
  NIOS2_READ_STATUS (context);
 a10:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a14:	00bfff84 	movi	r2,-2
 a18:	1884703a 	and	r2,r3,r2
 a1c:	1001703a 	wrctl	status,r2
  alt_irq_active &= ~(1 << id);
 a20:	00bfff84 	movi	r2,-2
 a24:	d1200517 	ldw	r4,-32748(gp)
 a28:	114a183a 	rol	r5,r2,r5
 a2c:	290a703a 	and	r5,r5,r4
 a30:	d1600515 	stw	r5,-32748(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 a34:	d0a00517 	ldw	r2,-32748(gp)
 a38:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
 a3c:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 a40:	0005883a 	mov	r2,zero
 a44:	f800283a 	ret

00000a48 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 a48:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
 a4c:	00800044 	movi	r2,1
 a50:	1144983a 	sll	r2,r2,r5
 a54:	10c4703a 	and	r2,r2,r3
}
 a58:	1004c03a 	cmpne	r2,r2,zero
 a5c:	f800283a 	ret

00000a60 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 a60:	28800808 	cmpgei	r2,r5,32
 a64:	1000161e 	bne	r2,zero,ac0 <alt_iic_isr_register+0x60>
{
 a68:	defffe04 	addi	sp,sp,-8
 a6c:	dfc00115 	stw	ra,4(sp)
 a70:	dc000015 	stw	r16,0(sp)
  NIOS2_READ_STATUS (context);
 a74:	0021303a 	rdctl	r16,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a78:	00bfff84 	movi	r2,-2
 a7c:	8084703a 	and	r2,r16,r2
 a80:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 a84:	280690fa 	slli	r3,r5,3
 a88:	00800074 	movhi	r2,1
 a8c:	10800a04 	addi	r2,r2,40
 a90:	10c5883a 	add	r2,r2,r3
 a94:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
 a98:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 a9c:	30000626 	beq	r6,zero,ab8 <alt_iic_isr_register+0x58>
 aa0:	00009d80 	call	9d8 <alt_ic_irq_enable>
  NIOS2_WRITE_STATUS (context);
 aa4:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 aa8:	dfc00117 	ldw	ra,4(sp)
 aac:	dc000017 	ldw	r16,0(sp)
 ab0:	dec00204 	addi	sp,sp,8
 ab4:	f800283a 	ret
    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 ab8:	0000a100 	call	a10 <alt_ic_irq_disable>
 abc:	003ff906 	br	aa4 <alt_iic_isr_register+0x44>
  int rc = -EINVAL;  
 ac0:	00bffa84 	movi	r2,-22
}
 ac4:	f800283a 	ret

00000ac8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 ac8:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 acc:	00800074 	movhi	r2,1
 ad0:	00c00034 	movhi	r3,0
 ad4:	dfc00015 	stw	ra,0(sp)
 ad8:	10800004 	addi	r2,r2,0
 adc:	18c31304 	addi	r3,r3,3148
 ae0:	10c00326 	beq	r2,r3,af0 <alt_load+0x28>
  {
    while( to != end )
 ae4:	01000074 	movhi	r4,1
 ae8:	21000104 	addi	r4,r4,4
 aec:	1100141e 	bne	r2,r4,b40 <alt_load+0x78>
  if (to != from)
 af0:	00800034 	movhi	r2,0
 af4:	00c00034 	movhi	r3,0
 af8:	10800804 	addi	r2,r2,32
 afc:	18c00804 	addi	r3,r3,32
 b00:	10c00326 	beq	r2,r3,b10 <alt_load+0x48>
    while( to != end )
 b04:	01000034 	movhi	r4,0
 b08:	21006004 	addi	r4,r4,384
 b0c:	1100111e 	bne	r2,r4,b54 <alt_load+0x8c>
  if (to != from)
 b10:	00800074 	movhi	r2,1
 b14:	00c00034 	movhi	r3,0
 b18:	10800004 	addi	r2,r2,0
 b1c:	18c31304 	addi	r3,r3,3148
 b20:	10c00326 	beq	r2,r3,b30 <alt_load+0x68>
    while( to != end )
 b24:	01000074 	movhi	r4,1
 b28:	21000004 	addi	r4,r4,0
 b2c:	11000e1e 	bne	r2,r4,b68 <alt_load+0xa0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 b30:	0000bcc0 	call	bcc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 b34:	dfc00017 	ldw	ra,0(sp)
 b38:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
 b3c:	0000bd01 	jmpi	bd0 <alt_icache_flush_all>
    {
      *to++ = *from++;
 b40:	19400017 	ldw	r5,0(r3)
 b44:	10800104 	addi	r2,r2,4
 b48:	18c00104 	addi	r3,r3,4
 b4c:	117fff15 	stw	r5,-4(r2)
 b50:	003fe606 	br	aec <alt_load+0x24>
 b54:	19400017 	ldw	r5,0(r3)
 b58:	10800104 	addi	r2,r2,4
 b5c:	18c00104 	addi	r3,r3,4
 b60:	117fff15 	stw	r5,-4(r2)
 b64:	003fe906 	br	b0c <alt_load+0x44>
 b68:	19400017 	ldw	r5,0(r3)
 b6c:	10800104 	addi	r2,r2,4
 b70:	18c00104 	addi	r3,r3,4
 b74:	117fff15 	stw	r5,-4(r2)
 b78:	003fec06 	br	b2c <alt_load+0x64>

00000b7c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 b7c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 b80:	0009883a 	mov	r4,zero
{
 b84:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
 b88:	0000ba80 	call	ba8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 b8c:	0000bc80 	call	bc8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 b90:	d1a00617 	ldw	r6,-32744(gp)
 b94:	d1600717 	ldw	r5,-32740(gp)
 b98:	d1200817 	ldw	r4,-32736(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 b9c:	dfc00017 	ldw	ra,0(sp)
 ba0:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
 ba4:	00006d41 	jmpi	6d4 <main>

00000ba8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 ba8:	deffff04 	addi	sp,sp,-4
 bac:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 bb0:	0000c440 	call	c44 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 bb4:	00800044 	movi	r2,1
 bb8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 bbc:	dfc00017 	ldw	ra,0(sp)
 bc0:	dec00104 	addi	sp,sp,4
 bc4:	f800283a 	ret

00000bc8 <alt_sys_init>:
void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_MIN, timer_min);
    ALTERA_AVALON_TIMER_INIT ( TIMER_MS, timer_MS);
    ALTERA_AVALON_TIMER_INIT ( TIMER_S, timer_S);
}
 bc8:	f800283a 	ret

00000bcc <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 bcc:	f800283a 	ret

00000bd0 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 bd0:	f800283a 	ret

00000bd4 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
 bd4:	213ffe84 	addi	r4,r4,-6
 bd8:	20800428 	cmpgeui	r2,r4,16
 bdc:	1000151e 	bne	r2,zero,c34 <alt_exception_cause_generated_bad_addr+0x60>
 be0:	200890ba 	slli	r4,r4,2
 be4:	00800034 	movhi	r2,0
 be8:	2085883a 	add	r2,r4,r2
 bec:	1082fd17 	ldw	r2,3060(r2)
 bf0:	1000683a 	jmp	r2
 bf4:	00000c3c 	xorhi	zero,zero,48
 bf8:	00000c3c 	xorhi	zero,zero,48
 bfc:	00000c34 	movhi	zero,48
 c00:	00000c34 	movhi	zero,48
 c04:	00000c34 	movhi	zero,48
 c08:	00000c3c 	xorhi	zero,zero,48
 c0c:	00000c34 	movhi	zero,48
 c10:	00000c34 	movhi	zero,48
 c14:	00000c3c 	xorhi	zero,zero,48
 c18:	00000c3c 	xorhi	zero,zero,48
 c1c:	00000c34 	movhi	zero,48
 c20:	00000c3c 	xorhi	zero,zero,48
 c24:	00000c34 	movhi	zero,48
 c28:	00000c34 	movhi	zero,48
 c2c:	00000c34 	movhi	zero,48
 c30:	00000c3c 	xorhi	zero,zero,48
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 c34:	0005883a 	mov	r2,zero
 c38:	f800283a 	ret
 c3c:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
 c40:	f800283a 	ret

00000c44 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 c44:	000170fa 	wrctl	ienable,zero
}
 c48:	f800283a 	ret
