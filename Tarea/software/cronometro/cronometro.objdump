
cronometro.elf:     file format elf32-littlenios2
cronometro.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000180

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000c1c memsz 0x00000c1c flags r-x
    LOAD off    0x00002000 vaddr 0x00010000 paddr 0x00000c3c align 2**12
         filesz 0x00000004 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000abc  00000180  00000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  00010000  00000c40  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000004  00010000  00000c3c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  00010004  00000c40  00002004  2**2
                  ALLOC, SMALL_DATA
  6 .ROM          00000000  00000c40  00000c40  00002004  2**0
                  CONTENTS
  7 .RAM          00000000  00010128  00010128  00002004  2**0
                  CONTENTS
  8 .comment      0000002c  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000238  00000000  00000000  00002030  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00007485  00000000  00000000  00002268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001aec  00000000  00000000  000096ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001f27  00000000  00000000  0000b1d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000002d8  00000000  00000000  0000d100  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000011ff  00000000  00000000  0000d3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00001028  00000000  00000000  0000e5d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0000f600  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000001f8  00000000  00000000  0000f610  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000108bd  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  000108c0  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000108c3  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000108c4  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000004  00000000  00000000  000108c5  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000004  00000000  00000000  000108c9  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000004  00000000  00000000  000108cd  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  000108d1  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000001e  00000000  00000000  000108d9  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006cec2  00000000  00000000  000108f7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000180 l    d  .text	00000000 .text
00010000 l    d  .rodata	00000000 .rodata
00010000 l    d  .rwdata	00000000 .rwdata
00010004 l    d  .bss	00000000 .bss
00000c40 l    d  .ROM	00000000 .ROM
00010128 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cronometro_bsp//obj/HAL/src/crt0.o
000001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000001bc l     F .text	0000001c play_btn
000001d8 l     F .text	00000194 timer_min_inter
00010008 l     O .bss	00000004 cont_min
0000036c l     F .text	000001b0 timer_ms_inter
0001000c l     O .bss	00000004 cont_mseg
0000051c l     F .text	000001b0 timer_s_inter
00010010 l     O .bss	00000004 cont_seg
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00010024 g     O .bss	00000004 alt_instruction_exception_handler
00000b6c g     F .text	0000002c alt_main
00010028 g     O .bss	00000100 alt_irq
00000c3c g       *ABS*	00000000 __flash_rwdata_start
00000c34 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001001c g     O .bss	00000004 alt_argv
00018000 g       *ABS*	00000000 _gp
00000bc4 g     F .text	00000070 alt_exception_cause_generated_bad_addr
00000904 g     F .text	00000064 .hidden __udivsi3
00010128 g       *ABS*	00000000 __bss_end
00000a50 g     F .text	00000068 alt_iic_isr_register
00000000 g       *ABS*	00000000 __alt_mem_ROM
00000a38 g     F .text	00000018 alt_ic_irq_enabled
00010014 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000060 alt_irq_handler
00000bbc g     F .text	00000004 alt_dcache_flush_all
00010004 g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __ram_rodata_end
00000968 g     F .text	0000005c .hidden __umodsi3
00010128 g       *ABS*	00000000 end
0000015c g     F .exceptions	00000024 alt_instruction_exception_entry
00011000 g       *ABS*	00000000 __alt_stack_pointer
00000180 g     F .text	0000003c _start
00000bb8 g     F .text	00000004 alt_sys_init
00010000 g       *ABS*	00000000 __ram_rwdata_start
00010000 g       *ABS*	00000000 __ram_rodata_start
00010128 g       *ABS*	00000000 __alt_stack_base
00010004 g     O .bss	00000004 init
00010004 g       *ABS*	00000000 __bss_start
000006cc g     F .text	00000144 main
00010000 g       *ABS*	00000000 __alt_mem_RAM
00010018 g     O .bss	00000004 alt_envp
00000810 g     F .text	00000080 .hidden __divsi3
00000c3c g       *ABS*	00000000 __flash_rodata_start
00000b98 g     F .text	00000020 alt_irq_init
00010020 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00000020 g       *ABS*	00000000 __ram_exceptions_start
000009c4 g     F .text	00000004 alt_ic_isr_register
00010004 g       *ABS*	00000000 _edata
00010128 g       *ABS*	00000000 _end
00000180 g       *ABS*	00000000 __ram_exceptions_end
00000a00 g     F .text	00000038 alt_ic_irq_disable
00000890 g     F .text	00000074 .hidden __modsi3
00011000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000000c g       .entry	00000000 _exit
00000bc0 g     F .text	00000004 alt_icache_flush_all
00010000 g     O .rwdata	00000004 alt_priority_mask
000009c8 g     F .text	00000038 alt_ic_irq_enable
00000ab8 g     F .text	000000b4 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406014 	ori	at,at,384
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	000015c0 	call	15c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 10c:	04000074 	movhi	r16,1
 110:	84000a04 	addi	r16,r16,40
    i = 0;
 114:	0005883a 	mov	r2,zero
    mask = 1;
 118:	00c00044 	movi	r3,1
      if (active & mask)
 11c:	20ca703a 	and	r5,r4,r3
 120:	28000b26 	beq	r5,zero,150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context); 
 124:	100490fa 	slli	r2,r2,3
 128:	8085883a 	add	r2,r16,r2
 12c:	10c00017 	ldw	r3,0(r2)
 130:	11000117 	ldw	r4,4(r2)
 134:	183ee83a 	callr	r3
 138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 13c:	203ff51e 	bne	r4,zero,114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 140:	dfc00117 	ldw	ra,4(sp)
 144:	dc000017 	ldw	r16,0(sp)
 148:	dec00204 	addi	sp,sp,8
 14c:	f800283a 	ret
      mask <<= 1;
 150:	1806907a 	slli	r3,r3,1
      i++;
 154:	10800044 	addi	r2,r2,1
      if (active & mask)
 158:	003ff006 	br	11c <alt_irq_handler+0x20>

0000015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 15c:	d0a00917 	ldw	r2,-32732(gp)
{
 160:	200b883a 	mov	r5,r4
  if(alt_instruction_exception_handler) {
 164:	10000326 	beq	r2,zero,174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 168:	000d883a 	mov	r6,zero
 16c:	013fffc4 	movi	r4,-1
 170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 178:	0005883a 	mov	r2,zero
 17c:	f800283a 	ret

Disassembly of section .text:

00000180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 180:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
 184:	dec40014 	ori	sp,sp,4096
    movhi gp, %hi(_gp)
 188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
 18c:	d6a00014 	ori	gp,gp,32768
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
 194:	10800114 	ori	r2,r2,4

    movhi r3, %hi(__bss_end)
 198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
 19c:	18c04a14 	ori	r3,r3,296

    beq r2, r3, 1f
 1a0:	10c00326 	beq	r2,r3,1b0 <_start+0x30>

0:
    stw zero, (r2)
 1a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1ac:	10fffd36 	bltu	r2,r3,1a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1b0:	0000ab80 	call	ab8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1b4:	0000b6c0 	call	b6c <alt_main>

000001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1b8:	003fff06 	br	1b8 <alt_after_alt_main>

000001bc <play_btn>:


static void play_btn(void *context)
{
	(void) context;
	if (init==0){init=1;}else{init=0;}
 1bc:	d0a00117 	ldw	r2,-32764(gp)
 1c0:	1000031e 	bne	r2,zero,1d0 <play_btn+0x14>
 1c4:	00800044 	movi	r2,1
 1c8:	d0a00115 	stw	r2,-32764(gp)
 1cc:	f800283a 	ret
 1d0:	d0200115 	stw	zero,-32764(gp)
}
 1d4:	f800283a 	ret

000001d8 <timer_min_inter>:

// Funcion encargada del manejo de interrupciones del timer de los minutos
static void timer_min_inter(void *context)
{
	(void) context;
	cont_min ++;
 1d8:	d0a00217 	ldw	r2,-32760(gp)
{
 1dc:	defffe04 	addi	sp,sp,-8
 1e0:	dfc00115 	stw	ra,4(sp)
	cont_min ++;
 1e4:	10800044 	addi	r2,r2,1
{
 1e8:	dc000015 	stw	r16,0(sp)
	if (cont_min > 59){
 1ec:	10c00f08 	cmpgei	r3,r2,60
 1f0:	1800381e 	bne	r3,zero,2d4 <timer_min_inter+0xfc>
	cont_min ++;
 1f4:	d0a00215 	stw	r2,-32760(gp)
		cont_min = 0;
	}

	int digito1 = cont_min%10;
 1f8:	d1200217 	ldw	r4,-32760(gp)
 1fc:	01400284 	movi	r5,10
 200:	00008900 	call	890 <__modsi3>
	int digito2 = (int)((cont_min - (int)cont_min % 10)/10);
 204:	d1200217 	ldw	r4,-32760(gp)
	int digito1 = cont_min%10;
 208:	1021883a 	mov	r16,r2
	int digito2 = (int)((cont_min - (int)cont_min % 10)/10);
 20c:	01400284 	movi	r5,10
 210:	2089c83a 	sub	r4,r4,r2
 214:	00008100 	call	810 <__divsi3>
	unsigned Output1 = 0;
	unsigned Output2 = 0;


	if (digito1 == 0){Output1 = 1;}
 218:	80003026 	beq	r16,zero,2dc <timer_min_inter+0x104>
	else if (digito1 == 1){Output1 = 79;}
 21c:	80c00060 	cmpeqi	r3,r16,1
 220:	1800301e 	bne	r3,zero,2e4 <timer_min_inter+0x10c>
	else if (digito1 == 2){Output1 = 18;}
 224:	80c000a0 	cmpeqi	r3,r16,2
 228:	1800301e 	bne	r3,zero,2ec <timer_min_inter+0x114>
	else if (digito1 == 3){Output1 = 6;}
 22c:	80c000e0 	cmpeqi	r3,r16,3
 230:	1800301e 	bne	r3,zero,2f4 <timer_min_inter+0x11c>
	else if (digito1 == 4){Output1 = 76;}
 234:	80c00120 	cmpeqi	r3,r16,4
 238:	1800301e 	bne	r3,zero,2fc <timer_min_inter+0x124>
	else if (digito1 == 5){Output1 = 36;}
 23c:	80c00160 	cmpeqi	r3,r16,5
 240:	1800301e 	bne	r3,zero,304 <timer_min_inter+0x12c>
	else if (digito1 == 6){Output1 = 32;}
 244:	80c001a0 	cmpeqi	r3,r16,6
 248:	1800301e 	bne	r3,zero,30c <timer_min_inter+0x134>
	else if (digito1 == 7){Output1 = 15;}
 24c:	80c001e0 	cmpeqi	r3,r16,7
 250:	1800301e 	bne	r3,zero,314 <timer_min_inter+0x13c>
	unsigned Output1 = 0;
 254:	80c00260 	cmpeqi	r3,r16,9
 258:	180690ba 	slli	r3,r3,2
	else if (digito1 == 8){Output1 = 0;}
	else if (digito1 == 9){Output1 = 4;}else{Output2 = 127;}

	if (digito2 == 0){Output2 = 1;}
 25c:	10002f26 	beq	r2,zero,31c <timer_min_inter+0x144>
	else if (digito2 == 1){Output2 = 79;}
 260:	11000060 	cmpeqi	r4,r2,1
 264:	20002f1e 	bne	r4,zero,324 <timer_min_inter+0x14c>
	else if (digito2 == 2){Output2 = 18;}
 268:	110000a0 	cmpeqi	r4,r2,2
 26c:	20002f1e 	bne	r4,zero,32c <timer_min_inter+0x154>
	else if (digito2 == 3){Output2 = 6;}
 270:	110000e0 	cmpeqi	r4,r2,3
 274:	20002f1e 	bne	r4,zero,334 <timer_min_inter+0x15c>
	else if (digito2 == 4){Output2 = 76;}
 278:	11000120 	cmpeqi	r4,r2,4
 27c:	20002f1e 	bne	r4,zero,33c <timer_min_inter+0x164>
	else if (digito2 == 5){Output2 = 36;}
 280:	11000160 	cmpeqi	r4,r2,5
 284:	20002f1e 	bne	r4,zero,344 <timer_min_inter+0x16c>
	else if (digito2 == 6){Output2 = 32;}
 288:	110001a0 	cmpeqi	r4,r2,6
 28c:	20002f1e 	bne	r4,zero,34c <timer_min_inter+0x174>
	else if (digito2 == 7){Output2 = 15;}
 290:	110001e0 	cmpeqi	r4,r2,7
 294:	20002f1e 	bne	r4,zero,354 <timer_min_inter+0x17c>
	else if (digito2 == 8){Output2 = 0;}
 298:	11000220 	cmpeqi	r4,r2,8
 29c:	20002f1e 	bne	r4,zero,35c <timer_min_inter+0x184>
	else if (digito2 == 9){Output2 = 4;}else{Output2 = 127;}
 2a0:	10800260 	cmpeqi	r2,r2,9
 2a4:	10002f1e 	bne	r2,zero,364 <timer_min_inter+0x18c>
 2a8:	00801fc4 	movi	r2,127


	// salida de los displays
	IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_5_BASE,Output2);
 2ac:	01000474 	movhi	r4,17
 2b0:	20800035 	stwio	r2,0(r4)
	IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_6_BASE,Output1);
 2b4:	008004b4 	movhi	r2,18
 2b8:	10c00035 	stwio	r3,0(r2)

	//fin de la interrupcion
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_MIN_BASE,0);
 2bc:	00800434 	movhi	r2,16
 2c0:	10000035 	stwio	zero,0(r2)

}
 2c4:	dfc00117 	ldw	ra,4(sp)
 2c8:	dc000017 	ldw	r16,0(sp)
 2cc:	dec00204 	addi	sp,sp,8
 2d0:	f800283a 	ret
		cont_min = 0;
 2d4:	d0200215 	stw	zero,-32760(gp)
 2d8:	003fc706 	br	1f8 <timer_min_inter+0x20>
	if (digito1 == 0){Output1 = 1;}
 2dc:	00c00044 	movi	r3,1
 2e0:	003fde06 	br	25c <timer_min_inter+0x84>
	else if (digito1 == 1){Output1 = 79;}
 2e4:	00c013c4 	movi	r3,79
 2e8:	003fdc06 	br	25c <timer_min_inter+0x84>
	else if (digito1 == 2){Output1 = 18;}
 2ec:	00c00484 	movi	r3,18
 2f0:	003fda06 	br	25c <timer_min_inter+0x84>
	else if (digito1 == 3){Output1 = 6;}
 2f4:	00c00184 	movi	r3,6
 2f8:	003fd806 	br	25c <timer_min_inter+0x84>
	else if (digito1 == 4){Output1 = 76;}
 2fc:	00c01304 	movi	r3,76
 300:	003fd606 	br	25c <timer_min_inter+0x84>
	else if (digito1 == 5){Output1 = 36;}
 304:	00c00904 	movi	r3,36
 308:	003fd406 	br	25c <timer_min_inter+0x84>
	else if (digito1 == 6){Output1 = 32;}
 30c:	00c00804 	movi	r3,32
 310:	003fd206 	br	25c <timer_min_inter+0x84>
	else if (digito1 == 7){Output1 = 15;}
 314:	00c003c4 	movi	r3,15
 318:	003fd006 	br	25c <timer_min_inter+0x84>
	if (digito2 == 0){Output2 = 1;}
 31c:	00800044 	movi	r2,1
 320:	003fe206 	br	2ac <timer_min_inter+0xd4>
	else if (digito2 == 1){Output2 = 79;}
 324:	008013c4 	movi	r2,79
 328:	003fe006 	br	2ac <timer_min_inter+0xd4>
	else if (digito2 == 2){Output2 = 18;}
 32c:	00800484 	movi	r2,18
 330:	003fde06 	br	2ac <timer_min_inter+0xd4>
	else if (digito2 == 3){Output2 = 6;}
 334:	00800184 	movi	r2,6
 338:	003fdc06 	br	2ac <timer_min_inter+0xd4>
	else if (digito2 == 4){Output2 = 76;}
 33c:	00801304 	movi	r2,76
 340:	003fda06 	br	2ac <timer_min_inter+0xd4>
	else if (digito2 == 5){Output2 = 36;}
 344:	00800904 	movi	r2,36
 348:	003fd806 	br	2ac <timer_min_inter+0xd4>
	else if (digito2 == 6){Output2 = 32;}
 34c:	00800804 	movi	r2,32
 350:	003fd606 	br	2ac <timer_min_inter+0xd4>
	else if (digito2 == 7){Output2 = 15;}
 354:	008003c4 	movi	r2,15
 358:	003fd406 	br	2ac <timer_min_inter+0xd4>
	else if (digito2 == 8){Output2 = 0;}
 35c:	0005883a 	mov	r2,zero
 360:	003fd206 	br	2ac <timer_min_inter+0xd4>
	else if (digito2 == 9){Output2 = 4;}else{Output2 = 127;}
 364:	00800104 	movi	r2,4
 368:	003fd006 	br	2ac <timer_min_inter+0xd4>

0000036c <timer_ms_inter>:
	cont_mseg ++;
 36c:	d0a00317 	ldw	r2,-32756(gp)
{
 370:	defffe04 	addi	sp,sp,-8
 374:	dfc00115 	stw	ra,4(sp)
	cont_mseg ++;
 378:	10800044 	addi	r2,r2,1
{
 37c:	dc000015 	stw	r16,0(sp)
	if (cont_mseg > 59){
 380:	10c00f08 	cmpgei	r3,r2,60
 384:	18003b1e 	bne	r3,zero,474 <timer_ms_inter+0x108>
	cont_mseg ++;
 388:	d0a00315 	stw	r2,-32756(gp)
	int digito1 = cont_mseg%10;
 38c:	d1200317 	ldw	r4,-32756(gp)
 390:	01400284 	movi	r5,10
 394:	00008900 	call	890 <__modsi3>
	int digito2 = (int)((cont_mseg - (int)cont_mseg % 10)/10);
 398:	d1200317 	ldw	r4,-32756(gp)
	int digito1 = cont_mseg%10;
 39c:	1021883a 	mov	r16,r2
	int digito2 = (int)((cont_mseg - (int)cont_mseg % 10)/10);
 3a0:	01400284 	movi	r5,10
 3a4:	2089c83a 	sub	r4,r4,r2
 3a8:	00008100 	call	810 <__divsi3>
	if (digito1 == 0){Output1 = 1;}
 3ac:	80003326 	beq	r16,zero,47c <timer_ms_inter+0x110>
	else if (digito1 == 1){Output1 = 79;}
 3b0:	80c00060 	cmpeqi	r3,r16,1
 3b4:	1800331e 	bne	r3,zero,484 <timer_ms_inter+0x118>
	else if (digito1 == 2){Output1 = 18;}
 3b8:	80c000a0 	cmpeqi	r3,r16,2
 3bc:	1800331e 	bne	r3,zero,48c <timer_ms_inter+0x120>
	else if (digito1 == 3){Output1 = 6;}
 3c0:	80c000e0 	cmpeqi	r3,r16,3
 3c4:	1800331e 	bne	r3,zero,494 <timer_ms_inter+0x128>
	else if (digito1 == 4){Output1 = 76;}
 3c8:	80c00120 	cmpeqi	r3,r16,4
 3cc:	1800331e 	bne	r3,zero,49c <timer_ms_inter+0x130>
	else if (digito1 == 5){Output1 = 36;}
 3d0:	80c00160 	cmpeqi	r3,r16,5
 3d4:	1800331e 	bne	r3,zero,4a4 <timer_ms_inter+0x138>
	else if (digito1 == 6){Output1 = 32;}
 3d8:	80c001a0 	cmpeqi	r3,r16,6
 3dc:	1800331e 	bne	r3,zero,4ac <timer_ms_inter+0x140>
	else if (digito1 == 7){Output1 = 15;}
 3e0:	80c001e0 	cmpeqi	r3,r16,7
 3e4:	1800331e 	bne	r3,zero,4b4 <timer_ms_inter+0x148>
	else if (digito1 == 8){Output1 = 0;}
 3e8:	80c00220 	cmpeqi	r3,r16,8
 3ec:	1800331e 	bne	r3,zero,4bc <timer_ms_inter+0x150>
	else if (digito1 == 9){Output1 = 4;}else{Output1 = 127;}
 3f0:	84000260 	cmpeqi	r16,r16,9
 3f4:	8000331e 	bne	r16,zero,4c4 <timer_ms_inter+0x158>
 3f8:	00c01fc4 	movi	r3,127
	if (digito2 == 0){Output2 = 1;}
 3fc:	10003326 	beq	r2,zero,4cc <timer_ms_inter+0x160>
	else if (digito2 == 1){Output2 = 79;}
 400:	11000060 	cmpeqi	r4,r2,1
 404:	2000331e 	bne	r4,zero,4d4 <timer_ms_inter+0x168>
	else if (digito2 == 2){Output2 = 18;}
 408:	110000a0 	cmpeqi	r4,r2,2
 40c:	2000331e 	bne	r4,zero,4dc <timer_ms_inter+0x170>
	else if (digito2 == 3){Output2 = 6;}
 410:	110000e0 	cmpeqi	r4,r2,3
 414:	2000331e 	bne	r4,zero,4e4 <timer_ms_inter+0x178>
	else if (digito2 == 4){Output2 = 76;}
 418:	11000120 	cmpeqi	r4,r2,4
 41c:	2000331e 	bne	r4,zero,4ec <timer_ms_inter+0x180>
	else if (digito2 == 5){Output2 = 36;}
 420:	11000160 	cmpeqi	r4,r2,5
 424:	2000331e 	bne	r4,zero,4f4 <timer_ms_inter+0x188>
	else if (digito2 == 6){Output2 = 32;}
 428:	110001a0 	cmpeqi	r4,r2,6
 42c:	2000331e 	bne	r4,zero,4fc <timer_ms_inter+0x190>
	else if (digito2 == 7){Output2 = 15;}
 430:	110001e0 	cmpeqi	r4,r2,7
 434:	2000331e 	bne	r4,zero,504 <timer_ms_inter+0x198>
	else if (digito2 == 8){Output2 = 0;}
 438:	11000220 	cmpeqi	r4,r2,8
 43c:	2000331e 	bne	r4,zero,50c <timer_ms_inter+0x1a0>
	else if (digito2 == 9){Output2 = 4;}else{Output2 = 127;}
 440:	10800260 	cmpeqi	r2,r2,9
 444:	1000331e 	bne	r2,zero,514 <timer_ms_inter+0x1a8>
 448:	00801fc4 	movi	r2,127
	IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_1_BASE,Output2);
 44c:	01000134 	movhi	r4,4
 450:	20800035 	stwio	r2,0(r4)
	IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_2_BASE,Output1);
 454:	00800174 	movhi	r2,5
 458:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_MS_BASE,0);
 45c:	008000f4 	movhi	r2,3
 460:	10000035 	stwio	zero,0(r2)
}
 464:	dfc00117 	ldw	ra,4(sp)
 468:	dc000017 	ldw	r16,0(sp)
 46c:	dec00204 	addi	sp,sp,8
 470:	f800283a 	ret
		cont_mseg = 0;
 474:	d0200315 	stw	zero,-32756(gp)
 478:	003fc406 	br	38c <timer_ms_inter+0x20>
	if (digito1 == 0){Output1 = 1;}
 47c:	00c00044 	movi	r3,1
 480:	003fde06 	br	3fc <timer_ms_inter+0x90>
	else if (digito1 == 1){Output1 = 79;}
 484:	00c013c4 	movi	r3,79
 488:	003fdc06 	br	3fc <timer_ms_inter+0x90>
	else if (digito1 == 2){Output1 = 18;}
 48c:	00c00484 	movi	r3,18
 490:	003fda06 	br	3fc <timer_ms_inter+0x90>
	else if (digito1 == 3){Output1 = 6;}
 494:	00c00184 	movi	r3,6
 498:	003fd806 	br	3fc <timer_ms_inter+0x90>
	else if (digito1 == 4){Output1 = 76;}
 49c:	00c01304 	movi	r3,76
 4a0:	003fd606 	br	3fc <timer_ms_inter+0x90>
	else if (digito1 == 5){Output1 = 36;}
 4a4:	00c00904 	movi	r3,36
 4a8:	003fd406 	br	3fc <timer_ms_inter+0x90>
	else if (digito1 == 6){Output1 = 32;}
 4ac:	00c00804 	movi	r3,32
 4b0:	003fd206 	br	3fc <timer_ms_inter+0x90>
	else if (digito1 == 7){Output1 = 15;}
 4b4:	00c003c4 	movi	r3,15
 4b8:	003fd006 	br	3fc <timer_ms_inter+0x90>
	else if (digito1 == 8){Output1 = 0;}
 4bc:	0007883a 	mov	r3,zero
 4c0:	003fce06 	br	3fc <timer_ms_inter+0x90>
	else if (digito1 == 9){Output1 = 4;}else{Output1 = 127;}
 4c4:	00c00104 	movi	r3,4
 4c8:	003fcc06 	br	3fc <timer_ms_inter+0x90>
	if (digito2 == 0){Output2 = 1;}
 4cc:	00800044 	movi	r2,1
 4d0:	003fde06 	br	44c <timer_ms_inter+0xe0>
	else if (digito2 == 1){Output2 = 79;}
 4d4:	008013c4 	movi	r2,79
 4d8:	003fdc06 	br	44c <timer_ms_inter+0xe0>
	else if (digito2 == 2){Output2 = 18;}
 4dc:	00800484 	movi	r2,18
 4e0:	003fda06 	br	44c <timer_ms_inter+0xe0>
	else if (digito2 == 3){Output2 = 6;}
 4e4:	00800184 	movi	r2,6
 4e8:	003fd806 	br	44c <timer_ms_inter+0xe0>
	else if (digito2 == 4){Output2 = 76;}
 4ec:	00801304 	movi	r2,76
 4f0:	003fd606 	br	44c <timer_ms_inter+0xe0>
	else if (digito2 == 5){Output2 = 36;}
 4f4:	00800904 	movi	r2,36
 4f8:	003fd406 	br	44c <timer_ms_inter+0xe0>
	else if (digito2 == 6){Output2 = 32;}
 4fc:	00800804 	movi	r2,32
 500:	003fd206 	br	44c <timer_ms_inter+0xe0>
	else if (digito2 == 7){Output2 = 15;}
 504:	008003c4 	movi	r2,15
 508:	003fd006 	br	44c <timer_ms_inter+0xe0>
	else if (digito2 == 8){Output2 = 0;}
 50c:	0005883a 	mov	r2,zero
 510:	003fce06 	br	44c <timer_ms_inter+0xe0>
	else if (digito2 == 9){Output2 = 4;}else{Output2 = 127;}
 514:	00800104 	movi	r2,4
 518:	003fcc06 	br	44c <timer_ms_inter+0xe0>

0000051c <timer_s_inter>:
	cont_seg ++;
 51c:	d0a00417 	ldw	r2,-32752(gp)
{
 520:	defffe04 	addi	sp,sp,-8
 524:	dfc00115 	stw	ra,4(sp)
	cont_seg ++;
 528:	10800044 	addi	r2,r2,1
{
 52c:	dc000015 	stw	r16,0(sp)
	if (cont_seg > 59){
 530:	10c00f08 	cmpgei	r3,r2,60
 534:	18003b1e 	bne	r3,zero,624 <timer_s_inter+0x108>
	cont_seg ++;
 538:	d0a00415 	stw	r2,-32752(gp)
	int digito1 = cont_seg%10;
 53c:	d1200417 	ldw	r4,-32752(gp)
 540:	01400284 	movi	r5,10
 544:	00008900 	call	890 <__modsi3>
	int digito2 = (int)((cont_seg - (int)cont_seg % 10)/10);
 548:	d1200417 	ldw	r4,-32752(gp)
	int digito1 = cont_seg%10;
 54c:	1021883a 	mov	r16,r2
	int digito2 = (int)((cont_seg - (int)cont_seg % 10)/10);
 550:	01400284 	movi	r5,10
 554:	2089c83a 	sub	r4,r4,r2
 558:	00008100 	call	810 <__divsi3>
	if (digito1 == 0){Output1 = 1;}
 55c:	80003326 	beq	r16,zero,62c <timer_s_inter+0x110>
	else if (digito1 == 1){Output1 = 79;}
 560:	80c00060 	cmpeqi	r3,r16,1
 564:	1800331e 	bne	r3,zero,634 <timer_s_inter+0x118>
	else if (digito1 == 2){Output1 = 18;}
 568:	80c000a0 	cmpeqi	r3,r16,2
 56c:	1800331e 	bne	r3,zero,63c <timer_s_inter+0x120>
	else if (digito1 == 3){Output1 = 6;}
 570:	80c000e0 	cmpeqi	r3,r16,3
 574:	1800331e 	bne	r3,zero,644 <timer_s_inter+0x128>
	else if (digito1 == 4){Output1 = 76;}
 578:	80c00120 	cmpeqi	r3,r16,4
 57c:	1800331e 	bne	r3,zero,64c <timer_s_inter+0x130>
	else if (digito1 == 5){Output1 = 36;}
 580:	80c00160 	cmpeqi	r3,r16,5
 584:	1800331e 	bne	r3,zero,654 <timer_s_inter+0x138>
	else if (digito1 == 6){Output1 = 32;}
 588:	80c001a0 	cmpeqi	r3,r16,6
 58c:	1800331e 	bne	r3,zero,65c <timer_s_inter+0x140>
	else if (digito1 == 7){Output1 = 15;}
 590:	80c001e0 	cmpeqi	r3,r16,7
 594:	1800331e 	bne	r3,zero,664 <timer_s_inter+0x148>
	else if (digito1 == 8){Output1 = 0;}
 598:	80c00220 	cmpeqi	r3,r16,8
 59c:	1800331e 	bne	r3,zero,66c <timer_s_inter+0x150>
	else if (digito1 == 9){Output1 = 4;}else{Output1 = 127;}
 5a0:	84000260 	cmpeqi	r16,r16,9
 5a4:	8000331e 	bne	r16,zero,674 <timer_s_inter+0x158>
 5a8:	00c01fc4 	movi	r3,127
	if (digito2 == 0){Output2 = 1;}
 5ac:	10003326 	beq	r2,zero,67c <timer_s_inter+0x160>
	else if (digito2 == 1){Output2 = 79;}
 5b0:	11000060 	cmpeqi	r4,r2,1
 5b4:	2000331e 	bne	r4,zero,684 <timer_s_inter+0x168>
	else if (digito2 == 2){Output2 = 18;}
 5b8:	110000a0 	cmpeqi	r4,r2,2
 5bc:	2000331e 	bne	r4,zero,68c <timer_s_inter+0x170>
	else if (digito2 == 3){Output2 = 6;}
 5c0:	110000e0 	cmpeqi	r4,r2,3
 5c4:	2000331e 	bne	r4,zero,694 <timer_s_inter+0x178>
	else if (digito2 == 4){Output2 = 76;}
 5c8:	11000120 	cmpeqi	r4,r2,4
 5cc:	2000331e 	bne	r4,zero,69c <timer_s_inter+0x180>
	else if (digito2 == 5){Output2 = 36;}
 5d0:	11000160 	cmpeqi	r4,r2,5
 5d4:	2000331e 	bne	r4,zero,6a4 <timer_s_inter+0x188>
	else if (digito2 == 6){Output2 = 32;}
 5d8:	110001a0 	cmpeqi	r4,r2,6
 5dc:	2000331e 	bne	r4,zero,6ac <timer_s_inter+0x190>
	else if (digito2 == 7){Output2 = 15;}
 5e0:	110001e0 	cmpeqi	r4,r2,7
 5e4:	2000331e 	bne	r4,zero,6b4 <timer_s_inter+0x198>
	else if (digito2 == 8){Output2 = 0;}
 5e8:	11000220 	cmpeqi	r4,r2,8
 5ec:	2000331e 	bne	r4,zero,6bc <timer_s_inter+0x1a0>
	else if (digito2 == 9){Output2 = 4;}else{Output2 = 127;}
 5f0:	10800260 	cmpeqi	r2,r2,9
 5f4:	1000331e 	bne	r2,zero,6c4 <timer_s_inter+0x1a8>
 5f8:	00801fc4 	movi	r2,127
	IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_3_BASE,Output2);
 5fc:	010001b4 	movhi	r4,6
 600:	20800035 	stwio	r2,0(r4)
	IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_4_BASE,Output1);
 604:	008001f4 	movhi	r2,7
 608:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_S_BASE,0);
 60c:	008000b4 	movhi	r2,2
 610:	10000035 	stwio	zero,0(r2)
}
 614:	dfc00117 	ldw	ra,4(sp)
 618:	dc000017 	ldw	r16,0(sp)
 61c:	dec00204 	addi	sp,sp,8
 620:	f800283a 	ret
		cont_seg = 0;
 624:	d0200415 	stw	zero,-32752(gp)
 628:	003fc406 	br	53c <timer_s_inter+0x20>
	if (digito1 == 0){Output1 = 1;}
 62c:	00c00044 	movi	r3,1
 630:	003fde06 	br	5ac <timer_s_inter+0x90>
	else if (digito1 == 1){Output1 = 79;}
 634:	00c013c4 	movi	r3,79
 638:	003fdc06 	br	5ac <timer_s_inter+0x90>
	else if (digito1 == 2){Output1 = 18;}
 63c:	00c00484 	movi	r3,18
 640:	003fda06 	br	5ac <timer_s_inter+0x90>
	else if (digito1 == 3){Output1 = 6;}
 644:	00c00184 	movi	r3,6
 648:	003fd806 	br	5ac <timer_s_inter+0x90>
	else if (digito1 == 4){Output1 = 76;}
 64c:	00c01304 	movi	r3,76
 650:	003fd606 	br	5ac <timer_s_inter+0x90>
	else if (digito1 == 5){Output1 = 36;}
 654:	00c00904 	movi	r3,36
 658:	003fd406 	br	5ac <timer_s_inter+0x90>
	else if (digito1 == 6){Output1 = 32;}
 65c:	00c00804 	movi	r3,32
 660:	003fd206 	br	5ac <timer_s_inter+0x90>
	else if (digito1 == 7){Output1 = 15;}
 664:	00c003c4 	movi	r3,15
 668:	003fd006 	br	5ac <timer_s_inter+0x90>
	else if (digito1 == 8){Output1 = 0;}
 66c:	0007883a 	mov	r3,zero
 670:	003fce06 	br	5ac <timer_s_inter+0x90>
	else if (digito1 == 9){Output1 = 4;}else{Output1 = 127;}
 674:	00c00104 	movi	r3,4
 678:	003fcc06 	br	5ac <timer_s_inter+0x90>
	if (digito2 == 0){Output2 = 1;}
 67c:	00800044 	movi	r2,1
 680:	003fde06 	br	5fc <timer_s_inter+0xe0>
	else if (digito2 == 1){Output2 = 79;}
 684:	008013c4 	movi	r2,79
 688:	003fdc06 	br	5fc <timer_s_inter+0xe0>
	else if (digito2 == 2){Output2 = 18;}
 68c:	00800484 	movi	r2,18
 690:	003fda06 	br	5fc <timer_s_inter+0xe0>
	else if (digito2 == 3){Output2 = 6;}
 694:	00800184 	movi	r2,6
 698:	003fd806 	br	5fc <timer_s_inter+0xe0>
	else if (digito2 == 4){Output2 = 76;}
 69c:	00801304 	movi	r2,76
 6a0:	003fd606 	br	5fc <timer_s_inter+0xe0>
	else if (digito2 == 5){Output2 = 36;}
 6a4:	00800904 	movi	r2,36
 6a8:	003fd406 	br	5fc <timer_s_inter+0xe0>
	else if (digito2 == 6){Output2 = 32;}
 6ac:	00800804 	movi	r2,32
 6b0:	003fd206 	br	5fc <timer_s_inter+0xe0>
	else if (digito2 == 7){Output2 = 15;}
 6b4:	008003c4 	movi	r2,15
 6b8:	003fd006 	br	5fc <timer_s_inter+0xe0>
	else if (digito2 == 8){Output2 = 0;}
 6bc:	0005883a 	mov	r2,zero
 6c0:	003fce06 	br	5fc <timer_s_inter+0xe0>
	else if (digito2 == 9){Output2 = 4;}else{Output2 = 127;}
 6c4:	00800104 	movi	r2,4
 6c8:	003fcc06 	br	5fc <timer_s_inter+0xe0>

000006cc <main>:



int main()
{ 
 6cc:	defffe04 	addi	sp,sp,-8
	unsigned modo = IORD_ALTERA_AVALON_PIO_DATA(SWITCHS_BASE);
 6d0:	00800234 	movhi	r2,8
{ 
 6d4:	dfc00115 	stw	ra,4(sp)
	unsigned modo = IORD_ALTERA_AVALON_PIO_DATA(SWITCHS_BASE);
 6d8:	10800037 	ldwio	r2,0(r2)
					  );

	alt_ic_isr_register(
					TIMER_MIN_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_MIN_IRQ,timer_min_inter,NULL,NULL
			  	  	  );*/
		if (modo == 2){
 6dc:	10c00098 	cmpnei	r3,r2,2
 6e0:	1800191e 	bne	r3,zero,748 <main+0x7c>
				alt_ic_isr_register(
 6e4:	01800034 	movhi	r6,0
 6e8:	d8000015 	stw	zero,0(sp)
 6ec:	000f883a 	mov	r7,zero
 6f0:	31806f04 	addi	r6,r6,444
 6f4:	01400084 	movi	r5,2
 6f8:	0009883a 	mov	r4,zero
 6fc:	00009c40 	call	9c4 <alt_ic_isr_register>
						BUTTON_IRQ_INTERRUPT_CONTROLLER_ID,BUTTON_IRQ,play_btn,NULL,NULL
						  );
				if(init==1){
 700:	d0a00117 	ldw	r2,-32764(gp)
 704:	10800060 	cmpeqi	r2,r2,1
 708:	10000726 	beq	r2,zero,728 <main+0x5c>
					alt_ic_isr_register(
 70c:	01800034 	movhi	r6,0
 710:	d8000015 	stw	zero,0(sp)
 714:	000f883a 	mov	r7,zero
 718:	31814704 	addi	r6,r6,1308
 71c:	000b883a 	mov	r5,zero

				alt_ic_isr_register(
						TIMER_MS_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_MS_IRQ,timer_ms_inter,NULL,NULL
						  );

				alt_ic_isr_register(
 720:	0009883a 	mov	r4,zero
 724:	00009c40 	call	9c4 <alt_ic_isr_register>
			}

		}
	//}

	IOWR_ALTERA_AVALON_TIMER_CONTROL(
 728:	008000c4 	movi	r2,3
 72c:	00c000b4 	movhi	r3,2
 730:	18800135 	stwio	r2,4(r3)
			TIMER_S_BASE,ALTERA_AVALON_TIMER_CONTROL_ITO_MSK | ALTERA_AVALON_TIMER_CONTROL_CONT_MSK);

	IOWR_ALTERA_AVALON_TIMER_CONTROL(
 734:	00c000f4 	movhi	r3,3
 738:	18800135 	stwio	r2,4(r3)
			TIMER_MS_BASE,ALTERA_AVALON_TIMER_CONTROL_ITO_MSK | ALTERA_AVALON_TIMER_CONTROL_CONT_MSK);

	IOWR_ALTERA_AVALON_TIMER_CONTROL(
 73c:	00c00434 	movhi	r3,16
 740:	18800135 	stwio	r2,4(r3)




  /* Event loop never exits. */
  while (1);
 744:	003fff06 	br	744 <main+0x78>
		}else if(modo == 1){
 748:	10c00058 	cmpnei	r3,r2,1
 74c:	1800101e 	bne	r3,zero,790 <main+0xc4>
			alt_ic_isr_register(
 750:	01800034 	movhi	r6,0
 754:	d8000015 	stw	zero,0(sp)
 758:	000f883a 	mov	r7,zero
 75c:	31806f04 	addi	r6,r6,444
 760:	01400084 	movi	r5,2
 764:	0009883a 	mov	r4,zero
 768:	00009c40 	call	9c4 <alt_ic_isr_register>
			if(init==1){
 76c:	d0a00117 	ldw	r2,-32764(gp)
 770:	10800058 	cmpnei	r2,r2,1
 774:	103fec1e 	bne	r2,zero,728 <main+0x5c>
				alt_ic_isr_register(
 778:	01800034 	movhi	r6,0
 77c:	d1600117 	ldw	r5,-32764(gp)
 780:	d8000015 	stw	zero,0(sp)
 784:	000f883a 	mov	r7,zero
 788:	3180db04 	addi	r6,r6,876
 78c:	003fe406 	br	720 <main+0x54>
		}else if(modo ==3){
 790:	108000d8 	cmpnei	r2,r2,3
 794:	103fe41e 	bne	r2,zero,728 <main+0x5c>
			alt_ic_isr_register(
 798:	01800034 	movhi	r6,0
 79c:	d8000015 	stw	zero,0(sp)
 7a0:	000f883a 	mov	r7,zero
 7a4:	31806f04 	addi	r6,r6,444
 7a8:	01400084 	movi	r5,2
 7ac:	0009883a 	mov	r4,zero
 7b0:	00009c40 	call	9c4 <alt_ic_isr_register>
			if(init==1){
 7b4:	d0a00117 	ldw	r2,-32764(gp)
 7b8:	10800058 	cmpnei	r2,r2,1
 7bc:	103fda1e 	bne	r2,zero,728 <main+0x5c>
				alt_ic_isr_register(
 7c0:	01800034 	movhi	r6,0
 7c4:	000f883a 	mov	r7,zero
 7c8:	31814704 	addi	r6,r6,1308
 7cc:	000b883a 	mov	r5,zero
 7d0:	0009883a 	mov	r4,zero
 7d4:	d8000015 	stw	zero,0(sp)
 7d8:	00009c40 	call	9c4 <alt_ic_isr_register>
				alt_ic_isr_register(
 7dc:	01800034 	movhi	r6,0
 7e0:	000f883a 	mov	r7,zero
 7e4:	3180db04 	addi	r6,r6,876
 7e8:	01400044 	movi	r5,1
 7ec:	d8000015 	stw	zero,0(sp)
 7f0:	0009883a 	mov	r4,zero
 7f4:	00009c40 	call	9c4 <alt_ic_isr_register>
				alt_ic_isr_register(
 7f8:	01800034 	movhi	r6,0
 7fc:	d8000015 	stw	zero,0(sp)
 800:	000f883a 	mov	r7,zero
 804:	31807604 	addi	r6,r6,472
 808:	014000c4 	movi	r5,3
 80c:	003fc406 	br	720 <main+0x54>

00000810 <__divsi3>:
 810:	20001a16 	blt	r4,zero,87c <__divsi3+0x6c>
 814:	000f883a 	mov	r7,zero
 818:	2800020e 	bge	r5,zero,824 <__divsi3+0x14>
 81c:	014bc83a 	sub	r5,zero,r5
 820:	39c0005c 	xori	r7,r7,1
 824:	200d883a 	mov	r6,r4
 828:	00c00044 	movi	r3,1
 82c:	2900092e 	bgeu	r5,r4,854 <__divsi3+0x44>
 830:	00800804 	movi	r2,32
 834:	00c00044 	movi	r3,1
 838:	00000106 	br	840 <__divsi3+0x30>
 83c:	10001226 	beq	r2,zero,888 <__divsi3+0x78>
 840:	294b883a 	add	r5,r5,r5
 844:	10bfffc4 	addi	r2,r2,-1
 848:	18c7883a 	add	r3,r3,r3
 84c:	293ffb36 	bltu	r5,r4,83c <__divsi3+0x2c>
 850:	18000d26 	beq	r3,zero,888 <__divsi3+0x78>
 854:	0005883a 	mov	r2,zero
 858:	31400236 	bltu	r6,r5,864 <__divsi3+0x54>
 85c:	314dc83a 	sub	r6,r6,r5
 860:	10c4b03a 	or	r2,r2,r3
 864:	1806d07a 	srli	r3,r3,1
 868:	280ad07a 	srli	r5,r5,1
 86c:	183ffa1e 	bne	r3,zero,858 <__divsi3+0x48>
 870:	38000126 	beq	r7,zero,878 <__divsi3+0x68>
 874:	0085c83a 	sub	r2,zero,r2
 878:	f800283a 	ret
 87c:	0109c83a 	sub	r4,zero,r4
 880:	01c00044 	movi	r7,1
 884:	003fe406 	br	818 <__divsi3+0x8>
 888:	0005883a 	mov	r2,zero
 88c:	003ff806 	br	870 <__divsi3+0x60>

00000890 <__modsi3>:
 890:	20001916 	blt	r4,zero,8f8 <__modsi3+0x68>
 894:	000f883a 	mov	r7,zero
 898:	2005883a 	mov	r2,r4
 89c:	2800010e 	bge	r5,zero,8a4 <__modsi3+0x14>
 8a0:	014bc83a 	sub	r5,zero,r5
 8a4:	00c00044 	movi	r3,1
 8a8:	2900092e 	bgeu	r5,r4,8d0 <__modsi3+0x40>
 8ac:	01800804 	movi	r6,32
 8b0:	00c00044 	movi	r3,1
 8b4:	00000106 	br	8bc <__modsi3+0x2c>
 8b8:	30000d26 	beq	r6,zero,8f0 <__modsi3+0x60>
 8bc:	294b883a 	add	r5,r5,r5
 8c0:	31bfffc4 	addi	r6,r6,-1
 8c4:	18c7883a 	add	r3,r3,r3
 8c8:	293ffb36 	bltu	r5,r4,8b8 <__modsi3+0x28>
 8cc:	18000826 	beq	r3,zero,8f0 <__modsi3+0x60>
 8d0:	1806d07a 	srli	r3,r3,1
 8d4:	11400136 	bltu	r2,r5,8dc <__modsi3+0x4c>
 8d8:	1145c83a 	sub	r2,r2,r5
 8dc:	280ad07a 	srli	r5,r5,1
 8e0:	183ffb1e 	bne	r3,zero,8d0 <__modsi3+0x40>
 8e4:	38000126 	beq	r7,zero,8ec <__modsi3+0x5c>
 8e8:	0085c83a 	sub	r2,zero,r2
 8ec:	f800283a 	ret
 8f0:	2005883a 	mov	r2,r4
 8f4:	003ffb06 	br	8e4 <__modsi3+0x54>
 8f8:	0109c83a 	sub	r4,zero,r4
 8fc:	01c00044 	movi	r7,1
 900:	003fe506 	br	898 <__modsi3+0x8>

00000904 <__udivsi3>:
 904:	200d883a 	mov	r6,r4
 908:	2900152e 	bgeu	r5,r4,960 <__udivsi3+0x5c>
 90c:	28001416 	blt	r5,zero,960 <__udivsi3+0x5c>
 910:	00800804 	movi	r2,32
 914:	00c00044 	movi	r3,1
 918:	00000206 	br	924 <__udivsi3+0x20>
 91c:	10000e26 	beq	r2,zero,958 <__udivsi3+0x54>
 920:	28000516 	blt	r5,zero,938 <__udivsi3+0x34>
 924:	294b883a 	add	r5,r5,r5
 928:	10bfffc4 	addi	r2,r2,-1
 92c:	18c7883a 	add	r3,r3,r3
 930:	293ffa36 	bltu	r5,r4,91c <__udivsi3+0x18>
 934:	18000826 	beq	r3,zero,958 <__udivsi3+0x54>
 938:	0005883a 	mov	r2,zero
 93c:	31400236 	bltu	r6,r5,948 <__udivsi3+0x44>
 940:	314dc83a 	sub	r6,r6,r5
 944:	10c4b03a 	or	r2,r2,r3
 948:	1806d07a 	srli	r3,r3,1
 94c:	280ad07a 	srli	r5,r5,1
 950:	183ffa1e 	bne	r3,zero,93c <__udivsi3+0x38>
 954:	f800283a 	ret
 958:	0005883a 	mov	r2,zero
 95c:	f800283a 	ret
 960:	00c00044 	movi	r3,1
 964:	003ff406 	br	938 <__udivsi3+0x34>

00000968 <__umodsi3>:
 968:	2005883a 	mov	r2,r4
 96c:	2900132e 	bgeu	r5,r4,9bc <__umodsi3+0x54>
 970:	28001216 	blt	r5,zero,9bc <__umodsi3+0x54>
 974:	01800804 	movi	r6,32
 978:	00c00044 	movi	r3,1
 97c:	00000206 	br	988 <__umodsi3+0x20>
 980:	30000c26 	beq	r6,zero,9b4 <__umodsi3+0x4c>
 984:	28000516 	blt	r5,zero,99c <__umodsi3+0x34>
 988:	294b883a 	add	r5,r5,r5
 98c:	31bfffc4 	addi	r6,r6,-1
 990:	18c7883a 	add	r3,r3,r3
 994:	293ffa36 	bltu	r5,r4,980 <__umodsi3+0x18>
 998:	18000626 	beq	r3,zero,9b4 <__umodsi3+0x4c>
 99c:	1806d07a 	srli	r3,r3,1
 9a0:	11400136 	bltu	r2,r5,9a8 <__umodsi3+0x40>
 9a4:	1145c83a 	sub	r2,r2,r5
 9a8:	280ad07a 	srli	r5,r5,1
 9ac:	183ffb1e 	bne	r3,zero,99c <__umodsi3+0x34>
 9b0:	f800283a 	ret
 9b4:	2005883a 	mov	r2,r4
 9b8:	f800283a 	ret
 9bc:	00c00044 	movi	r3,1
 9c0:	003ff606 	br	99c <__umodsi3+0x34>

000009c4 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 9c4:	0000a501 	jmpi	a50 <alt_iic_isr_register>

000009c8 <alt_ic_irq_enable>:
  NIOS2_READ_STATUS (context);
 9c8:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 9cc:	00bfff84 	movi	r2,-2
 9d0:	1884703a 	and	r2,r3,r2
 9d4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 9d8:	00800044 	movi	r2,1
 9dc:	d1200517 	ldw	r4,-32748(gp)
 9e0:	114a983a 	sll	r5,r2,r5
 9e4:	290ab03a 	or	r5,r5,r4
 9e8:	d1600515 	stw	r5,-32748(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 9ec:	d0a00517 	ldw	r2,-32748(gp)
 9f0:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
 9f4:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 9f8:	0005883a 	mov	r2,zero
 9fc:	f800283a 	ret

00000a00 <alt_ic_irq_disable>:
  NIOS2_READ_STATUS (context);
 a00:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a04:	00bfff84 	movi	r2,-2
 a08:	1884703a 	and	r2,r3,r2
 a0c:	1001703a 	wrctl	status,r2
  alt_irq_active &= ~(1 << id);
 a10:	00bfff84 	movi	r2,-2
 a14:	d1200517 	ldw	r4,-32748(gp)
 a18:	114a183a 	rol	r5,r2,r5
 a1c:	290a703a 	and	r5,r5,r4
 a20:	d1600515 	stw	r5,-32748(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 a24:	d0a00517 	ldw	r2,-32748(gp)
 a28:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
 a2c:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 a30:	0005883a 	mov	r2,zero
 a34:	f800283a 	ret

00000a38 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 a38:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
 a3c:	00800044 	movi	r2,1
 a40:	1144983a 	sll	r2,r2,r5
 a44:	10c4703a 	and	r2,r2,r3
}
 a48:	1004c03a 	cmpne	r2,r2,zero
 a4c:	f800283a 	ret

00000a50 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 a50:	28800808 	cmpgei	r2,r5,32
 a54:	1000161e 	bne	r2,zero,ab0 <alt_iic_isr_register+0x60>
{
 a58:	defffe04 	addi	sp,sp,-8
 a5c:	dfc00115 	stw	ra,4(sp)
 a60:	dc000015 	stw	r16,0(sp)
  NIOS2_READ_STATUS (context);
 a64:	0021303a 	rdctl	r16,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a68:	00bfff84 	movi	r2,-2
 a6c:	8084703a 	and	r2,r16,r2
 a70:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 a74:	280690fa 	slli	r3,r5,3
 a78:	00800074 	movhi	r2,1
 a7c:	10800a04 	addi	r2,r2,40
 a80:	10c5883a 	add	r2,r2,r3
 a84:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
 a88:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 a8c:	30000626 	beq	r6,zero,aa8 <alt_iic_isr_register+0x58>
 a90:	00009c80 	call	9c8 <alt_ic_irq_enable>
  NIOS2_WRITE_STATUS (context);
 a94:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 a98:	dfc00117 	ldw	ra,4(sp)
 a9c:	dc000017 	ldw	r16,0(sp)
 aa0:	dec00204 	addi	sp,sp,8
 aa4:	f800283a 	ret
    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 aa8:	0000a000 	call	a00 <alt_ic_irq_disable>
 aac:	003ff906 	br	a94 <alt_iic_isr_register+0x44>
  int rc = -EINVAL;  
 ab0:	00bffa84 	movi	r2,-22
}
 ab4:	f800283a 	ret

00000ab8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 ab8:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 abc:	00800074 	movhi	r2,1
 ac0:	00c00034 	movhi	r3,0
 ac4:	dfc00015 	stw	ra,0(sp)
 ac8:	10800004 	addi	r2,r2,0
 acc:	18c30f04 	addi	r3,r3,3132
 ad0:	10c00326 	beq	r2,r3,ae0 <alt_load+0x28>
  {
    while( to != end )
 ad4:	01000074 	movhi	r4,1
 ad8:	21000104 	addi	r4,r4,4
 adc:	1100141e 	bne	r2,r4,b30 <alt_load+0x78>
  if (to != from)
 ae0:	00800034 	movhi	r2,0
 ae4:	00c00034 	movhi	r3,0
 ae8:	10800804 	addi	r2,r2,32
 aec:	18c00804 	addi	r3,r3,32
 af0:	10c00326 	beq	r2,r3,b00 <alt_load+0x48>
    while( to != end )
 af4:	01000034 	movhi	r4,0
 af8:	21006004 	addi	r4,r4,384
 afc:	1100111e 	bne	r2,r4,b44 <alt_load+0x8c>
  if (to != from)
 b00:	00800074 	movhi	r2,1
 b04:	00c00034 	movhi	r3,0
 b08:	10800004 	addi	r2,r2,0
 b0c:	18c30f04 	addi	r3,r3,3132
 b10:	10c00326 	beq	r2,r3,b20 <alt_load+0x68>
    while( to != end )
 b14:	01000074 	movhi	r4,1
 b18:	21000004 	addi	r4,r4,0
 b1c:	11000e1e 	bne	r2,r4,b58 <alt_load+0xa0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 b20:	0000bbc0 	call	bbc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 b24:	dfc00017 	ldw	ra,0(sp)
 b28:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
 b2c:	0000bc01 	jmpi	bc0 <alt_icache_flush_all>
    {
      *to++ = *from++;
 b30:	19400017 	ldw	r5,0(r3)
 b34:	10800104 	addi	r2,r2,4
 b38:	18c00104 	addi	r3,r3,4
 b3c:	117fff15 	stw	r5,-4(r2)
 b40:	003fe606 	br	adc <alt_load+0x24>
 b44:	19400017 	ldw	r5,0(r3)
 b48:	10800104 	addi	r2,r2,4
 b4c:	18c00104 	addi	r3,r3,4
 b50:	117fff15 	stw	r5,-4(r2)
 b54:	003fe906 	br	afc <alt_load+0x44>
 b58:	19400017 	ldw	r5,0(r3)
 b5c:	10800104 	addi	r2,r2,4
 b60:	18c00104 	addi	r3,r3,4
 b64:	117fff15 	stw	r5,-4(r2)
 b68:	003fec06 	br	b1c <alt_load+0x64>

00000b6c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 b6c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 b70:	0009883a 	mov	r4,zero
{
 b74:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
 b78:	0000b980 	call	b98 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 b7c:	0000bb80 	call	bb8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 b80:	d1a00617 	ldw	r6,-32744(gp)
 b84:	d1600717 	ldw	r5,-32740(gp)
 b88:	d1200817 	ldw	r4,-32736(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 b8c:	dfc00017 	ldw	ra,0(sp)
 b90:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
 b94:	00006cc1 	jmpi	6cc <main>

00000b98 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 b98:	deffff04 	addi	sp,sp,-4
 b9c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 ba0:	0000c340 	call	c34 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 ba4:	00800044 	movi	r2,1
 ba8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 bac:	dfc00017 	ldw	ra,0(sp)
 bb0:	dec00104 	addi	sp,sp,4
 bb4:	f800283a 	ret

00000bb8 <alt_sys_init>:
void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_MIN, timer_min);
    ALTERA_AVALON_TIMER_INIT ( TIMER_MS, timer_MS);
    ALTERA_AVALON_TIMER_INIT ( TIMER_S, timer_S);
}
 bb8:	f800283a 	ret

00000bbc <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 bbc:	f800283a 	ret

00000bc0 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 bc0:	f800283a 	ret

00000bc4 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
 bc4:	213ffe84 	addi	r4,r4,-6
 bc8:	20800428 	cmpgeui	r2,r4,16
 bcc:	1000151e 	bne	r2,zero,c24 <alt_exception_cause_generated_bad_addr+0x60>
 bd0:	200890ba 	slli	r4,r4,2
 bd4:	00800034 	movhi	r2,0
 bd8:	2085883a 	add	r2,r4,r2
 bdc:	1082f917 	ldw	r2,3044(r2)
 be0:	1000683a 	jmp	r2
 be4:	00000c2c 	andhi	zero,zero,48
 be8:	00000c2c 	andhi	zero,zero,48
 bec:	00000c24 	muli	zero,zero,48
 bf0:	00000c24 	muli	zero,zero,48
 bf4:	00000c24 	muli	zero,zero,48
 bf8:	00000c2c 	andhi	zero,zero,48
 bfc:	00000c24 	muli	zero,zero,48
 c00:	00000c24 	muli	zero,zero,48
 c04:	00000c2c 	andhi	zero,zero,48
 c08:	00000c2c 	andhi	zero,zero,48
 c0c:	00000c24 	muli	zero,zero,48
 c10:	00000c2c 	andhi	zero,zero,48
 c14:	00000c24 	muli	zero,zero,48
 c18:	00000c24 	muli	zero,zero,48
 c1c:	00000c24 	muli	zero,zero,48
 c20:	00000c2c 	andhi	zero,zero,48
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 c24:	0005883a 	mov	r2,zero
 c28:	f800283a 	ret
 c2c:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
 c30:	f800283a 	ret

00000c34 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 c34:	000170fa 	wrctl	ienable,zero
}
 c38:	f800283a 	ret
