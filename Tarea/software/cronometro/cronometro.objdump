
cronometro.elf:     file format elf32-littlenios2
cronometro.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000180

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000008a0 memsz 0x000008a0 flags r-x
    LOAD off    0x00002000 vaddr 0x00010000 paddr 0x000008c0 align 2**12
         filesz 0x00000010 memsz 0x00000130 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000740  00000180  00000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000000c  00010000  000008c0  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  0001000c  000008cc  0000200c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00010010  000008d0  00002010  2**2
                  ALLOC, SMALL_DATA
  6 .ROM          00000000  000008d0  000008d0  00002010  2**0
                  CONTENTS
  7 .RAM          00000000  00010130  00010130  00002010  2**0
                  CONTENTS
  8 .comment      0000002c  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000238  00000000  00000000  00002040  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000073df  00000000  00000000  00002278  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001aff  00000000  00000000  00009657  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001cba  00000000  00000000  0000b156  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000002c8  00000000  00000000  0000ce10  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000011f6  00000000  00000000  0000d0d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000f2c  00000000  00000000  0000e2ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0000f1fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000001f8  00000000  00000000  0000f210  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0001052d  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00010530  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00010533  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00010534  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000004  00000000  00000000  00010535  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000004  00000000  00000000  00010539  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000004  00000000  00000000  0001053d  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  00010541  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000001e  00000000  00000000  00010549  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006cec2  00000000  00000000  00010567  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000180 l    d  .text	00000000 .text
00010000 l    d  .rodata	00000000 .rodata
0001000c l    d  .rwdata	00000000 .rwdata
00010010 l    d  .bss	00000000 .bss
000008d0 l    d  .ROM	00000000 .ROM
00010130 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cronometro_bsp//obj/HAL/src/crt0.o
000001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000001bc l     F .text	000000ac timer_min_inter
00010010 l     O .bss	00000004 cont_min
00010000 l     O .rodata	00000009 CSWTCH.19
00010000 l     O .rodata	00000009 CSWTCH.20
00000268 l     F .text	000000ac timer_ms_inter
00010014 l     O .bss	00000004 cont_mseg
00010000 l     O .rodata	00000009 CSWTCH.22
00010000 l     O .rodata	00000009 CSWTCH.23
00000314 l     F .text	000000ac timer_s_inter
00010018 l     O .bss	00000004 cont_seg
00010000 l     O .rodata	00000009 CSWTCH.25
00010000 l     O .rodata	00000009 CSWTCH.26
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
0001002c g     O .bss	00000004 alt_instruction_exception_handler
000007f0 g     F .text	0000002c alt_main
00010030 g     O .bss	00000100 alt_irq
000008cc g       *ABS*	00000000 __flash_rwdata_start
000008b8 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00010024 g     O .bss	00000004 alt_argv
0001800c g       *ABS*	00000000 _gp
00000848 g     F .text	00000070 alt_exception_cause_generated_bad_addr
00000588 g     F .text	00000064 .hidden __udivsi3
00010130 g       *ABS*	00000000 __bss_end
000006d4 g     F .text	00000068 alt_iic_isr_register
00000000 g       *ABS*	00000000 __alt_mem_ROM
000006bc g     F .text	00000018 alt_ic_irq_enabled
0001001c g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000060 alt_irq_handler
00000840 g     F .text	00000004 alt_dcache_flush_all
00010010 g       *ABS*	00000000 __ram_rwdata_end
0001000c g       *ABS*	00000000 __ram_rodata_end
000005ec g     F .text	0000005c .hidden __umodsi3
00010130 g       *ABS*	00000000 end
0000015c g     F .exceptions	00000024 alt_instruction_exception_entry
00011000 g       *ABS*	00000000 __alt_stack_pointer
00000180 g     F .text	0000003c _start
0000083c g     F .text	00000004 alt_sys_init
0001000c g       *ABS*	00000000 __ram_rwdata_start
00010000 g       *ABS*	00000000 __ram_rodata_start
00010130 g       *ABS*	00000000 __alt_stack_base
00010010 g       *ABS*	00000000 __bss_start
000003c0 g     F .text	000000d4 main
00010000 g       *ABS*	00000000 __alt_mem_RAM
00010020 g     O .bss	00000004 alt_envp
00000494 g     F .text	00000080 .hidden __divsi3
000008c0 g       *ABS*	00000000 __flash_rodata_start
0000081c g     F .text	00000020 alt_irq_init
00010028 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000648 g     F .text	00000004 alt_ic_isr_register
00010010 g       *ABS*	00000000 _edata
00010130 g       *ABS*	00000000 _end
00000180 g       *ABS*	00000000 __ram_exceptions_end
00000684 g     F .text	00000038 alt_ic_irq_disable
00000514 g     F .text	00000074 .hidden __modsi3
00011000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000000c g       .entry	00000000 _exit
00000844 g     F .text	00000004 alt_icache_flush_all
0001000c g     O .rwdata	00000004 alt_priority_mask
0000064c g     F .text	00000038 alt_ic_irq_enable
0000073c g     F .text	000000b4 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406014 	ori	at,at,384
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	000015c0 	call	15c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 10c:	04000074 	movhi	r16,1
 110:	84000c04 	addi	r16,r16,48
    i = 0;
 114:	0005883a 	mov	r2,zero
    mask = 1;
 118:	00c00044 	movi	r3,1
      if (active & mask)
 11c:	20ca703a 	and	r5,r4,r3
 120:	28000b26 	beq	r5,zero,150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context); 
 124:	100490fa 	slli	r2,r2,3
 128:	8085883a 	add	r2,r16,r2
 12c:	10c00017 	ldw	r3,0(r2)
 130:	11000117 	ldw	r4,4(r2)
 134:	183ee83a 	callr	r3
 138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 13c:	203ff51e 	bne	r4,zero,114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 140:	dfc00117 	ldw	ra,4(sp)
 144:	dc000017 	ldw	r16,0(sp)
 148:	dec00204 	addi	sp,sp,8
 14c:	f800283a 	ret
      mask <<= 1;
 150:	1806907a 	slli	r3,r3,1
      i++;
 154:	10800044 	addi	r2,r2,1
      if (active & mask)
 158:	003ff006 	br	11c <alt_irq_handler+0x20>

0000015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 15c:	d0a00817 	ldw	r2,-32736(gp)
{
 160:	200b883a 	mov	r5,r4
  if(alt_instruction_exception_handler) {
 164:	10000326 	beq	r2,zero,174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 168:	000d883a 	mov	r6,zero
 16c:	013fffc4 	movi	r4,-1
 170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 178:	0005883a 	mov	r2,zero
 17c:	f800283a 	ret

Disassembly of section .text:

00000180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 180:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
 184:	dec40014 	ori	sp,sp,4096
    movhi gp, %hi(_gp)
 188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
 18c:	d6a00314 	ori	gp,gp,32780
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
 194:	10800414 	ori	r2,r2,16

    movhi r3, %hi(__bss_end)
 198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
 19c:	18c04c14 	ori	r3,r3,304

    beq r2, r3, 1f
 1a0:	10c00326 	beq	r2,r3,1b0 <_start+0x30>

0:
    stw zero, (r2)
 1a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1ac:	10fffd36 	bltu	r2,r3,1a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1b0:	000073c0 	call	73c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1b4:	00007f00 	call	7f0 <alt_main>

000001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1b8:	003fff06 	br	1b8 <alt_after_alt_main>

000001bc <timer_min_inter>:

// Funcion encargada del manejo de interrupciones del timer de los minutos
static void timer_min_inter(void *context)
{
	(void) context;
	cont_min ++;
 1bc:	d0a00117 	ldw	r2,-32764(gp)
{
 1c0:	defffe04 	addi	sp,sp,-8
 1c4:	dfc00115 	stw	ra,4(sp)
	cont_min ++;
 1c8:	10800044 	addi	r2,r2,1
{
 1cc:	dc000015 	stw	r16,0(sp)
	if (cont_min > 60){
 1d0:	10c00f48 	cmpgei	r3,r2,61
 1d4:	18001e1e 	bne	r3,zero,250 <timer_min_inter+0x94>
	cont_min ++;
 1d8:	d0a00115 	stw	r2,-32764(gp)
		cont_min = 0;
	}

	int digito1 = cont_min%10;
	int digito2 = floor(10/cont_min);
 1dc:	d1600117 	ldw	r5,-32764(gp)
 1e0:	01000284 	movi	r4,10
 1e4:	00004940 	call	494 <__divsi3>
	int digito1 = cont_min%10;
 1e8:	d1200117 	ldw	r4,-32764(gp)
 1ec:	01400284 	movi	r5,10
	int digito2 = floor(10/cont_min);
 1f0:	1021883a 	mov	r16,r2
	int digito1 = cont_min%10;
 1f4:	00005140 	call	514 <__modsi3>
 1f8:	10bfffc4 	addi	r2,r2,-1
 1fc:	10c00268 	cmpgeui	r3,r2,9
 200:	1800151e 	bne	r3,zero,258 <timer_min_inter+0x9c>
 204:	00c00074 	movhi	r3,1
 208:	10c7883a 	add	r3,r2,r3
 20c:	19000003 	ldbu	r4,0(r3)
					Output1 = 1;
					break;
	    }


	switch (digito2) {
 210:	80bfffc4 	addi	r2,r16,-1
 214:	10c00268 	cmpgeui	r3,r2,9
 218:	1800111e 	bne	r3,zero,260 <timer_min_inter+0xa4>
 21c:	00c00074 	movhi	r3,1
 220:	10c7883a 	add	r3,r2,r3
 224:	18800003 	ldbu	r2,0(r3)
			default:
					Output2 = 1;
					break;
	    }
	// salida de los displays
	IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_1_BASE,Output2);
 228:	00c00134 	movhi	r3,4
 22c:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_2_BASE,Output1);
 230:	00800174 	movhi	r2,5
 234:	11000035 	stwio	r4,0(r2)

	//fin de la interrupcion
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_MIN_BASE,0);
 238:	00800434 	movhi	r2,16
 23c:	10000035 	stwio	zero,0(r2)

}
 240:	dfc00117 	ldw	ra,4(sp)
 244:	dc000017 	ldw	r16,0(sp)
 248:	dec00204 	addi	sp,sp,8
 24c:	f800283a 	ret
		cont_min = 0;
 250:	d0200115 	stw	zero,-32764(gp)
 254:	003fe106 	br	1dc <timer_min_inter+0x20>
	switch (digito1) {
 258:	01000044 	movi	r4,1
 25c:	003fec06 	br	210 <timer_min_inter+0x54>
	switch (digito2) {
 260:	00800044 	movi	r2,1
 264:	003ff006 	br	228 <timer_min_inter+0x6c>

00000268 <timer_ms_inter>:
	cont_mseg ++;
 268:	d0a00217 	ldw	r2,-32760(gp)
{
 26c:	defffe04 	addi	sp,sp,-8
 270:	dfc00115 	stw	ra,4(sp)
	cont_mseg ++;
 274:	10800044 	addi	r2,r2,1
{
 278:	dc000015 	stw	r16,0(sp)
	if (cont_mseg > 60){
 27c:	10c00f48 	cmpgei	r3,r2,61
 280:	18001e1e 	bne	r3,zero,2fc <timer_ms_inter+0x94>
	cont_mseg ++;
 284:	d0a00215 	stw	r2,-32760(gp)
	int digito2 = floor(10/cont_mseg);
 288:	d1600217 	ldw	r5,-32760(gp)
 28c:	01000284 	movi	r4,10
 290:	00004940 	call	494 <__divsi3>
	int digito1 = cont_mseg%10;
 294:	d1200217 	ldw	r4,-32760(gp)
 298:	01400284 	movi	r5,10
	int digito2 = floor(10/cont_mseg);
 29c:	1021883a 	mov	r16,r2
	int digito1 = cont_mseg%10;
 2a0:	00005140 	call	514 <__modsi3>
 2a4:	10bfffc4 	addi	r2,r2,-1
 2a8:	10c00268 	cmpgeui	r3,r2,9
 2ac:	1800151e 	bne	r3,zero,304 <timer_ms_inter+0x9c>
 2b0:	00c00074 	movhi	r3,1
 2b4:	10c7883a 	add	r3,r2,r3
 2b8:	19000003 	ldbu	r4,0(r3)
	switch (digito2) {
 2bc:	80bfffc4 	addi	r2,r16,-1
 2c0:	10c00268 	cmpgeui	r3,r2,9
 2c4:	1800111e 	bne	r3,zero,30c <timer_ms_inter+0xa4>
 2c8:	00c00074 	movhi	r3,1
 2cc:	10c7883a 	add	r3,r2,r3
 2d0:	18800003 	ldbu	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_5_BASE,Output2);
 2d4:	00c00474 	movhi	r3,17
 2d8:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_6_BASE,Output1);
 2dc:	008004b4 	movhi	r2,18
 2e0:	11000035 	stwio	r4,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_MS_BASE,0);
 2e4:	008000f4 	movhi	r2,3
 2e8:	10000035 	stwio	zero,0(r2)
}
 2ec:	dfc00117 	ldw	ra,4(sp)
 2f0:	dc000017 	ldw	r16,0(sp)
 2f4:	dec00204 	addi	sp,sp,8
 2f8:	f800283a 	ret
		cont_mseg = 0;
 2fc:	d0200215 	stw	zero,-32760(gp)
 300:	003fe106 	br	288 <timer_ms_inter+0x20>
	switch (digito1) {
 304:	01000044 	movi	r4,1
 308:	003fec06 	br	2bc <timer_ms_inter+0x54>
	switch (digito2) {
 30c:	00800044 	movi	r2,1
 310:	003ff006 	br	2d4 <timer_ms_inter+0x6c>

00000314 <timer_s_inter>:
	cont_seg ++;
 314:	d0a00317 	ldw	r2,-32756(gp)
{
 318:	defffe04 	addi	sp,sp,-8
 31c:	dfc00115 	stw	ra,4(sp)
	cont_seg ++;
 320:	10800044 	addi	r2,r2,1
{
 324:	dc000015 	stw	r16,0(sp)
	if (cont_seg > 60){
 328:	10c00f48 	cmpgei	r3,r2,61
 32c:	18001e1e 	bne	r3,zero,3a8 <timer_s_inter+0x94>
	cont_seg ++;
 330:	d0a00315 	stw	r2,-32756(gp)
	int digito2 = floor(10/cont_seg);
 334:	d1600317 	ldw	r5,-32756(gp)
 338:	01000284 	movi	r4,10
 33c:	00004940 	call	494 <__divsi3>
	int digito1 = cont_seg%10;
 340:	d1200317 	ldw	r4,-32756(gp)
 344:	01400284 	movi	r5,10
	int digito2 = floor(10/cont_seg);
 348:	1021883a 	mov	r16,r2
	int digito1 = cont_seg%10;
 34c:	00005140 	call	514 <__modsi3>
 350:	10bfffc4 	addi	r2,r2,-1
 354:	10c00268 	cmpgeui	r3,r2,9
 358:	1800151e 	bne	r3,zero,3b0 <timer_s_inter+0x9c>
 35c:	00c00074 	movhi	r3,1
 360:	10c7883a 	add	r3,r2,r3
 364:	19000003 	ldbu	r4,0(r3)
	switch (digito2) {
 368:	80bfffc4 	addi	r2,r16,-1
 36c:	10c00268 	cmpgeui	r3,r2,9
 370:	1800111e 	bne	r3,zero,3b8 <timer_s_inter+0xa4>
 374:	00c00074 	movhi	r3,1
 378:	10c7883a 	add	r3,r2,r3
 37c:	18800003 	ldbu	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_3_BASE,Output2);
 380:	00c001b4 	movhi	r3,6
 384:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(SEGMENTOS_4_BASE,Output1);
 388:	008001f4 	movhi	r2,7
 38c:	11000035 	stwio	r4,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_S_BASE,0);
 390:	008000b4 	movhi	r2,2
 394:	10000035 	stwio	zero,0(r2)
}
 398:	dfc00117 	ldw	ra,4(sp)
 39c:	dc000017 	ldw	r16,0(sp)
 3a0:	dec00204 	addi	sp,sp,8
 3a4:	f800283a 	ret
		cont_seg = 0;
 3a8:	d0200315 	stw	zero,-32756(gp)
 3ac:	003fe106 	br	334 <timer_s_inter+0x20>
	switch (digito1) {
 3b0:	01000044 	movi	r4,1
 3b4:	003fec06 	br	368 <timer_s_inter+0x54>
	switch (digito2) {
 3b8:	00800044 	movi	r2,1
 3bc:	003ff006 	br	380 <timer_s_inter+0x6c>

000003c0 <main>:



int main()
{ 
 3c0:	defffe04 	addi	sp,sp,-8
	unsigned modo = IORD_ALTERA_AVALON_PIO_DATA(SWITCHS_BASE);
 3c4:	00800234 	movhi	r2,8
{ 
 3c8:	dfc00115 	stw	ra,4(sp)
	unsigned modo = IORD_ALTERA_AVALON_PIO_DATA(SWITCHS_BASE);
 3cc:	10800037 	ldwio	r2,0(r2)

	unsigned init = IORD_ALTERA_AVALON_PIO_DATA(SWITCHS_BASE);
 3d0:	00c00234 	movhi	r3,8
 3d4:	18c00037 	ldwio	r3,0(r3)
		//	onof=0;
		//}
	//}

	//if(onof==1){
		if (modo == 2){
 3d8:	10c00098 	cmpnei	r3,r2,2
 3dc:	18000f1e 	bne	r3,zero,41c <main+0x5c>
				alt_ic_isr_register(
 3e0:	01800034 	movhi	r6,0
 3e4:	d8000015 	stw	zero,0(sp)
 3e8:	000f883a 	mov	r7,zero
 3ec:	3180c504 	addi	r6,r6,788
 3f0:	000b883a 	mov	r5,zero

				alt_ic_isr_register(
						TIMER_MS_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_MS_IRQ,timer_ms_inter,NULL,NULL
						  );

				alt_ic_isr_register(
 3f4:	0009883a 	mov	r4,zero
 3f8:	00006480 	call	648 <alt_ic_isr_register>
						TIMER_MIN_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_MIN_IRQ,timer_min_inter,NULL,NULL
						  );
			}
	//}

	IOWR_ALTERA_AVALON_TIMER_CONTROL(
 3fc:	008000c4 	movi	r2,3
 400:	00c000b4 	movhi	r3,2
 404:	18800135 	stwio	r2,4(r3)
			TIMER_S_BASE,ALTERA_AVALON_TIMER_CONTROL_ITO_MSK | ALTERA_AVALON_TIMER_CONTROL_CONT_MSK);

	IOWR_ALTERA_AVALON_TIMER_CONTROL(
 408:	00c000f4 	movhi	r3,3
 40c:	18800135 	stwio	r2,4(r3)
			TIMER_MS_BASE,ALTERA_AVALON_TIMER_CONTROL_ITO_MSK | ALTERA_AVALON_TIMER_CONTROL_CONT_MSK);

	IOWR_ALTERA_AVALON_TIMER_CONTROL(
 410:	00c00434 	movhi	r3,16
 414:	18800135 	stwio	r2,4(r3)




  /* Event loop never exits. */
  while (1);
 418:	003fff06 	br	418 <main+0x58>
		}if(modo == 1){
 41c:	10c00060 	cmpeqi	r3,r2,1
 420:	1800161e 	bne	r3,zero,47c <main+0xbc>
		}if(modo ==3){
 424:	108000e0 	cmpeqi	r2,r2,3
 428:	103ff426 	beq	r2,zero,3fc <main+0x3c>
				alt_ic_isr_register(
 42c:	01800034 	movhi	r6,0
 430:	000f883a 	mov	r7,zero
 434:	3180c504 	addi	r6,r6,788
 438:	000b883a 	mov	r5,zero
 43c:	0009883a 	mov	r4,zero
 440:	d8000015 	stw	zero,0(sp)
 444:	00006480 	call	648 <alt_ic_isr_register>
				alt_ic_isr_register(
 448:	01800034 	movhi	r6,0
 44c:	000f883a 	mov	r7,zero
 450:	31809a04 	addi	r6,r6,616
 454:	01400044 	movi	r5,1
 458:	d8000015 	stw	zero,0(sp)
 45c:	0009883a 	mov	r4,zero
 460:	00006480 	call	648 <alt_ic_isr_register>
				alt_ic_isr_register(
 464:	01800034 	movhi	r6,0
 468:	d8000015 	stw	zero,0(sp)
 46c:	000f883a 	mov	r7,zero
 470:	31806f04 	addi	r6,r6,444
 474:	014000c4 	movi	r5,3
 478:	003fde06 	br	3f4 <main+0x34>
				alt_ic_isr_register(
 47c:	01800034 	movhi	r6,0
 480:	d8000015 	stw	zero,0(sp)
 484:	000f883a 	mov	r7,zero
 488:	31809a04 	addi	r6,r6,616
 48c:	01400044 	movi	r5,1
 490:	003fd806 	br	3f4 <main+0x34>

00000494 <__divsi3>:
 494:	20001a16 	blt	r4,zero,500 <__divsi3+0x6c>
 498:	000f883a 	mov	r7,zero
 49c:	2800020e 	bge	r5,zero,4a8 <__divsi3+0x14>
 4a0:	014bc83a 	sub	r5,zero,r5
 4a4:	39c0005c 	xori	r7,r7,1
 4a8:	200d883a 	mov	r6,r4
 4ac:	00c00044 	movi	r3,1
 4b0:	2900092e 	bgeu	r5,r4,4d8 <__divsi3+0x44>
 4b4:	00800804 	movi	r2,32
 4b8:	00c00044 	movi	r3,1
 4bc:	00000106 	br	4c4 <__divsi3+0x30>
 4c0:	10001226 	beq	r2,zero,50c <__divsi3+0x78>
 4c4:	294b883a 	add	r5,r5,r5
 4c8:	10bfffc4 	addi	r2,r2,-1
 4cc:	18c7883a 	add	r3,r3,r3
 4d0:	293ffb36 	bltu	r5,r4,4c0 <__divsi3+0x2c>
 4d4:	18000d26 	beq	r3,zero,50c <__divsi3+0x78>
 4d8:	0005883a 	mov	r2,zero
 4dc:	31400236 	bltu	r6,r5,4e8 <__divsi3+0x54>
 4e0:	314dc83a 	sub	r6,r6,r5
 4e4:	10c4b03a 	or	r2,r2,r3
 4e8:	1806d07a 	srli	r3,r3,1
 4ec:	280ad07a 	srli	r5,r5,1
 4f0:	183ffa1e 	bne	r3,zero,4dc <__divsi3+0x48>
 4f4:	38000126 	beq	r7,zero,4fc <__divsi3+0x68>
 4f8:	0085c83a 	sub	r2,zero,r2
 4fc:	f800283a 	ret
 500:	0109c83a 	sub	r4,zero,r4
 504:	01c00044 	movi	r7,1
 508:	003fe406 	br	49c <__divsi3+0x8>
 50c:	0005883a 	mov	r2,zero
 510:	003ff806 	br	4f4 <__divsi3+0x60>

00000514 <__modsi3>:
 514:	20001916 	blt	r4,zero,57c <__modsi3+0x68>
 518:	000f883a 	mov	r7,zero
 51c:	2005883a 	mov	r2,r4
 520:	2800010e 	bge	r5,zero,528 <__modsi3+0x14>
 524:	014bc83a 	sub	r5,zero,r5
 528:	00c00044 	movi	r3,1
 52c:	2900092e 	bgeu	r5,r4,554 <__modsi3+0x40>
 530:	01800804 	movi	r6,32
 534:	00c00044 	movi	r3,1
 538:	00000106 	br	540 <__modsi3+0x2c>
 53c:	30000d26 	beq	r6,zero,574 <__modsi3+0x60>
 540:	294b883a 	add	r5,r5,r5
 544:	31bfffc4 	addi	r6,r6,-1
 548:	18c7883a 	add	r3,r3,r3
 54c:	293ffb36 	bltu	r5,r4,53c <__modsi3+0x28>
 550:	18000826 	beq	r3,zero,574 <__modsi3+0x60>
 554:	1806d07a 	srli	r3,r3,1
 558:	11400136 	bltu	r2,r5,560 <__modsi3+0x4c>
 55c:	1145c83a 	sub	r2,r2,r5
 560:	280ad07a 	srli	r5,r5,1
 564:	183ffb1e 	bne	r3,zero,554 <__modsi3+0x40>
 568:	38000126 	beq	r7,zero,570 <__modsi3+0x5c>
 56c:	0085c83a 	sub	r2,zero,r2
 570:	f800283a 	ret
 574:	2005883a 	mov	r2,r4
 578:	003ffb06 	br	568 <__modsi3+0x54>
 57c:	0109c83a 	sub	r4,zero,r4
 580:	01c00044 	movi	r7,1
 584:	003fe506 	br	51c <__modsi3+0x8>

00000588 <__udivsi3>:
 588:	200d883a 	mov	r6,r4
 58c:	2900152e 	bgeu	r5,r4,5e4 <__udivsi3+0x5c>
 590:	28001416 	blt	r5,zero,5e4 <__udivsi3+0x5c>
 594:	00800804 	movi	r2,32
 598:	00c00044 	movi	r3,1
 59c:	00000206 	br	5a8 <__udivsi3+0x20>
 5a0:	10000e26 	beq	r2,zero,5dc <__udivsi3+0x54>
 5a4:	28000516 	blt	r5,zero,5bc <__udivsi3+0x34>
 5a8:	294b883a 	add	r5,r5,r5
 5ac:	10bfffc4 	addi	r2,r2,-1
 5b0:	18c7883a 	add	r3,r3,r3
 5b4:	293ffa36 	bltu	r5,r4,5a0 <__udivsi3+0x18>
 5b8:	18000826 	beq	r3,zero,5dc <__udivsi3+0x54>
 5bc:	0005883a 	mov	r2,zero
 5c0:	31400236 	bltu	r6,r5,5cc <__udivsi3+0x44>
 5c4:	314dc83a 	sub	r6,r6,r5
 5c8:	10c4b03a 	or	r2,r2,r3
 5cc:	1806d07a 	srli	r3,r3,1
 5d0:	280ad07a 	srli	r5,r5,1
 5d4:	183ffa1e 	bne	r3,zero,5c0 <__udivsi3+0x38>
 5d8:	f800283a 	ret
 5dc:	0005883a 	mov	r2,zero
 5e0:	f800283a 	ret
 5e4:	00c00044 	movi	r3,1
 5e8:	003ff406 	br	5bc <__udivsi3+0x34>

000005ec <__umodsi3>:
 5ec:	2005883a 	mov	r2,r4
 5f0:	2900132e 	bgeu	r5,r4,640 <__umodsi3+0x54>
 5f4:	28001216 	blt	r5,zero,640 <__umodsi3+0x54>
 5f8:	01800804 	movi	r6,32
 5fc:	00c00044 	movi	r3,1
 600:	00000206 	br	60c <__umodsi3+0x20>
 604:	30000c26 	beq	r6,zero,638 <__umodsi3+0x4c>
 608:	28000516 	blt	r5,zero,620 <__umodsi3+0x34>
 60c:	294b883a 	add	r5,r5,r5
 610:	31bfffc4 	addi	r6,r6,-1
 614:	18c7883a 	add	r3,r3,r3
 618:	293ffa36 	bltu	r5,r4,604 <__umodsi3+0x18>
 61c:	18000626 	beq	r3,zero,638 <__umodsi3+0x4c>
 620:	1806d07a 	srli	r3,r3,1
 624:	11400136 	bltu	r2,r5,62c <__umodsi3+0x40>
 628:	1145c83a 	sub	r2,r2,r5
 62c:	280ad07a 	srli	r5,r5,1
 630:	183ffb1e 	bne	r3,zero,620 <__umodsi3+0x34>
 634:	f800283a 	ret
 638:	2005883a 	mov	r2,r4
 63c:	f800283a 	ret
 640:	00c00044 	movi	r3,1
 644:	003ff606 	br	620 <__umodsi3+0x34>

00000648 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 648:	00006d41 	jmpi	6d4 <alt_iic_isr_register>

0000064c <alt_ic_irq_enable>:
  NIOS2_READ_STATUS (context);
 64c:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 650:	00bfff84 	movi	r2,-2
 654:	1884703a 	and	r2,r3,r2
 658:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 65c:	00800044 	movi	r2,1
 660:	d1200417 	ldw	r4,-32752(gp)
 664:	114a983a 	sll	r5,r2,r5
 668:	290ab03a 	or	r5,r5,r4
 66c:	d1600415 	stw	r5,-32752(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 670:	d0a00417 	ldw	r2,-32752(gp)
 674:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
 678:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 67c:	0005883a 	mov	r2,zero
 680:	f800283a 	ret

00000684 <alt_ic_irq_disable>:
  NIOS2_READ_STATUS (context);
 684:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 688:	00bfff84 	movi	r2,-2
 68c:	1884703a 	and	r2,r3,r2
 690:	1001703a 	wrctl	status,r2
  alt_irq_active &= ~(1 << id);
 694:	00bfff84 	movi	r2,-2
 698:	d1200417 	ldw	r4,-32752(gp)
 69c:	114a183a 	rol	r5,r2,r5
 6a0:	290a703a 	and	r5,r5,r4
 6a4:	d1600415 	stw	r5,-32752(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 6a8:	d0a00417 	ldw	r2,-32752(gp)
 6ac:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
 6b0:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 6b4:	0005883a 	mov	r2,zero
 6b8:	f800283a 	ret

000006bc <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 6bc:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
 6c0:	00800044 	movi	r2,1
 6c4:	1144983a 	sll	r2,r2,r5
 6c8:	10c4703a 	and	r2,r2,r3
}
 6cc:	1004c03a 	cmpne	r2,r2,zero
 6d0:	f800283a 	ret

000006d4 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 6d4:	28800808 	cmpgei	r2,r5,32
 6d8:	1000161e 	bne	r2,zero,734 <alt_iic_isr_register+0x60>
{
 6dc:	defffe04 	addi	sp,sp,-8
 6e0:	dfc00115 	stw	ra,4(sp)
 6e4:	dc000015 	stw	r16,0(sp)
  NIOS2_READ_STATUS (context);
 6e8:	0021303a 	rdctl	r16,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 6ec:	00bfff84 	movi	r2,-2
 6f0:	8084703a 	and	r2,r16,r2
 6f4:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 6f8:	280690fa 	slli	r3,r5,3
 6fc:	00800074 	movhi	r2,1
 700:	10800c04 	addi	r2,r2,48
 704:	10c5883a 	add	r2,r2,r3
 708:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
 70c:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 710:	30000626 	beq	r6,zero,72c <alt_iic_isr_register+0x58>
 714:	000064c0 	call	64c <alt_ic_irq_enable>
  NIOS2_WRITE_STATUS (context);
 718:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 71c:	dfc00117 	ldw	ra,4(sp)
 720:	dc000017 	ldw	r16,0(sp)
 724:	dec00204 	addi	sp,sp,8
 728:	f800283a 	ret
    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 72c:	00006840 	call	684 <alt_ic_irq_disable>
 730:	003ff906 	br	718 <alt_iic_isr_register+0x44>
  int rc = -EINVAL;  
 734:	00bffa84 	movi	r2,-22
}
 738:	f800283a 	ret

0000073c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 73c:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 740:	00800074 	movhi	r2,1
 744:	00c00034 	movhi	r3,0
 748:	dfc00015 	stw	ra,0(sp)
 74c:	10800304 	addi	r2,r2,12
 750:	18c23304 	addi	r3,r3,2252
 754:	10c00326 	beq	r2,r3,764 <alt_load+0x28>
  {
    while( to != end )
 758:	01000074 	movhi	r4,1
 75c:	21000404 	addi	r4,r4,16
 760:	1100141e 	bne	r2,r4,7b4 <alt_load+0x78>
  if (to != from)
 764:	00800034 	movhi	r2,0
 768:	00c00034 	movhi	r3,0
 76c:	10800804 	addi	r2,r2,32
 770:	18c00804 	addi	r3,r3,32
 774:	10c00326 	beq	r2,r3,784 <alt_load+0x48>
    while( to != end )
 778:	01000034 	movhi	r4,0
 77c:	21006004 	addi	r4,r4,384
 780:	1100111e 	bne	r2,r4,7c8 <alt_load+0x8c>
  if (to != from)
 784:	00800074 	movhi	r2,1
 788:	00c00034 	movhi	r3,0
 78c:	10800004 	addi	r2,r2,0
 790:	18c23004 	addi	r3,r3,2240
 794:	10c00326 	beq	r2,r3,7a4 <alt_load+0x68>
    while( to != end )
 798:	01000074 	movhi	r4,1
 79c:	21000304 	addi	r4,r4,12
 7a0:	11000e1e 	bne	r2,r4,7dc <alt_load+0xa0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 7a4:	00008400 	call	840 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 7a8:	dfc00017 	ldw	ra,0(sp)
 7ac:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
 7b0:	00008441 	jmpi	844 <alt_icache_flush_all>
    {
      *to++ = *from++;
 7b4:	19400017 	ldw	r5,0(r3)
 7b8:	10800104 	addi	r2,r2,4
 7bc:	18c00104 	addi	r3,r3,4
 7c0:	117fff15 	stw	r5,-4(r2)
 7c4:	003fe606 	br	760 <alt_load+0x24>
 7c8:	19400017 	ldw	r5,0(r3)
 7cc:	10800104 	addi	r2,r2,4
 7d0:	18c00104 	addi	r3,r3,4
 7d4:	117fff15 	stw	r5,-4(r2)
 7d8:	003fe906 	br	780 <alt_load+0x44>
 7dc:	19400017 	ldw	r5,0(r3)
 7e0:	10800104 	addi	r2,r2,4
 7e4:	18c00104 	addi	r3,r3,4
 7e8:	117fff15 	stw	r5,-4(r2)
 7ec:	003fec06 	br	7a0 <alt_load+0x64>

000007f0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 7f0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 7f4:	0009883a 	mov	r4,zero
{
 7f8:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
 7fc:	000081c0 	call	81c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800:	000083c0 	call	83c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 804:	d1a00517 	ldw	r6,-32748(gp)
 808:	d1600617 	ldw	r5,-32744(gp)
 80c:	d1200717 	ldw	r4,-32740(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 810:	dfc00017 	ldw	ra,0(sp)
 814:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
 818:	00003c01 	jmpi	3c0 <main>

0000081c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 81c:	deffff04 	addi	sp,sp,-4
 820:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 824:	00008b80 	call	8b8 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 828:	00800044 	movi	r2,1
 82c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 830:	dfc00017 	ldw	ra,0(sp)
 834:	dec00104 	addi	sp,sp,4
 838:	f800283a 	ret

0000083c <alt_sys_init>:
void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_MIN, timer_min);
    ALTERA_AVALON_TIMER_INIT ( TIMER_MS, timer_MS);
    ALTERA_AVALON_TIMER_INIT ( TIMER_S, timer_S);
}
 83c:	f800283a 	ret

00000840 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 840:	f800283a 	ret

00000844 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 844:	f800283a 	ret

00000848 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
 848:	213ffe84 	addi	r4,r4,-6
 84c:	20800428 	cmpgeui	r2,r4,16
 850:	1000151e 	bne	r2,zero,8a8 <alt_exception_cause_generated_bad_addr+0x60>
 854:	200890ba 	slli	r4,r4,2
 858:	00800034 	movhi	r2,0
 85c:	2085883a 	add	r2,r4,r2
 860:	10821a17 	ldw	r2,2152(r2)
 864:	1000683a 	jmp	r2
 868:	000008b0 	cmpltui	zero,zero,34
 86c:	000008b0 	cmpltui	zero,zero,34
 870:	000008a8 	cmpgeui	zero,zero,34
 874:	000008a8 	cmpgeui	zero,zero,34
 878:	000008a8 	cmpgeui	zero,zero,34
 87c:	000008b0 	cmpltui	zero,zero,34
 880:	000008a8 	cmpgeui	zero,zero,34
 884:	000008a8 	cmpgeui	zero,zero,34
 888:	000008b0 	cmpltui	zero,zero,34
 88c:	000008b0 	cmpltui	zero,zero,34
 890:	000008a8 	cmpgeui	zero,zero,34
 894:	000008b0 	cmpltui	zero,zero,34
 898:	000008a8 	cmpgeui	zero,zero,34
 89c:	000008a8 	cmpgeui	zero,zero,34
 8a0:	000008a8 	cmpgeui	zero,zero,34
 8a4:	000008b0 	cmpltui	zero,zero,34
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8a8:	0005883a 	mov	r2,zero
 8ac:	f800283a 	ret
 8b0:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
 8b4:	f800283a 	ret

000008b8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 8b8:	000170fa 	wrctl	ienable,zero
}
 8bc:	f800283a 	ret
